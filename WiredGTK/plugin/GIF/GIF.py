import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################import cairoclass Surface:	def __init__(self,DrawingArea1):		self.sur=[]		self.ctx=[]		self.DrawingArea=DrawingArea1		self.cr=None		self.Add_Layer()		self.Layer=[]	def Add_Layer(self):		sur = cairo.ImageSurface(cairo.FORMAT_ARGB32,self.DrawingArea.Width,self.DrawingArea.Height )		ctx = cairo.Context(sur)		self.sur.append(sur)		self.ctx.append(ctx)	def Clear_Layer(self,index):		sur = cairo.ImageSurface(cairo.FORMAT_ARGB32,self.DrawingArea.Width,self.DrawingArea.Height )		ctx = cairo.Context(sur)		self.sur[index]=sur		self.ctx[index]=ctx	def Show(self,index):		if self.cr==None:			self.cr = self.DrawingArea.get_property('window').cairo_create()		self.cr.set_source_surface(self.sur[index], 0, 0)		self.cr.paint()	def Set_Layer(self,lst):		self.Layer=lst	def Get_Surface(self,index):		return self.sur[index]	def Get_Context(self,index):		self.Layer=[index]		return self.ctx[index]	def Blit(self,cr):		for a in self.Layer:			cr.set_source_surface(self.sur[a], 0, 0)			cr.paint()class Acceleration:	def __init__(self):		self.Reset()	def next(self):		ret=self._Accelerationptr[self._AccelerationCTR]		if self._AccelerationCTR!=len(self._Accelerationptr)-1:			self._AccelerationCTR+=1		return ret	def Reset(self):		self._AccelerationCTR=0		self._Accelerationptr=[200-a*10 for a in range(1,16)]class Handler(usercontrol):	#WiredEvent def LocationHeading(self,x,y,xdir,ydir)	#WiredEvent def buttonpress(self)	#WiredEvent def buttonrelease(self)	#WiredProperty 'Folder': 'img'	#WiredProperty 'AutoRun': 'True','list':["True","False"]	#WiredProperty 'Speed': '100'	#WiredProperty 'Acceleration': 'True','list':["True","False"]	#WiredProperty 'AutoScale': 'True','list':["True","False"]	#WiredProperty 'Gravity':  'False','list':["True","False"]	#WiredProperty 'GavityValue': '1'	#WiredProperty 'Stun': 'False'	#WiredProperty 'currX': ''	#WiredProperty 'currY': ''	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(100)#500 ms		self.sch.Start()		self.schmove=Scheduler(20)#500 ms		self.schmove.Start()		self.schgravity=Scheduler(20)		self.schgravity.Start()		self._text=''		self._usercontrolproperty=''		#self.surf=Surface(self.DrawingArea1)		#self.surf.Add_Layer()		self._autoinc=False		self.currimgptr=0		self._Folder="img"		#self.activeXcreated()		self._Speed=""		self._Acceleration=False		self.accel=Acceleration()		self.hasscale=False		self._AutoScale=False		self._Gravity=False		self._Gravitybuf=False		self.firstime=True		self._GavityValue=1		self._stun=False		self._currX=""	@property	def currX(self):		try:			return self.usercontrol.Left+(self.usercontrol.Width/2)		except:			return 0	@property	def currY(self):		try:			return self.usercontrol.Top+(self.usercontrol.Height/2)		except:			return 0			@property	def Stun(self):		return self._stun	@Stun.setter		def Stun(self,value):		self._stun=TrueFalse(value)	@property	def GavityValue(self):		return self._GavityValue	@GavityValue.setter		def GavityValue(self,value):		self._GavityValue=int(value)	@property	def Gravity(self):		return self._Gravity	@Gravity.setter		def Gravity(self,value):		self._Gravitybuf=TrueFalse(value)		self._Gravity=TrueFalse(value)	@property	def AutoScale(self):		return self._AutoScale	@AutoScale.setter		def AutoScale(self,value):		self._AutoScale=TrueFalse(value)	@property	def Acceleration(self):		return self._Acceleration	@Acceleration.setter		def Acceleration(self,value):		self._Acceleration=TrueFalsevalue	@property	def Speed(self):		return self._Speed	@Speed.setter		def Speed(self,value):		self.sch.Stop()		self.sch=Scheduler(int(value))		self.sch.Start()		#self._autoinc=False	@property	def AutoRun(self):		return self._autoinc	@AutoRun.setter		def AutoRun(self,value):		self._autoinc=TrueFalse(value)	@property	def Folder(self):		return self._Folder	@Folder.setter		def Folder(self,value):		self._Folder=value				def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.GetImageFile(self._Folder)		self.DrawingArea1.Width=self.usercontrol.Width		self.DrawingArea1.Height=self.usercontrol.Height		self.DrawingArea1Event.Width=self.DrawingArea1.Width		self.DrawingArea1Event.Height=self.DrawingArea1.Height		self.scalex=self.DrawingArea1.Width/self.image_surface[0].get_width()		self.scaley=self.DrawingArea1.Height/self.image_surface[0].get_height()		#print(self.usercontrol.Left)		#cant resize DrawingArea if draw events already fired, so we manually connect after setting its w,h		self.DrawingArea1.connect("draw",self.DrawingArea1_draw)		pass	def unload(self,*args):		destroy=True		if destroy==True:			self.running=False			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		#import pdb;pdb.set_trace()				inc=10		if self.form_load==False:			self.form_load=True		def moverot(inc):				if self._stun:					return 				xcenter=self.usercontrol.Left+self.usercontrol.Width/2				ycenter=self.usercontrol.Top+self.usercontrol.Height/2				xdir,ydir=0,0				if self.firstime==True:					self.xp=xcenter# to fire Graviry if enabled					self.yp=ycenter+1# to fire Graviry if enabled					self.firstime=False				hasmove=False				if self.xp>xcenter:					if abs(self.xp-xcenter)>inc:						self.usercontrol.Left+=inc						xdir=inc						hasmove=True				if self.xp<xcenter:					if abs(self.xp-xcenter)>inc:						self.usercontrol.Left-=inc						xdir=-inc						hasmove=True				if self.yp>(ycenter):					if abs(self.yp-ycenter)>inc:						self.usercontrol.Top+=inc						ydir=inc					#	if ycenter<=620:#avoid going down further					#		self.usercontrol.Top+=inc					#	else:					#		self.usercontrol.Top=620-self.usercontrol.Height/2						hasmove=True				if self.yp<ycenter:					if abs(self.yp-ycenter)>inc:						self.usercontrol.Top-=inc						hasmove=True						ydir=-inc				if hasmove==False and self._Gravitybuf==True:					self._Gravity=True				if self.caller!=None and 'LocationHeading' in self.wiredevents:					x=self.usercontrol.Left+self.usercontrol.Width/2					y=self.usercontrol.Top+self.usercontrol.Height/2					self.wiredevents['LocationHeading'](x,y,xdir,ydir)		try:			if self.schmove.Event():#timer routine()				moverot(inc)				self.schmove.Start()			if self.schgravity.Event():#timer routine()				if self._Gravity and self._stun==False:					self.yp+=self._GavityValue					inc=self._GavityValue					moverot(inc)				self.schgravity.Start()			except:			a=0		if self.sch.Event():#timer routine						try:				self.cr = self.DrawingArea1.get_property('window').cairo_create()				self.cr.set_source_surface(self.image_surface[self.currimgptr],0,0)				self.xxx=self.image_surface[self.currimgptr]				self.DrawingArea1.queue_draw()				if self._autoinc==True:					self.currimgptr+=1			except:				a=0						if self.currimgptr==self.numimg:				self.currimgptr=0			#self.Speed=self.accel.next()							self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.Entry1=forms		self.create("{'Events': '[[, ]]', 'Var': '', 'Top': '60', 'Left': '835', 'Width': '170', 'Text': '0', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '30', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Entry1', 'Alignment': '', 'Enable': 'True'}","Entry","usercontrol","[]")		self.Button10=forms		self.create("{'Events': '[clicked]', 'Var': '', 'Top': '95', 'Left': '835', 'Width': '100', 'Text': 'Run/Pause', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Button10', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button11=forms		self.create("{'Events': '[clicked]', 'Var': '', 'Top': '145', 'Left': '835', 'Width': '100', 'Text': 'SetSpeed', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Button11', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button12=forms		self.create("{'Events': '[clicked]', 'Var': '', 'Top': '195', 'Left': '835', 'Width': '100', 'Text': 'SetFrameNumber', 'Visible': 'False', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(1,1,1,1)', 'Picture': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'Button12', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.DrawingArea1=forms		self.create("{'Events': '[button-release-event, button-press-event]', 'Var': '', 'Top': '0', 'Left': '0', 'Width': '240', 'Text': 'DrawingArea1', 'Visible': 'True', 'Tag': '', 'ParentsType': '', 'Help': '', 'BackColor': '(0, 0.004564714409092119, 0.16754722135048672, 0.5)', 'Picture': '', 'Height': '180', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Name': 'DrawingArea1', 'Enable': 'True'}","DrawingArea","usercontrol","[['button-release-event', 'self,event,e'], ['button-press-event', 'self,event,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def DrawingArea1_draw(self,wid, cr):		try:			if self._AutoScale:				cr.scale(self.scalex,self.scaley)			cr.set_source_surface(self.xxx, 0, 0)			cr.paint()		except:			pass	def Move(self,x,y):		self.xp=x		self.yp=y		self._Gravity=False	def MoveInstant(self,x,y):		self.usercontrol.Left=x-(self.usercontrol.Width/2);self.usercontrol.Top=y-(self.usercontrol.Height/2);		self.xp=x		self.yp=y		self._Gravity=False	def GetImageFile(self,folder):		#import pdb;pdb.set_trace()		from os import listdir		from os.path import isfile, join		import os				if FileExist(folder) and GetPath(folder).find("\\")==-1 and GetPath(folder).find("/")==-1:			folder=folder.replace("\\","/")			buf=GetPath(folder)			folder=folder.replace(buf+"/","")			folder=app_path()+"/"+folder		onlyfiles = [f for f in os.listdir(folder+'/') if os.path.isfile(folder+'/'+f)]		#print(onlyfiles)		self.numimg=len(onlyfiles)		self.image_surface=[0]*16		for a in range(1,self.numimg+1):			self.image_surface[a-1] = cairo.ImageSurface.create_from_png(folder+'/'+ str(a)+".png")			def SetFrame(self,index):		if index<self.numimg:			self.currimgptr=index			self.cr = self.DrawingArea1.get_property('window').cairo_create()			self.cr.set_source_surface(self.image_surface[self.currimgptr],0,0)			self.xxx=self.image_surface[self.currimgptr]			self.DrawingArea1.queue_draw()	def Pause(self):		self._autoinc=False	def Run(self):		self._autoinc=True	def Button10_clicked(self,e):		if self._autoinc==True:			self._autoinc=False		else:			self._autoinc=True		pass	def Button11_clicked(self,e):		self.Speed(int(self.Entry1.Text))	def Button12_clicked(self,e):		self.SetFrame(int(self.Entry1.Text))		pass	def MoveSpeed(self,ms):		self.schmove.Stop()		self.schmove=Scheduler(ms)#500 ms		self.schmove.Start()	def DrawingArea1_button_release_event(self,event,e):		if self.caller!=None and 'buttonrelease' in self.wiredevents:self.wiredevents['buttonrelease']()		pass	def DrawingArea1_button_press_event(self,event,e):		if self.caller!=None and 'buttonpress' in self.wiredevents:self.wiredevents['buttonpress']()if __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()