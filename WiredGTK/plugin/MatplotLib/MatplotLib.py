import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################from matplotlib.figure import Figure#Possibly this rendering backend is broken currently#from matplotlib.backends.backend_gtk3agg import FigureCanvasGTK3Agg as FigureCanvasfrom matplotlib.backends.backend_gtk3cairo import FigureCanvasGTK3Cairo as FigureCanvasclass Handler(usercontrol):	#WiredProperty 'Xlabel': 'X-Axis'	#WiredProperty 'Ylabel': 'Y-Axis'	#WiredProperty 'Title': 'Graph Title'	#WiredProperty 'Grid': 'True','list':["True","False"]	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._Xlabel=""		self._Ylabel=""		self._Title=""		self._Grid="False"	@property		def Grid(self):		return self._Grid	@Grid.setter		def Grid(self,value):			self._Grid=value 	@property	def Title(self):		return self._Title	@Title.setter		def Title(self,value):		self._Title=value	@property	def Xlabel(self):		return self._Xlabel	@Xlabel.setter		def Xlabel(self,value):		self._Xlabel=value		self.Label2.Text=value	@property	def Ylabel(self):		return self._Ylabel	@Ylabel.setter		def Ylabel(self,value):		self._Ylabel=value		self.Label1.Text=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		f = Figure(figsize=(5, 4), dpi=100)		self.a = f.add_subplot(111)		#t = np.arange(0.0, 3.0, 0.01)		#s = np.sin(2*np.pi*t/3)		#self.a.plot(t, s)		#import pdb; pdb.set_trace();				self.canvas = FigureCanvas(f)  # a Gtk.DrawingArea		self.a.grid(TrueFalse(self._Grid))		self.Label1.set_angle(90)		self.Label1.Height=self.usercontrol.Height+self.Label2.Height		self.Label2.Width=self.usercontrol.Width		self.Label2.Left=self.Label1.Width		self.Label2.Top=self.usercontrol.Height-self.Label2.Height		self.canvas.set_size_request(self.usercontrol.Width, self.usercontrol.Height-self.Label2.Height)		forms(self.canvas).Visible=True		try:			self.usercontrol.put(self.canvas,self.Label1.Width,0)		except:			a=0				pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Name': 'Label1', 'Text': 'Y-Axis', 'Top': '0', 'Left': '0', 'Width': '25', 'Height': '120', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[[, ]]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': '', 'Alignment': 'CENTER'}","Label","usercontrol","[]")		self.create("{'Name': 'Label2', 'Text': 'X-Axis', 'Top': '80', 'Left': '55', 'Width': '135', 'Height': '25', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[[, ]]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': '', 'Alignment': 'CENTER'}","Label","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def graph(self, x,y,):  		self.usercontrol.remove(self.canvas)		f = Figure(figsize=(5, 4), dpi=100)		self.a = f.add_subplot(111)		self.a.plot(x, y)		self.a.grid(TrueFalse(self._Grid))		self.canvas = FigureCanvas(f)  # a Gtk.DrawingArea		self.canvas.set_size_request(self.usercontrol.Width, self.usercontrol.Height-self.Label2.Height)		#self.Label1.Text=xlabel#self.a.set_xlabel(xlabel)		#self.Label2.Text=ylabel#self.a.set_ylabel(ylabel)		self.a.set_title(self._Title)		forms(self.canvas).Visible=True		try:			self.usercontrol.put(self.canvas,self.Label1.Width,0)		except:			a=0	def graph2(self, x,y,x2,y2):  		self.usercontrol.remove(self.canvas)		f = Figure(figsize=(5, 4), dpi=100)		self.a = f.add_subplot(111)		self.a.plot(x, y,x2,y2)		self.a.grid(TrueFalse(self._Grid))			self.canvas = FigureCanvas(f)  # a Gtk.DrawingArea		self.canvas.set_size_request(self.usercontrol.Width, self.usercontrol.Height-self.Label2.Height)		#self.Label1.Text=xlabel#self.a.set_xlabel(xlabel)		#self.Label2.Text=ylabel#self.a.set_ylabel(ylabel)		self.a.set_title(self._Title)		forms(self.canvas).Visible=True		try:			self.usercontrol.put(self.canvas,self.Label1.Width,0)		except:			a=0if __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()