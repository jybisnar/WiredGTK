import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################from _thread import *class Handler(usercontrol):	#WiredEvent def frameReady(self,frame)		#WiredProperty 'Open': ''	#WiredProperty 'camindex': '0'	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(17)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.video_capture=None		self.skipaquare=False		self._Open=""		self.ret=-1		self._camindex=0	@property	def camindex(self):		return self._camindex	@camindex.setter		def camindex(self,value):		self._camindex=int(value)	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.Image1.Width=self.usercontrol.Width		self.Image1.Height=self.usercontrol.Height		pass	def AddView(self,parent,top,left,width,height,camindex=0):		'''		#in parent form		import WebCam		self.WebCam1=WebCam.Handler(self)		self.WebCam1.AddView(self.usercontrol,100,300,400,200,0)		self.WebCam1.connect('frameReady',self.WebCam1_frameReady)		'''		x=self.Widget()					#remove and get reference to usercontrol 		forms(x).Dimension=width,height;	#set control Dimension		#set important properties before calling activeXcreated()		self.camindex=camindex		self.activeXcreated()		parent.put(x,left,top)#add this control to parent		def acquireFrame(self):		self.stop=False		while 1:			if self.skipaquare==False:				self.ret, self.frame = self.video_capture.read()			else:				delay(20)			if self.stop==True:				break		self.video_capture.release()		self.video_capture=None	def PauseAquireImage(self,flag):#True or False		self.skipaquare=flag	def imshow(self,cvImg):		self.Image1.LoadPictureOCV=cvImg	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True		@property	def Open(self):		return self._Open	@Open.setter		def Open(self,value):		self._Open=value		if self.video_capture==None:			if value=='True' or value==True:				self.video_capture = cv2.VideoCapture(int(self._camindex))				start_new_thread(self.acquireFrame ,())		else:			self.stop=True	def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			if self.video_capture!=None:				if self.ret!=-1:					if self.caller!=None and 'frameReady' in self.wiredevents:self.wiredevents['frameReady'](self.frame)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Text': 'Image1', 'Font': '', 'Enable': 'True', 'Height': '110', 'Events': '[[, ]]', 'ParentsType': '', 'Top': '0', 'Width': '155', 'Visible': 'True', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'Left': '0', 'Name': 'Image1', 'Var': '', 'Help': '', 'BackColor': '(1,1,1,1)'}","Image","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this formif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()