import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Enable': 'True', 'Visible': 'True', 'Tag': 'Activex', 'Height': '260', 'BackColor': '(0, 0.4220090620706002, 0.6295039725989799, 0.5)', 'camindex': '0', 'Font': '', 'Width': '390', 'ParentsType': '', 'Name': 'WebCam1', 'Left': '35', 'Var': '', 'Top': '10', 'ForeColor': '(0,0,0,1)', 'Text': 'WebCam1', 'Help': '', 'Picture': 'WebCam.png', 'Events': '[frameReady]', 'Open': ''}","WebCam","usercontrol","[['frameReady', 'self,frame']]")		self.create("{'Enable': 'True', 'Visible': 'True', 'Tag': '', 'Height': '50', 'BackColor': '(1,1,1,1)', 'Font': '', 'Width': '100', 'ParentsType': '', 'Name': 'Button1', 'Left': '35', 'Var': '', 'Top': '275', 'ForeColor': '(0,0,0,1)', 'Text': 'Start', 'Help': '', 'Picture': '', 'Events': '[]'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Enable': 'True', 'Visible': 'True', 'Tag': '', 'Height': '50', 'BackColor': '(1,1,1,1)', 'Font': '', 'Width': '100', 'ParentsType': '', 'Name': 'Button2', 'Left': '140', 'Var': '', 'Top': '275', 'ForeColor': '(0,0,0,1)', 'Text': 'Pause', 'Help': '', 'Picture': '', 'Events': '[clicked]'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Enable': 'True', 'Visible': 'True', 'Tag': '', 'Height': '50', 'BackColor': '(1,1,1,1)', 'Font': '', 'Width': '180', 'ParentsType': '', 'Name': 'Button3', 'Left': '245', 'Var': '', 'Top': '275', 'ForeColor': '(0,0,0,1)', 'Text': 'Save To image folder', 'Help': '', 'Picture': '', 'Events': '[clicked]'}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def WebCam1_frameReady(self,frame):		self.frame=frame#buffer for saving		#place your image proc here				self.WebCam1.imshow(self.frame)#show image		pass	def Button1_clicked(self,e):		self.WebCam1.Open=True		pass	def Button2_clicked(self,e):		self.WebCam1.Open=False		pass	def Button3_clicked(self,e):		import cv2		fname=app_path() + "/images/" + CreateFileName() + ".jpg"# save as datetime.jpg		cv2.imwrite(fname,self.frame)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()