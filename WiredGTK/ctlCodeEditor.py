import giimport timegi.require_version('Gtk', '3.0')gi.require_version('GtkSource', '3.0')from gi.repository import Gtk,GObject,Gdk,GdkPixbuf,Pango,GLib,GtkSourcefrom wired_module import *from copy import deepcopyimport ctlCodeEditorX#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	@staticmethod	def CreateActiveX(self,width,height,top,left,parent):		_codeEditor=Handler(self)		codeEditor=forms(_codeEditor)		_codeEditor.usercontrol.Width=width+30		_codeEditor.usercontrol.Height=height+30		parent.put(_codeEditor.Widget(),top,left)		return codeEditor,_codeEditor		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()				self.tabs=[]		self.editorlst=[]		self.width=400		self.Button4.Visible=False	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Top': '520', 'Visible': 'False', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '100', 'Text': 'Button1', 'ParentsType': '', 'Events': '[[, ]]', 'Name': 'Button1', 'ForeColor': '(0,0,0,1)', 'Height': '29', 'Left': '210', 'Enable': 'True', 'BackColor': '(1,1,1,1)'}","Button","usercontrol","[]")		self.create("{'Top': '520', 'Visible': 'False', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '100', 'Text': 'remove', 'ParentsType': '', 'Events': '[clicked]', 'Name': 'Button2', 'ForeColor': '(0,0,0,1)', 'Height': '20', 'Left': '109', 'Enable': 'True', 'BackColor': '(1,1,1,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '520', 'Visible': 'False', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '100', 'Text': 'Add', 'ParentsType': '', 'Events': '[clicked]', 'Name': 'Button3', 'ForeColor': '(0,0,0,1)', 'Height': '29', 'Left': '4', 'Enable': 'True', 'BackColor': '(1,1,1,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '585', 'Visible': 'True', 'Picture': 'FileChooser.png', 'Tag': 'Activex', 'Font': '', 'Width': '30', 'Text': 'FileChooser1', 'ParentsType': '', 'Events': '[[, ]]', 'Name': 'filechooser1', 'ForeColor': '(0,0,0,1)', 'Height': '30', 'Left': '311', 'Enable': 'True', 'BackColor': '(0, 0.13597473326972542, 0.21995608206125172, 0.5)'}","FileChooser","usercontrol","[]")		self.create("{'Alignment':'CENTER', 'Top': '6', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '80', 'Text': 'x:0 y0', 'ParentsType': '', 'Events': '[[, ]]', 'Name': 'Label1', 'ForeColor': '(1.00,0.01,0.00,1)', 'Height': '29', 'Left': '750', 'Enable': 'True', 'BackColor': '(0.48,0.73,0.93,1)'}","Label","usercontrol","[]")		self.create("{'Top': '6', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '52', 'Text': 'Designer', 'ParentsType': '', 'Events': '[clicked]', 'Name': 'ButtonHide', 'ForeColor': '(0,0,0,1)', 'Height': '29', 'Left': '650', 'Enable': 'True', 'BackColor': '(1,1,1,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '6', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '57', 'Text': 'Save', 'ParentsType': '', 'Events': '[clicked]', 'Name': 'btnSave', 'ForeColor': '(0,0,0,1)', 'Height': '29', 'Left': '551', 'Enable': 'True', 'BackColor': '(1,1,1,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '6', 'Visible': 'False', 'Picture': '', 'Tag': '', 'Font': '', 'Width': '78', 'Text': 'Wing IDE', 'ParentsType': '', 'Events': '[clicked]', 'Name': 'Button4', 'ForeColor': '(0,0,0,1)', 'Height': '29', 'Left': '550', 'Enable': 'True', 'BackColor': '(1,1,1,1)'}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def AddTab(self,title):		if len(self.tabs)==5:return		if title in self.tabs:return		_holder=Gtk.Layout()		_x=Gtk.Label()		_event=Gtk.EventBox()				holder=forms(_holder)		holder.Width=self.width		holder.Height=30				x=forms(_x)		event=forms(_event)		x.Text=title		x.BackColor=(1,1,1,1)		x.Visible=True		event.Visible=True		event.set_name(title)		x.set_name(title)		holder.set_name(title)		x.Height=30		event.Height=30		x.Width=self.width		x.Font="Sans Bold 8"		event.Width=self.width		event.set_tooltip_text(title)		event.connect('button-release-event',self.click)		holder.Visible=True		holder.put(_x,0,0)		holder.put(_event,0,0)		self.usercontrol.put(_holder,4+len(self.tabs)*(self.width+2),0)		self.tabs.append(title)		self.Activate(title)		self.currentFilename=''	def HideAllEditor(self):		for i,a in enumerate(self.tabs):			self.editorlst[i][1].usercontrol.Visible=False			def click(self,*args):		if args[0]!=None:			self.currentFilename=args[0].get_name()		self.window.Text=self.currentFilename		self.Activate(self.currentFilename)		for i,a in enumerate(self.tabs):			self.editorlst[i][1].usercontrol.Visible=False			if a==self.currentFilename:				self.editorlst[i][1].usercontrol.Visible=True		pass	def currentEditor(self):		for i,a in enumerate(self.tabs):			if a==self.currentFilename:				return i	def rearrangeTab(self):		x=self.usercontrol.get_children()#reposition tabs		i=0		for a in x:			if type(a.get_children()[0])==Gtk.Label:				if a.get_name().find(':')!=-1:#"filename has ':' "					forms(a).Left=i*(self.width+2)					i+=1						self.currentFilename=a.get_name()		self.HideAllEditor()		i=self.currentEditor()		if len(self.tabs)!=0:			self.editorlst[i][1].usercontrol.Visible=True						def RemoveTab(self,title):		if title in self.tabs:			self.tabs.remove(title)			x=self.usercontrol.get_children()			for a in x:				if a.get_name()==title:					self.usercontrol.remove(a)					forms(a).Visible=False					del a				i=0					x=self.usercontrol.get_children()#reposition tabs			for a in x:				if type(a.get_children()[0])==Gtk.Label:					if a.get_name().find(':')!=-1:#"filename has ':' "						forms(a).Left=i*(self.width+2)						i+=1		pass	def Activate(self,title):		self.currentFilename=title		if title in self.tabs:			if self.tabs.index(title)==0:				self.btnSave.Visible=False			else:				self.btnSave.Visible=True		i=0				x=self.usercontrol.get_children()#reposition tabs		for a in x:			if type(a)==Gtk.Layout:				if a.get_name()!=title:					for b in a.get_children():						forms(b).Font='Sans 8'						forms(b).ForeColor=(0,0,0,1)										else:					for b in a.get_children():						forms(b).Font='Sans Bold 8'						forms(b).ForeColor=(0,0,1,1)	def RemoveTabAndControl(self):		if len(self.tabs)!=0:			i=self.currentEditor()			self.RemoveTab(self.currentFilename)			self.editorlst[i][1].usercontrol.Visible=False			self.editorlst.remove(self.editorlst[i])			self.rearrangeTab()			self.Activate(self.currentFilename)		pass				def Button2_clicked(self,e):		self.RemoveTabAndControl()	def key_release(self,*args):		self.Label1.Text=str(args[2])		self.caller.textview1_key_release_event_cb(args[0],args[1],args[2])		pass	def button_release(self,*args):		self.Label1.Text=str(args[2])		self.caller.textview1_button_release_event_cb(args[0],args[1],args[2])		#self.Button4.Visible=True		pass		def key_press(self,*args):		self.Label1.Text=str(args[2])		ret=self.caller.textview1_key_press_event_cb(args[0],args[1],args[2])		return ret			def button_press(self,*args):		self.Label1.Text=str(args[2])		self.caller.textview1_button_press_event_cb(args[0],args[1],args[2])		pass		def paste_clipboard(self,*args):		#self.Label1.Text=str(args[2])		self.caller.textview1_paste_clipboard_cb(args[0])		pass			def showLineInCode(self,lineno):		if self.caller!=None:			self.caller.showLineInCode(lineno)		pass	def ButtonHide_clicked(self,e):		self.usercontrol.Visible=False		self.Activate(self.caller.filename)		self.caller.btncode_clicked_cb(None)	def Button4_clicked(self,e):		try:			self.Label1.Text=self.editorlst[self.currentEditor()][1].getXYpos()			lineno=getCSV(2,":",self.Label1.Text)			self.usercontrol.Visible=False			self.Activate(self.caller.filename)				if self.caller.gtkcodeflag==True:				self.caller.btncode_clicked_cb(None)				self.Button4.Visible=False			self.caller.btnShowWingIDE(int(lineno)-1)					except:			a=0				pass	def Button3_clicked(self,e):		fname=self.filechooser1.SelectFile()		self.OpenTab(fname)		pass	def get_buffer(self):		return self.editorlst[self.currentEditor()][1].TextView1.get_buffer()	def get_textview(self):		return self.editorlst[self.currentEditor()][1]._TextView1	def Object(self):		try:			return self.editorlst[self.currentEditor()][1].Object()		except:			return None	def scrollToLine(self,lineno):		y=self.editorlst[self.currentEditor()][1].ScrolledWindow1.get_property('vadjustment')		y.set_value(lineno*17)#16:font=9;also in ctlCodeWindow			self.Label1.Text=self.editorlst[self.currentEditor()][1].getXYpos()	def ScrolledWindowCode(self):		return self.editorlst[self.currentEditor()][1].ScrolledWindow1			def SetFocus(self):		self.editorlst[self.currentEditor()][1].TextView1.SetFocus()	@property	def Text(self):		if len(self.editorlst)!=0:			return self.editorlst[self.currentEditor()][1].Text		else:			return ''	def TextView(self):		try:			return self.editorlst[self.currentEditor()][1]		except:			return None	@Text.setter		def Text(self,value):		if len(self.editorlst)!=0:			self.editorlst[self.currentEditor()][1].Text=value			#self.Button4.Visible=True		pass		def Currentline(self):		if len(self.editorlst)!=0:			return self.editorlst[self.currentEditor()][1].Currentline()		pass	def cursorTopLeft(self):		if len(self.editorlst)!=0:			return self.editorlst[self.currentEditor()][1].cursorTopLeft	def browse(self,code=None):		if len(self.editorlst)!=0:			self.editorlst[self.currentEditor()][1].browse(code)			def OpenTab(self,fname):		#fname=self.filechooser1.SelectFile()		fname=fname.replace("\\","/")		if type(fname)==str:			if (fname in self.tabs)==False:				self.HideAllEditor()				strs=GetFileStr(fname)				self.AddTab(fname)				self.editorlst.append((ctlCodeEditorX.Handler.CreateActiveX(self,930,500,0,30,self.usercontrol)))				self.editorlst[len(self.editorlst)-1][1].Text=strs				self.editorlst[len(self.editorlst)-1][0].connect('key_release',self.key_release)				self.editorlst[len(self.editorlst)-1][0].connect('button_release',self.button_release)								self.editorlst[len(self.editorlst)-1][0].connect('key_press',self.key_press)				self.editorlst[len(self.editorlst)-1][0].connect('button_press',self.button_press)					self.editorlst[len(self.editorlst)-1][0].connect('paste_clipboard',self.paste_clipboard)									self.currentFilename=fname			else:				self.Activate(fname)	def ctlCodeEditorX1_key_release(self,event,e):		pass	def ctlCodeEditorX1_button_release(self,event,e):		pass	def Colorize(self):		if len(self.editorlst)!=0:			self.editorlst[self.currentEditor()][1].Colorize()	def btnSave_clicked(self,e):		SaveFileStr(self.currentFilename,self.Text);		self.btnSave.Text="OK"		refreshGTK()		refreshGTK()		delay(1000)		self.btnSave.Text="Save"		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()