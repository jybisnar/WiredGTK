import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wired_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	def __init__(self,*param):					initUI(self,param,w=320,h=180,title="WiredGTK v2.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.lst=[]		self.selected=''	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True	def List(self,title,lst):		self.lst=lst		self.Label1.Text=title		self.listboxwta1.AddList(self.lst)			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		@property	def Text(self):		return ''	@Text.setter	def Text(self,value):		pass	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Top': '22', 'Var': '', 'Name': 'listboxwta1', 'ParentsType': '', 'Picture': 'listboxwta.png', 'Text': 'listboxwta1', 'BackColor': '(0, 0.8063876113412316, 0.9760030416289159, 0.5)', 'Height': '128', 'Enable': 'True', 'Left': '-30', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Events': '[row_activated]', 'Tag': 'Activex', 'Visible': 'True', 'Help': '', 'Width': '351'}","listboxwta","usercontrol","[['row_activated', 'self,value']]")		self.create("{'Top': '135', 'Var': '', 'Name': 'Button1', 'ParentsType': '', 'Picture': '', 'Text': 'Cancel', 'BackColor': '(1,1,1,1)', 'Height': '35', 'Enable': 'True', 'Left': '203', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Events': '[clicked]', 'Tag': '', 'Visible': 'True', 'Help': '', 'Width': '100'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '135', 'Var': '', 'Name': 'Button2', 'ParentsType': '', 'Picture': '', 'Text': 'OK', 'BackColor': '(1,1,1,1)', 'Height': '35', 'Enable': 'True', 'Left': '99', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Events': '[clicked]', 'Tag': '', 'Visible': 'True', 'Help': '', 'Width': '100'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '1', 'Var': '', 'Name': 'Label1', 'ParentsType': '', 'Picture': '', 'Text': 'Please Select Here', 'BackColor': '(0.09,0.57,0.88,1)', 'Height': '30', 'Enable': 'True', 'Left': '-1', 'ForeColor': '(0,0,0,1)', 'Font': '', 'Events': '[[, ]]', 'Tag': '', 'Visible': 'True', 'Help': '', 'Width': '322'}","Label","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return self.selected	def listboxwta1_row_activated(self,value):		self.selected=value		pass	def Button2_clicked(self,e):		if self.selected=='' and len(self.lst):			self.selected=self.lst[0]		self.unload()		pass	def Button1_clicked(self,e):		self.unload()		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()