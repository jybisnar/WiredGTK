import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdkfrom wired_module import *from copy import deepcopyclass Handler(object):	def __init__(self,parent=None):		self.parent=parent		self.window1 = Gtk.Window();self.window1.connect("destroy", Gtk.main_quit);self.window1W=forms(self.window1)		self.mainlayout=Gtk.Layout();self.layoutW=forms(self.mainlayout);self.mainlayout.show();self.layoutW.Dimension=1366,768;self.window1.add(self.mainlayout);		self._usercontrol=Gtk.Layout();self.usercontrol=forms(self._usercontrol);self._usercontrol.show();self.usercontrol.Dimension=1366,768;self.mainlayout.put(self._usercontrol,0,0);				self.timeout_id = GObject.timeout_add(10, self.loop, None)#10ms 		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.form_load=False		self.window1W.Text="GTKWired"				self.GTKForms()		self.top=0		self.lst=[]		self.Image1Event.Left=0		self.Image1Event.Top=0		self.Image1Event.Top=0		self.lastindex=0		self.ShowIntellisense(["Donna","Michelle","Abcd","Mich"],"Dog")		self.HighlightLst=[]	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):				self.create("{'Font':'','Enable': 'True', 'Name': 'Layout1', 'Visible': 'True', 'Text': 'Layout1', 'Top': '1', 'Height': '115', 'ParentsType': '', 'Width': '241', 'ForeColor': '(0, 0, 0, 1)', 'Tag': '', 'BackColor': '(1, 1, 1, 1)', 'Events': '', 'Left': '0'}","Layout","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Font':'','Enable': 'True', 'Name': 'Layout2', 'Visible': 'True', 'Text': 'Layout2', 'Top': '0', 'Height': '106', 'ParentsType': 'Layout', 'Width': '235', 'ForeColor': '(0, 0, 0, 1)', 'Tag': '', 'BackColor': '(1, 1, 1, 1)', 'Events': '', 'Left': '1'}","Layout","Layout1","[['button-press-event', 'self,event,e']]")		self.create("{'Font':'','Enable': 'True', 'Name': 'VScrollbar1', 'Visible': 'True', 'Text': 'VScrollbar1', 'Top': '1', 'Height': '115', 'ParentsType': '', 'Width': '30', 'ForeColor': '(0, 0, 0, 1)', 'Tag': '', 'BackColor': '(1, 1, 1, 1)', 'Events': '', 'Left': '232'}","VScrollbar","usercontrol","[['change-value', 'self,e']]")		self.create("{'Font':'','Enable': 'True', 'Name': 'Image1', 'Visible': 'False', 'Text': 'Image1', 'Top': '-3', 'Height': '123', 'ParentsType': '', 'Width': '146', 'ForeColor': '(0, 0, 0, 1)', 'Tag': '', 'BackColor': '(1, 1, 1, 1)', 'Events': '', 'Left': '233'}","Image","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Font':'','Enable': 'True', 'Name': 'Entry1', 'Visible': 'True', 'Text': '', 'Top': '-5000', 'Height': '123', 'ParentsType': '', 'Width': '146', 'ForeColor': '(0, 0, 0, 1)', 'Tag': '', 'BackColor': '(1, 1, 1, 1)', 'Events': '', 'Left': '233'}","TextView","usercontrol","[['key-release-event', 'self,event,e']]")	def Highlight(self,lst,color=(1,0,0,1)):		self.HighlightLst=lst		index=[]		for i,a in enumerate(self.lst):			for b in lst:				if a[1]==b:					index.append(i)									for a in index:			forms(self.lst[a][0]).ForeColor=color			def ShowIntellisense(self,lsts,targetWord=None,Highlight=None):		lst=deepcopy(lsts)		lst.sort()		l1=[]		l2=[]		for a in lst:			if a[0]=="_":				l2.append(a)			else:				l1.append(a)		lst=l1+l2				for a in self.lst:			parent=a[0].get_parent()			parent.remove(a[0])			del a			self.lst=[]		self.top=0		self.Layout2.Top=0				bklbl=Gtk.Label()		forms(bklbl).Text=""		forms(bklbl).Visible=True		forms(bklbl).BackColor=(0.92,0.94,0.84,1)		self.Layout2.put(bklbl,0,0)			for a,text in enumerate(lst):			lbl=Gtk.Label()			forms(lbl).Text=text			forms(lbl).Visible=True			self.Layout2.put(lbl,0,a*20)					self.lst.append((lbl,text))					if targetWord!=None:			self.ScrollTo(targetWord)		lens=len(self.lst)		adj=self.VScrollbar1.get_adjustment()		adj.set_upper(lens)			adj.set_value(self.top)		self.Layout2.Height=20*len(lst)		self.Image1Event.Top=self.Layout2.Top		self.Image1Event.Width=self.Layout2.Width		self.Image1Event.Height=self.Layout2.Height		forms(self.lst[abs(self.top)][0]).ForeColor=0,0,1,1		self.lastindex=abs(self.top)				forms(bklbl).Width=self.Layout2.Width		forms(bklbl).Height=self.Layout2.Height		if Highlight!=None:			self.Highlight(Highlight)	def loop(self, user_data):		if self.form_load==False:			self.form_load=True			self.parse=Parser("WTA","\r",1)		#        Serial.begin(9600)#enable serial comm		if self.sch.Event():#timer routine			#code here			self.sch.Start()		#while Serial.available():#enable serial comm		#        c=Serialx.read()		#        if self.parse.DataReceived(c):		#                print int(getCSV(0,",", self.parse.data))                        		return True	#return true so that main_loop can call it again                        	def Entry1_key_release_event(self,event,e):		UP=65362		DOWN=65364		ENTER=13		TAB=65289		if self.usercontrol.Visible ==True:			self.Entry1.Text="\n\n"			x=self.Entry1.get_buffer()			l=x.get_iter_at_line(1)#place to line 2, avoid spkr beep			x.place_cursor(l)			if e.get_keyval()[1]==UP:				self.ScrollUp()				self.Entry1.SetFocus()				return True			if e.get_keyval()[1]==DOWN:				self.ScrollDown()				self.Entry1.SetFocus()				return True			if e.get_keycode()[1]==ENTER or e.get_keycode()[1]==36:				for a in range(2):					forms(self.lst[self.lastindex][0]).ForeColor=0,1,0,1					refreshGTK()					delay(50)				if self.parent!=None:					self.parent.selected(self.lst[self.lastindex][1])								return True		pass	def clickISR(self,items):		#self.btdelete_items.show()#delete		#self.btnupdate_items.show()#update				#self.dbUtils.TableValToUserInput("Items",items)		print(items)	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def Widget(self):		if self._usercontrol in self.mainlayout.get_children():			self.mainlayout.remove(self._usercontrol)		return self._usercontrol	def WidgetSetSize(self,width,height):		self.usercontrol.set_size_request(width,height)	def WidgetSize(self):		return {'width':self.usercontrol.get_size_request()[0],'height':self.usercontrol.get_size_request()[1]}	def Hide(self):		self.usercontrol.hide()	def Show(self):		self.usercontrol.show()	def ScrollTo(self,targetWord):		found=False		for i,a in enumerate(self.lst):			if targetWord[0].lower()==a[1][0].lower():				found=True				break		if found==True:				self.top=i*-1			self.Layout2.Top=self.top*20	def ScrollDown(self):		self.top-=1		if abs(self.top)>=len(self.lst):			self.top=(len(self.lst)-1)*-1		self.Layout2.Top=self.top*20		self.ColorSelected(int(abs(self.top)))		self.VScrollbar1.Text=self.lastindex		self.Layout2.Top=self.top*20		self.Image1Event.Top=self.Layout2.Top			def ScrollUp(self):		self.top+=1		if self.top>0:self.top=0		self.Layout2.Top=self.top*20		self.ColorSelected(int(abs(self.top)))		self.VScrollbar1.Text=self.lastindex		self.Layout2.Top=self.top*20		self.Image1Event.Top=self.Layout2.Top							def Layout1_button_press_event(self,event,e):				pass	def Layout2_button_press_event(self,event,e):		pass	def Button1_button_press_event(self,event,e):		self.ScrollUp()		self.window1W.Text=self.Text		pass	def Button2_button_press_event(self,event,e):		self.ScrollDown()		self.window1W.Text=self.Text		pass	@property	def Text(self):		if abs(self.top)<len(self.lst):			return self.lst[abs(self.top)][1]		return ""	def Button3_button_press_event(self,event,e):		self.ScrollTo('mas')		pass	def VScrollbar1_change_value(self,*args):		val=self.VScrollbar1.Text		self.top=float(val)*-1		self.Layout2.Top=self.top*20		self.Image1Event.Top=self.Layout2.Top	def Image1_button_press_event(self,event,e):		self.ColorSelected(e)		self.window1.grab_focus()	def ColorSelected(self,e=None):		if type(e)!=int:			x,y=e.get_coords()			index=int(y/20)			if Gdk.EventType._2BUTTON_PRESS==e.type:				sel= self.lst[index][1]				for a in range(2):					forms(self.lst[self.lastindex][0]).ForeColor=0,1,0,1					refreshGTK()					delay(50)				if self.parent!=None:					self.parent.selected(sel)										else:				index=e				if type(e)==int or Gdk.EventType.BUTTON_PRESS==e.type:			forms(self.lst[index][0]).ForeColor=0,0,1,1			if index!=self.lastindex:				forms(self.lst[self.lastindex][0]).ForeColor=0,0,0,1				self.Highlight(self.HighlightLst)			self.lastindex=index		pass	if __name__ == "__main__":	_m = Handler()	_m.window1.show()	Gtk.main()