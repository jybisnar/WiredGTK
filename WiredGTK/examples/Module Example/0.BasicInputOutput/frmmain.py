import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Name': 'Button2', 'Text': 'DigitalWrite(18,LOW)', 'Top': '220', 'Left': '75', 'Width': '100', 'Height': '50', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Name': 'Button1', 'Text': 'DigitalWrite(18,HIGH)', 'Top': '165', 'Left': '75', 'Width': '180', 'Height': '50', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Name': 'Button3', 'Text': 'digitalRead(18)', 'Top': '220', 'Left': '325', 'Width': '140', 'Height': '50', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[clicked]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Name': 'CheckButton1', 'Text': 'pin 18', 'Top': '185', 'Left': '325', 'Width': '80', 'Height': '30', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","CheckButton","usercontrol","[]")		self.create("{'Name': 'Button4', 'Text': 'digitalRead(21)', 'Top': '220', 'Left': '500', 'Width': '140', 'Height': '50', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Name': 'CheckButton2', 'Text': 'pin 21', 'Top': '185', 'Left': '500', 'Width': '80', 'Height': '30', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","CheckButton","usercontrol","[]")		self.create("{'Name': 'Button5', 'Text': 'Blink 18', 'Top': '300', 'Left': '70', 'Width': '100', 'Height': '50', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': '', 'ParentsType': '', 'Var': '', 'Help': ''}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_clicked(self,e):		pinMode(18,OUTPUT)# can be place  in 	Handler __init__		digitalWrite(18,HIGH)		pass	def Button2_clicked(self,e):		pinMode(18,OUTPUT)# can be place  in 	Handler __init__		digitalWrite(18,LOW)		pass	def Button3_clicked(self,e):		pinMode(18,INPUT)# can be place  in 	Handler __init__		if digitalRead(18)==HIGH:			self.CheckButton1.Active=True		else:			self.CheckButton1.Active=False					pass	def Button4_clicked(self,e):		pinMode(21,INPUT)# can be place  in 	Handler __init__		if digitalRead(21)==HIGH:			self.CheckButton2.Active=True		else:			self.CheckButton2.Active=False					pass			def Button5_clicked(self,e):		pinMode(18,OUTPUT)		for a in range(5):			digitalWrite(18,HIGH)			delay(500)#500ms			digitalWrite(18,LOW)			delay(500)#500ms			self.Button5.Text=a			refreshGTK()#need so that form can refresh while on loop		self.Button5.Text="Blink 18"		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()