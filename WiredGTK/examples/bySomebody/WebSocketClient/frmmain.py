import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.cnt=0	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'ForeColor': '(0,0,0,1)', 'Events': '[on_data_recv, on_connected, on_error, on_close]', 'Text': 'websocketclient1', 'Tag': 'Activex', 'Enable': 'True', 'Font': '', 'Picture': 'WebSocketClient.png', 'Left': '92', 'url': 'ws://localhost:9000/', 'Width': '35', 'ParentsType': '', 'Top': '45', 'Visible': 'True', 'BackColor': '(0, 0.14668905476076743, 0.8221112919724316, 0.5)', 'Name': 'websocketclient1', 'Height': '30'}","WebSocketClient","usercontrol","[['on_data_recv', 'self,value'], ['on_connected', 'self'], ['on_error', 'self,value'], ['on_close', 'self,value']]")		self.create("{'ForeColor': '(0,0,0,1)', 'Events': '[clicked]', 'Text': 'SendData', 'Tag': '', 'Enable': 'True', 'Font': '', 'Picture': '', 'Left': '98', 'Width': '157', 'ParentsType': '', 'Top': '222', 'Visible': 'True', 'BackColor': '(1,1,1,1)', 'Name': 'Button1', 'Height': '50'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'ForeColor': '(0,0,0,1)', 'Events': '[clicked]', 'Text': 'Open', 'Tag': '', 'Enable': 'True', 'Font': '', 'Picture': '', 'Left': '95', 'Width': '159', 'ParentsType': '', 'Top': '161', 'Visible': 'True', 'BackColor': '(1,1,1,1)', 'Name': 'Button2', 'Height': '50'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'ForeColor': '(0,0,0,1)', 'Events': '[[, ]]', 'Text': 'Entry1', 'Tag': '', 'Enable': 'True', 'Font': '', 'Picture': '', 'Left': '95', 'Width': '301', 'ParentsType': '', 'Top': '121', 'Visible': 'True', 'Alignment': '', 'BackColor': '(1,1,1,1)', 'Name': 'Entry1', 'Height': '30'}","Entry","usercontrol","[]")		self.create("{'ForeColor': '(0,0,0,1)', 'Events': '[Tick]', 'Text': 'timer1', 'Tag': 'Activex', 'Enable': 'False', 'Font': '', 'Picture': 'timer.png', 'Left': '98', 'Interval': '1000', 'Width': '30', 'ParentsType': '', 'Top': '280', 'Visible': 'True', 'BackColor': '(0, 0.20300679024002155, 0.16725294424074255, 0.5)', 'Name': 'timer1', 'Height': '30'}","Timer","usercontrol","[['Tick', 'self']]")		self.create("{'ForeColor': '(0,0,0,1)', 'Events': '[clicked]', 'Text': 'Register PangTest', 'Tag': '', 'Enable': 'True', 'Font': '', 'Picture': '', 'Left': '287', 'Width': '159', 'ParentsType': '', 'Top': '163', 'Visible': 'True', 'BackColor': '(1,1,1,1)', 'Name': 'Button3', 'Height': '50'}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button2_clicked(self,e):		self.window.Text='now connecting to server..'		self.timer1.Enable=False		self.websocketclient1.open()			pass	def SendCommand(self,message):		msg="{\"message\":\""+ message +"\"}";		return msg		def Button1_clicked(self,e):		msg=self.SendCommand("WTADEVICES^")		self.websocketclient1.Send( msg)		pass	def websocketclient1_on_data_recv(self,value):		self.Entry1.Text=value		self.window.Text=self.cnt		self.cnt+=1		pass	def websocketclient1_on_connected(self):		self.window.Text='connected'		self.timer1.Enable=True		pass	def websocketclient1_on_error(self,value):		self.timer1.Enable=False		self.window.Text=value		refreshGTK()		self.Button2_clicked(None)		pass	def websocketclient1_on_close(self,value):		self.window.Text='close'		pass	def timer1_Tick(self):		#self.Button1_clicked(None)		msg=self.SendCommand("ping")#any garbage data so our machine could not loose connection to server		self.websocketclient1.Send( msg)				pass	def Button3_clicked(self,e):		msg=self.SendCommand("WTAREGISTER^PangTest")		self.websocketclient1.Send( msg)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()