import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	#WiredEvent def usercontrolEvent1(self,e)	#add more events 	def __init__(self,*param):				initUI(self,param,w=500,h=500,title="WiredGTKV1.0 ListBoxWithScroll")		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()			def unload(self,*args):		GLib.source_remove(self.timeout_id)		self._window.hide()		del self._window		Gtk.main_quit()		def loop(self, user_data):		if self.form_load==False:			self.form_load=True			if self.sch.Event():#timer routine			#code here			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Picture': '', 'Enable': 'True', 'Name': 'ScrolledWindow1', 'Visible': 'True', 'Text': 'ScrolledWindow1', 'Top': '17', 'Height': '320', 'ParentsType': '', 'Width': '320', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'BackColor': '(1,1,1,1)', 'Font': '', 'Events': '[[, ]]', 'Left': '121'}","ScrolledWindow","usercontrol","[]")		self.create("{'Picture': '', 'Enable': 'True', 'Name': 'Button1', 'Visible': 'True', 'Text': 'Button1', 'Top': '346', 'Height': '50', 'ParentsType': '', 'Width': '100', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'BackColor': '(1,1,1,1)', 'Font': '', 'Events': '[clicked]', 'Left': '128'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Picture': '', 'Enable': 'True', 'Name': 'ListBox1', 'Visible': 'True', 'Text': 'ListBox1', 'Top': '0', 'Height': '300', 'ParentsType': 'ScrolledWindow', 'Width': '300', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'BackColor': '(1,1,1,1)', 'Font': '', 'Events': '[row-activated]', 'Left': '0'}","ListBox","ScrolledWindow1","[['row-activated', 'self,wid, cr']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def CreateListboxContent(self):		for a in range(100):			lbr=Gtk.ListBoxRow()			label=Gtk.Label("Dynamic " + str(a))			lbr.add(label)			forms(lbr).Visible=True		#important			forms(label).Visible=True	#important			self._ListBox1.add(lbr)					def Button1_clicked(self,e):		self.CreateListboxContent()		pass	def ListBox1_row_activated(self,wid, row):		index=row.get_index()		self.window.Text=row.get_children()[0].get_label() + " " + str(index)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()