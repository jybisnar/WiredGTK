import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################from clsAudio import  *class Handler(object):	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()				self.p=PlayerThread()		self.p.addfiles('demo.wav')		self.p.addfiles('death.wav')	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Tag': '', 'Left': '34', 'Text': 'Play 1', 'Events': '[clicked]', 'Enable': 'True', 'ParentsType': '', 'Width': '100', 'Top': '65', 'Visible': 'True', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Font': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Name': 'Button1'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Tag': '', 'Left': '150', 'Text': 'Play 2', 'Events': '[clicked]', 'Enable': 'True', 'ParentsType': '', 'Width': '100', 'Top': '64', 'Visible': 'True', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Font': '', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Name': 'Button2'}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def Button1_clicked(self,e):		self.p.play(0)#('demo.wav')		#self.p.close()		pass	def Button2_clicked(self,e):		self.p.play(1)#('death.wav')		#self.p.close()		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()