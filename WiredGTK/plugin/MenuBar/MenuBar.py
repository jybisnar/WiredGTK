import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class MenuBar:	def createmenu(self,menu,Parent):		print(menu)	def createmenuRecursion(self,menulist,parent=None):		for i,a in enumerate(menulist):			if len(a)!=0:				self.createmenuRecursion(a)				else:				self.createmenu(a,filemenu)		def __init__(self,usercontrol,menustr,event):		#import pdb;pdb.set_trace();		self.clickedevent=event		Box=Gtk.VBox()		Menubar=Gtk.MenuBar()		forms(Menubar).Visible=True		self.createmenu(menustr,Menubar)			Box.pack_start(Menubar, expand=True, fill=True, padding=0)		usercontrol.put(Box,0,0)		forms(Box).Visible=True	def event(self,e):		#import pdb;pdb.set_trace();#bawal to eh ewan ko,.. kaya lagay sa loop nalang		#print(e.get_label())		self.clickedevent(e.get_label())	def createmenu(self,menustr,menu=None):		for a in menustr:			x=type(a)==list			#print(a)			Mfile=Gtk.MenuItem(a[0])			Mfile.connect('activate', self.event)			forms(Mfile).Visible=True			#print(a[0])			if type(a[1])==list:								Menu1=Gtk.Menu()				forms(Menu1).Visible=True				#print(a[1])				self.createmenu(a[1],Menu1)				Mfile.set_submenu(Menu1)				menu.append(Mfile)			else:				if type(a)==list:					self.createmenu(a,menu)					menu.append(Mfile)		passclass Handler(usercontrol):	#WiredEvent def clicked(self,caption)	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.menu=None		self._text=''		self._usercontrolproperty=''		#self.menu=MenuBar(self.usercontrol,[['Tools',[['new','qwerty'],['close','qwerty']]],['Tools',[['new','qwerty'],['close','qwerty']]],])		'''		Tools			new				qwerty			vlose				new		'''	def MenuBar(self,menustr=[ ['File',[['New','new'],['Close','close']]], ['Help',[['About','about'],['FAQ','faq']]] ]):		self.menu=MenuBar(self.usercontrol,menustr,self.clicked)	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True	def clicked(self,caption):		if self.caller!=None and 'clicked' in self.wiredevents:			self.wiredevents['clicked'](caption)		def loop(self, user_data):		if self.form_load==False:			self.form_load=True			if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		pass	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this formif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()