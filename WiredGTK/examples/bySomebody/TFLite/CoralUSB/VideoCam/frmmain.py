import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		import WebCam		self.WebCam1=WebCam.Handler		self.create("{'Name': 'WebCam1', 'Visible': 'True', 'Width': '390', 'BackColor': '(0, 0.4220090620706002, 0.6295039725989799, 0.5)', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '260', 'Tag': 'Activex', 'Picture': 'WebCam.png', 'camindex': '0', 'Open': '', 'ParentsType': '', 'Top': '10', 'Events': '[frameReady]', 'Help': '', 'Font': '', 'Text': 'WebCam1', 'Left': '35', 'Enable': 'True'}","WebCam","usercontrol","[['frameReady', 'self,frame']]")		self.Button1=forms		self.create("{'Name': 'Button1', 'Visible': 'True', 'Width': '100', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Tag': '', 'Picture': '', 'ParentsType': '', 'Top': '275', 'Events': '[clicked]', 'Help': '', 'Font': '', 'Text': 'Start', 'Left': '35', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button2=forms		self.create("{'Name': 'Button2', 'Visible': 'True', 'Width': '100', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Tag': '', 'Picture': '', 'ParentsType': '', 'Top': '275', 'Events': '[clicked]', 'Help': '', 'Font': '', 'Text': 'Pause', 'Left': '140', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button3=forms		self.create("{'Name': 'Button3', 'Visible': 'True', 'Width': '180', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Tag': '', 'Picture': '', 'ParentsType': '', 'Top': '275', 'Events': '[clicked]', 'Help': '', 'Font': '', 'Text': 'Save To image folder', 'Left': '245', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		import TFlite		self.TFlite1=TFlite.Handler		self.create("{'Name': 'TFlite1', 'Visible': 'True', 'Threshold': '0.65', 'Width': '30', 'BackColor': '(0, 0.6825265176166244, 0.05161662573087766, 0.5)', 'ForeColor': '(0,0,0,1)', 'Frozen_Inference': 'ssd_mobilenet_v1_coco_quant_postprocess_edgetpu.tflite', 'Var': '', 'Height': '30', 'ModelFolder': 'mymodel', 'Tag': 'Activex', 'Picture': 'TFlite.png', 'LabelMap': 'coco_labels.txt', 'ParentsType': '', 'Top': '110', 'Events': '[]', 'Help': '', 'Font': '', 'Text': 'TFlite1', 'Left': '455', 'Enable': 'True'}","TFlite","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def WebCam1_frameReady(self,frame):		if self.WebCam1.Open==False:return		im,objs=self.TFlite1.Detect(frame)		'''		for obj in objs:					print(self.TFlite1.labels.get(obj.id, obj.id))			print('  id:    ', obj.id)			print('  score: ', obj.score)			print('  bbox:  ', obj.bbox)				'''			self.WebCam1.imshow(im)		#self.WebCam1.imshow(frame)		self.frame=frame		pass	def Button1_clicked(self,e):		self.WebCam1.Open=True		pass	def Button2_clicked(self,e):		self.WebCam1.Open=False		pass	def Button3_clicked(self,e):		import cv2		fname=app_path() + "/images/" + CreateFileName() + ".jpg"# save as datetime.jpg		cv2.imwrite(fname,self.frame)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()