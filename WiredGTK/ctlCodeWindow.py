import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wired_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################		class Handler(object):	#WiredEvent def key_press(self,event,e,cls)	#add more events 	#WiredEvent def button_press(self,event,e,cls)	#add more events 		#WiredEvent def key_release(self,event,e,cls)	#add more events 	#WiredEvent def button_release(self,event,e,cls)	#add more events 	#WiredProperty 'Text': '#Comment'	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()			self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.lm = GtkSource.LanguageManager()		self.TextView1.get_buffer().set_language(self.lm.get_language('python'))		self.TextView1.set_show_line_numbers(True)					self.tabs=[]		self.tago= self.TextView1 .get_buffer().create_tag("orange_bg", background="orange")		self.tagy= self.TextView1.get_buffer().create_tag("yellow_bg", background="yellow")		self.tagnormal= self.TextView1.get_buffer().create_tag("black_bg", background="white")		self.tagblue= self.TextView1.get_buffer().create_tag("blue_fg",foreground ="blue")		self.tagorange= self.TextView1.get_buffer().create_tag("orange_fg",foreground ="orange")		self.taggreen= self.TextView1.get_buffer().create_tag("green_fg",foreground ="green")		self.tagbrown= self.TextView1.get_buffer().create_tag("brown_fg",foreground ="brown")		self.tagred= self.TextView1.get_buffer().create_tag("red_fg",foreground ="red")				self.taglst=[self.tago,self.tagy,self.tagnormal,self.tagblue,self.tagorange,self.taggreen,self.tagred]		self.reservelst={"if":self.tagblue,"else":self.tagblue,"elif":self.tagblue,"for":self.tagblue,"while":self.tagblue,			"continue":self.tagblue,"break":self.tagblue,"in":self.tagblue,"def":self.tagblue,"return":self.tagblue,																			"True":self.tagorange,"False":self.tagblue,"class":self.tagblue,"print":self.tagblue,			"exec":self.tagblue,"eval":self.tagblue,"__name__":self.tagorange,"except":self.tagblue,"pass":self.tagblue,			"import":self.tagblue,"from":self.tagblue,"@property":self.tagbrown,"try":self.tagblue,'@staticmethod':self.tagbrown,				'setter':self.tagbrown}		@property	def Text(self):		return self.TextView1.Text	@Text.setter	def Text(self,value):		self.TextView1.Text=value		#self.colorize();self.colorComment()		pass	def colorComment(self):		lencode=len(self.code)		i=0		x=self.TextView1.get_buffer()		while(lencode!=i):			if i>=lencode:				break			if self.code[i]=="#":				endn=self.code[i:].find('\r')				endr=self.code[i:].find('\n')				if endn==-1:endn=lencode				if endr==-1:endr=lencode				if endn>=endr:					end=endr				else:					end=endn				x.apply_tag(self.taggreen, x.get_iter_at_offset(i), x.get_iter_at_offset(i+end))				i=i+end+1				continue			i+=1                                	def colorize(self):		for reserved in self.reservelst:			stprev=0			st=0                                			parse=ParserLangguage(reserved)			x=self.TextView1.get_buffer()			self.code=self.TextView1.Text			while(1):				t=parse.Parse(self.code[st:])				ret=""				if t!=None:					st=t[1]+stprev+1				else:					break				if reserved=='def':					endroutineName=self.code[t[1]+stprev+1:].find("(")					x.apply_tag(self.tagorange, x.get_iter_at_offset(t[0]+stprev+4),x.get_iter_at_offset(t[1]+endroutineName+stprev+1) )				x.apply_tag(self.reservelst[reserved], x.get_iter_at_offset(t[0]+stprev), x.get_iter_at_offset(t[1]+stprev))				stprev=st			#comment color green	def activeXcreated(self,*args):		self.ScrolledWindow1.Width=self.usercontrol.Width		self.ScrolledWindow1.Height=self.usercontrol.Height		pass	def Object(self):		return self	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'ForeColor': '(0,0,0,1)', 'Tag': '', 'Visible': 'True', 'Left': '0', 'Text': 'ScrolledWindow1', 'Events': '[]', 'Width': '318', 'Picture': '', 'Height': '184', 'Enable': 'True', 'ParentsType': '', 'Name': 'ScrolledWindow1', 'BackColor': '(0, 0.06984276291709302, 0.5877783818186596, 0.5)', 'Font': '', 'Top': '0'}","ScrolledWindow","usercontrol","[]")		self.create("{'ForeColor': '(0,0,0,1)', 'Tag': '', 'Visible': 'True', 'Left': '0', 'Text': 'Viewport1', 'Events': '[button-press-event]', 'Width': '300', 'Picture': '', 'Height': '141', 'Enable': 'True', 'ParentsType': 'ScrolledWindow', 'Name': 'Viewport1', 'BackColor': '(1,1,1,1)', 'Font': 'Sans 10', 'Top': '14'}","Viewport","ScrolledWindow1","[['button-press-event', 'self,event,e']]")		self.create("{'ForeColor': '(0,0,0,1)', 'Tag': '', 'Visible': 'True', 'Left': '35', 'Text': 'TextView1', 'Events': '[key-release-event, button-release-event, key-press-event, button-press-event, paste-clipboard]', 'Width': '170', 'Picture': '', 'Height': '100', 'Enable': 'True', 'ParentsType': 'Viewport', 'Name': 'TextView1', 'BackColor': '(1,1,1,1)', 'Font': '10', 'Top': '40'}","SourceView","Viewport1","[['key-release-event', 'self,event,e'], ['button-release-event', 'self,event,e'], ['key-press-event', 'self,event,e'], ['button-press-event', 'self,event,e'], ['paste-clipboard', 'self,user_data']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)			self.Visible=self.usercontrol.Visible		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def getXYpos(self):		buffer=self.TextView1.get_buffer()		pos=buffer.get_property('cursor-position')		y=buffer.get_iter_at_offset( pos).get_line()		z=buffer.get_iter_at_offset( pos)		x=z.get_line_offset()		line='x:'+str(x+1)+'y:'+str(y+1)		return line	def IsNumber(self,x):		try:			_=float(x)			return True		except:			return False		def extractword(self):		strs=self.TextView1.Text		buffer=self.TextView1.get_buffer()		pos=buffer.get_property('cursor-position')		_len=len(strs)		if _len==0: return '',-1,-1		start=pos-1		startcomment=-1		startword=-1		while(start!=0 and pos!=0 and strs[start]!='\n'):#backward search			if (strs[start].isidentifier() or  strs[start].isnumeric())==False:				if startword==-1:					startword=start			if (strs[start]=='#'):				startcomment=start			start-=1		end=pos		while(end!=_len):#forward search			if (strs[end].isidentifier() or  strs[end].isnumeric())==False:				break			end+=1					if startcomment!=-1:			start=startcomment		else:			if startword!=-1:				start=startword					if start!=0:			if (strs[start] in ['@','#'])==False:				start+=1					return strs[start:end],start,end			def TextView1_key_release_event(self,event,e):		#print( e.get_keyval(),e.get_keycode())		line=self.getXYpos()		#if chr(e.get_keycode()[1]) in [' ','\t','\r']:			#self.colorize();self.colorComment()		if self.caller!=None:			if 'key_release' in self.wiredevents:					self.wiredevents['key_release'](event,e,line)		#print (self.extractword())				w,s,e=self.extractword()				#w=word , s = start , e = end		buffer=self.TextView1.get_buffer()			#get buffer from TexView1		if w!='' and w[0]=='#':					#comment routine			line=buffer.get_iter_at_offset(s).get_line()	#get line no			endlineIter=buffer.get_iter_at_line(line+1)	#getlineiterator at line+1			buffer.apply_tag(self.taggreen,buffer.get_iter_at_offset(s),endlineIter)		else:				if self.IsNumber(w)==True:				buffer.apply_tag(self.tagred,buffer.get_iter_at_offset(s),buffer.get_iter_at_offset(e))			else:				if w in self.reservelst:			#aplly tag base on word w for s to e					buffer.apply_tag(self.reservelst[w],buffer.get_iter_at_offset(s),buffer.get_iter_at_offset(e))				else:					for a in self.taglst:			#cant remove tag by name so we try to remove all tag						buffer.remove_tag(a,buffer.get_iter_at_offset(s),buffer.get_iter_at_offset(e))		def TextView1_button_release_event(self,event,e):		line=self.getXYpos()		if self.caller!=None:			if 'button_release' in self.wiredevents:					self.wiredevents['button_release'](event,e,line)		pass	def TextView1_key_press_event(self,event,e):		#print( e.get_keyval(),e.get_keycode())		line=self.getXYpos()		#if chr(e.get_keycode()[1]) in [' ','\t','\r']:			#self.colorize();self.colorComment()		if self.caller!=None:			if 'key_press' in self.wiredevents:					self.wiredevents['key_press'](event,e,line)		pass	def TextView1_button_press_event(self,event,e):		line=self.getXYpos()		if self.caller!=None:			if 'button_press' in self.wiredevents:					self.wiredevents['button_press'](event,e,line)		pass	def TextView1_paste_clipboard(self,user_data):		if self.caller!=None:			if 'paste_clipboard' in self.wiredevents:					self.wiredevents['paste_clipboard'](user_data)		def Viewport1_button_press_event(self,event,e):		pass	def Colorize(self):		self.colorize();self.colorComment()	def ScrollToLine(self,line):		x=self.TextView1.get_buffer()		x.place_cursor(x.get_iter_at_line(line))		parent=self.TextView1.get_parent()		parent=parent.get_parent()		if type(parent)==Gtk.ScrolledWindow:			y=parent.get_property('vadjustment')			y.set_value(line*17)	#16:fontsize=9;also n ctlCodeEditor					self.TextView1.SetFocus()				#self.TextView1		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()