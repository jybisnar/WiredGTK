import gi
import time
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk,GObject,Gdk,Pango,GLib
from wta_module import *
#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils
#	#####################www.WireThemAll.com#####################

class Handler(usercontrol):
	#WiredEvent def usercontrolevent(self,value)	#add more events 
	#WiredProperty 'usercontrolproperty': 'sample only'	
	def __init__(self,*param):			
		initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)
		self.GTKForms()
		super().__init__(self.usercontrol)
		self.sch=Scheduler(500)#500 ms
		self.sch.Start()
		self._text=''
		self._usercontrolproperty=''
		self.parse=Parser("SETTINGS",'$',1,10000)
		self.parsegetsetting=Parser("GETSET",'$',1,100)		
		self.parsegetmed=Parser("GETMED",'$',1,100)
		self.parsesetmed=Parser("SETMED",'$',1,1000)

	@property	
	def usercontrolproperty(self):
		return self._usercontrolproperty
	@usercontrolproperty.setter	
	def usercontrolproperty(self,value):
		self._usercontrolproperty=value
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})
	def activeXcreated(self,*args):
		pass
	def unload(self,*args):
		destroy=True
		if destroy==True:
			GLib.source_remove(self.timeout_id)
			self._window.hide()
			del self._window
			#ExitApplication() #activate this if u want to destroy this window
			return False
		else:
			self.window.Visible=False
			return True		
	def loop(self, user_data):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					self.unload(None)
			self.sch.Start()#restart scheduler
		return True	#return true so that main_loop can call it again 	
	def create(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)
	def GTKForms(self):
		self.create("{'Var': '', 'Left': '470', 'Events': '[on_connected, on_data_recv, on_error]', 'BackColor': '(0, 0.5075865711355756, 0.045454875398687755, 0.5)', 'ForeColor': '(0,0,0,1)', 'Height': '35', 'Tag': 'Activex', 'ParentsType': '', 'Text': 'ctlWebsocket21', 'ClientID': 'medicineAMAandroid', 'Name': 'ctlWebsocket21', 'ID': 'medicineAMArasp', 'Top': '90', 'Help': '', 'Font': '', 'url': '107.180.92.29:5001', 'Picture': '', 'Width': '30', 'Visible': 'False', 'Enable': 'True'}","ctlWebsocket2","usercontrol","[['on_connected', 'self'], ['on_data_recv', 'self,value'], ['on_error', 'self,value']]")
		self.create("{'Var': '', 'Left': '195', 'Events': '[clicked]', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Height': '50', 'Tag': '', 'ParentsType': '', 'Text': 'SendClient', 'Name': 'Button1', 'Top': '185', 'Help': '', 'Font': '', 'Picture': '', 'Width': '100', 'Visible': 'True', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")
		self.create("{'Var': '', 'Left': '300', 'Events': '[clicked]', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Height': '50', 'Tag': '', 'ParentsType': '', 'Text': 'SendServer', 'Name': 'Button2', 'Top': '185', 'Help': '', 'Font': '', 'Picture': '', 'Width': '100', 'Visible': 'True', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")
		self.create("{'Var': '', 'Left': '505', 'Events': '[[, ]]', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Height': '30', 'Tag': '', 'ParentsType': '', 'Text': 'Auto connect to server, set ID and ClientID', 'Name': 'Label1', 'Top': '90', 'Help': '', 'Font': '', 'Alignment': '', 'Picture': '', 'Width': '100', 'Visible': 'True', 'Enable': 'True'}","Label","usercontrol","[]")
	def Widget(self):
		if self._usercontrol in self._mainlayout.get_children():
			self._mainlayout.remove(self._usercontrol)
		return self._usercontrol
	def Hide(self):
		self._window.hide()
	def Show(self,modal=False,x=None,y=None):
		if x!=None:
			self._window.move(x,y)
		if modal and self.caller!=None:
			self._window.set_transient_for(self.caller._window)
		self._window.set_modal(modal)
		self._window.show()
		Gtk.main()
		return ""#put ur return value here upon closing this form
	def ctlWebsocket21_on_connected(self,conn):
		print("connected")
		pass
	def ctlWebsocket21_on_data_recv(self,value):
		print(value.decode())
		for a in value.decode():
			
			if self.parsegetsetting.available(a):
				
				strs="WTASETTINGS,"
				if self.caller!=None:
					x=[self.caller.ctlsettings1.a1,self.caller.ctlsettings1.a2,self.caller.ctlsettings1.a3,self.caller.ctlsettings1.a4,self.caller.ctlsettings1.a5,self.caller.ctlsettings1.a6,self.caller.ctlsettings1.a7,self.caller.ctlsettings1.a8,self.caller.ctlsettings1.a9,self.caller.ctlsettings1.a10,self.caller.ctlsettings1.a11,self.caller.ctlsettings1.a12]
					for aa in x:
						if aa.Active:
							strs+="1,"
						else:
							strs+="0,"
					self.caller.ctlOnline1.ctlWebsocket21.SendClient(strs)
			if self.parsegetmed.available(a):
				x=self.caller.ctlAlarmSlide1.SendMedOnline()
				self.caller.ctlOnline1.ctlWebsocket21.SendClient(x)
			if self.parsesetmed.available(a):
				#import pdb; pdb.set_trace();
				bins=getCSV(0,"#",self.parsesetmed.data)
				med=getCSV(1,"#",self.parsesetmed.data)
				sched=getCSV(2,"#",self.parsesetmed.data)
				data=getCSV(3,"#",self.parsesetmed.data)
				self.caller.ctlAlarmSlide1.ctlAlarm1.SaveDataOnline(bins,med,sched,data)
				self.caller.ctlAlarmSlide1.SetAll("UserName")
			if self.parse.available(a):
				
				if self.caller!=None:
					self.caller.ctlsettings1.a1.Active=eval(getCSV(0,',',self.parse.data))
					self.caller.ctlsettings1.a2.Active=eval(getCSV(1,',',self.parse.data))
					self.caller.ctlsettings1.a3.Active=eval(getCSV(2,',',self.parse.data))
					self.caller.ctlsettings1.a4.Active=eval(getCSV(3,',',self.parse.data))
					self.caller.ctlsettings1.a5.Active=eval(getCSV(4,',',self.parse.data))
					self.caller.ctlsettings1.a6.Active=eval(getCSV(5,',',self.parse.data))
					self.caller.ctlsettings1.a7.Active=eval(getCSV(6,',',self.parse.data))
					self.caller.ctlsettings1.a8.Active=eval(getCSV(7,',',self.parse.data))
					self.caller.ctlsettings1.a9.Active=eval(getCSV(8,',',self.parse.data))
					self.caller.ctlsettings1.a10.Active=eval(getCSV(9,',',self.parse.data))
					self.caller.ctlsettings1.a11.Active=eval(getCSV(10,',',self.parse.data))
					self.caller.ctlsettings1.a12.Active=eval(getCSV(11,',',self.parse.data))
					self.caller.ctlsettings1.Button1_clicked(None)
					
		pass
	def ctlWebsocket21_on_error(self,value):
		print(value)
		pass
	def Button1_clicked(self,e):
		self.ctlWebsocket21.SendClient("WTANOSTRIPS\r")
		pass
	def Button2_clicked(self,e):
		self.ctlWebsocket21.SendServer("WTARELAY^456^hey")
		self.ctlWebsocket21.SendServer("WTADEVICES^")
		pass
if __name__ == "__main__":
	_m = Handler()
	_m._window.show()
	Gtk.main()