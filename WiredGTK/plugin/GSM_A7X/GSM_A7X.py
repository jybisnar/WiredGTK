import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################from _thread import *class gsm:	def check_buffer(self):		while 1:			delay(500)			if self.exit==True:				break			if len(self.lstphone)!=0:				self.SendSms(self.lstphone[0],self.lstmessage[0])				print("msg sent" + self.lstmessage[0] )				self.lstmessage.pop(0)				self.lstphone.pop(0)					def __init__(self,caller):		self.lstphone=[]		self.lstmessage=[]		self.exit=False		self.caller=caller		start_new_thread(self.check_buffer ,())	def BufferSms(self, phone,message):		self.lstphone.append(phone)		self.lstmessage.append(message)	def SendSms(self,phone,message):		try:			self.caller.timer1.Enable=False			self.caller.serialport1.prints("AT+CMGS=\"" + phone+"\"\r")			delay(100);			self.caller.serialport1.prints(message+chr(0x1a))			delay(5000);			self.caller.timer1.Enable=True					except:			print("Port Close")class Handler(usercontrol):	#WiredEvent def OnSMS_Received(self,phone,message)	#add more events 	#WiredEvent def OnCall(self,phone)	#add more events 	#WiredProperty 'Port': 'COM10'		#WiredProperty 'PortSetting': '9600,n,8,1'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self._Port=''		self._PortSetting=value=''		self.parse1=Parser('+CMGL:', '\n', 2, _sizeofdata=300)		self.parsering=Parser('RING', '\n', 1,_sizeofdata=20)		self.num=0		self.timer1.Enabled=True		self.gsm=gsm(self)	def SendSms(self,phone,message):		self.gsm.BufferSms(phone,message)	def CallNumber(self,phone):			self.serialport1.prints("ATD"+phone+";")	@property	def Open(self):		pass	@Open.setter	def Open(self,value):		self.serialport1.Open=value	@property		def Port(self):		return self.serialport1.Port	@Port.setter		def Port(self,value):		self.serialport1.Port=value	@property		def PortSetting(self):		return self.serialport1.Setting	@PortSetting.setter		def PortSetting(self,value):		self.serialport1.Setting=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			self.gsm.exit=True			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Name': 'serialport1', 'Port': '/dev/ttyUSB0', 'Setting': '9600,n,8,1', 'Height': '23', 'Var': '', 'Font': '', 'Open': 'False', 'ParentsType': '', 'Top': '8', 'Tag': 'Activex', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.1925041802175269, 0.8648177340671638, 0.5)', 'Events': '[CommEvent]', 'Enable': 'True', 'Visible': 'True', 'Left': '0', 'Text': 'serialport1', 'Width': '32'}","SerialPort","usercontrol","[['CommEvent', 'self,e']]")		self.create("{'Name': 'Button1', 'Height': '37', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '81', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[clicked]', 'Enable': 'True', 'Visible': 'True', 'Left': '7', 'Text': 'Button1', 'Width': '100'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Name': 'Entry1', 'Height': '39', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '160', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Enable': 'True', 'Visible': 'True', 'Left': '6', 'Text': 'Entry1', 'Width': '273'}","Entry","usercontrol","[]")		self.create("{'Name': 'Button2', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '121', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Enable': 'True', 'Visible': 'True', 'Left': '4', 'Text': 'Button2', 'Width': '100'}","Button","usercontrol","[]")		self.create("{'Name': 'Entry2', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '122', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Enable': 'True', 'Visible': 'True', 'Left': '108', 'Text': 'Entry2', 'Width': '170'}","Entry","usercontrol","[]")		self.create("{'Name': 'Button3', 'Height': '50', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '206', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Enable': 'True', 'Visible': 'True', 'Left': '6', 'Text': 'Button3', 'Width': '272'}","Button","usercontrol","[]")		self.create("{'Name': 'TextView1', 'Height': '100', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '128', 'Tag': '', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Enable': 'True', 'Visible': 'True', 'Left': '293', 'Text': 'TextView1', 'Width': '170'}","TextView","usercontrol","[]")		self.create("{'Name': 'timer1', 'Height': '30', 'Var': '', 'Font': '', 'ParentsType': '', 'Top': '0', 'Tag': 'Activex', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.7768188404925765, 0.7041689523898528, 0.5)', 'Events': '[Tick]', 'Enable': 'True', 'Visible': 'True', 'Left': '58', 'Text': 'timer1', 'Interval': '1000', 'Width': '30'}","Timer","usercontrol","[['Tick', 'self']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_clicked(self,e):		self.serialport1.Open=True		pass	def serialport1_CommEvent(self,e):		while(e.available()):			c= e.read()			try:				c=c.decode()				if self.parsering.available(c)==True:					if self.caller!=None:						if 'OnCall' in self.wiredevents:							self.wiredevents['OnCall']("12345678")									if self.parse1.available(c)==True:					index=getCSV(0,',', self.parse1.data)					index=int(index)					phone=getCSV(2,',', self.parse1.data)					phone=phone.replace(" ",'').replace('"','').replace('+639','09')					i=getCSV(5,',', self.parse1.data)					message=getCSV(1,'\n', i)					self.serialport1.println("AT+CMGD=" + str(index))					if self.caller!=None:						if 'OnSMS_Received' in self.wiredevents:							self.wiredevents['OnSMS_Received'](phone,message)			except:				c=c	def timer1_Tick(self):		self.window.Text=self.num		try:			if self.num==0:				self.serialport1.println('ATE0')			if self.num==1:				self.serialport1.println('AT+CMGF=1')			if self.num==2:				self.serialport1.println('AT+CMGL=\"ALL\"')				self.num=0			self.num+=1			except:			self.num=self.numif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()