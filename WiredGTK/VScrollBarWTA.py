import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pangofrom wired_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################			class Handler(usercontrol):	#WiredEvent def change-value(self,value)	#add more events	#WiredProperty 'Max': '100'	#WiredProperty 'Value': '1'	def __init__(self,*param):				initUI(self,param,w=500,h=500,title="WiredGTKV1.0 Spin Sample 1")		self.GTKForms()		super().__init__(self.usercontrol)		self._text=''				self.sch=Scheduler(500)#500 ms		self.sch.Start()			@property		def Top(self):		return self.usercontrol.Top	@Top.setter		def Top(self,value):		self.usercontrol.Top=value	@property		def Left(self):		return self.usercontrol.Left	@Left.setter		def Left(self,value):		self.usercontrol.Left=value	@property		def Width(self):		return self.usercontrol.Width	@Width.setter		def Width(self,value):				self.usercontrol.Width=value		@property		def Height(self):		return self.usercontrol.Height	@Height.setter		def Height(self,value):		self.VScrollbar1.Height=value		self.usercontrol.Height=value				def activeXcreated(self):		self.VScrollbar1.Height=self.usercontrol.Height		pass			def unload(self,*args):		self._window=None		Gtk.main_quit()		def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		@property	def Value(self):		adj=self._VScrollbar1.get_adjustment()					return adj.get_value()	@Value.setter	def Value(self,value):		adj=self._VScrollbar1.get_adjustment()					adj.set_value(float(value))		pass	@property	def Max(self):		adj=self._VScrollbar1.get_adjustment()		return adj.get_upper()	@Max.setter	def Max(self,value):		adj=self._VScrollbar1.get_adjustment()		adj.set_upper(float(value))		pass	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Name': 'VScrollbar1', 'ParentsType': '', 'Events': '[]', 'Left': '-4', 'BackColor': '(1,1,1,1)', 'ForeColor': '(0,0,0,1)', 'Height': '73', 'Width': '20', 'Text': 'VScrollbar1', 'Picture': '', 'Top': '1', 'Visible': 'True', 'Font': '', 'Tag': '', 'Enable': 'True'}","VScrollbar","usercontrol","[['change-value', 'self,*args']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def VScrollbar1_change_value(self,*args):		if self.caller!=None:				if 'change-value' in self.wiredevents:						self.wiredevents['change-value'](self.VScrollbar1.Text)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()