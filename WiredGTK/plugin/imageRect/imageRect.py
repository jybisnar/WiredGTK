import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################from copy import deepcopyimport parseXMLclass boxlst:	def GenerateXML(self):		p=parseXML.Properties()		def backonefolder(fname):			x=GetPath(fname)			x=x.replace("\\",'/')			y=''			for a in x[::-1]:				if a=="/":break				y+=a			return y[::-1]		folder=backonefolder(self.filename)		p.fields['folder']=folder		p.fields['filename']=GetFilename(self.filename)		p.fields['path']=GetPath(self.filename)		p.fields['database']='unknown'		p.fields['width']=str(self.shape[1])		p.fields['height']=str(self.shape[0])		p.fields['depth']=str(self.shape[2])		p.fields['segmented']='0'		blist=[]		for a in self.lst:			b=parseXML.BoundingBox()			b.fields['xmin'],b.fields['ymin'],b.fields['xmax'],b.fields['ymax']=a.x1,a.y1,a.x2,a.y2			b.fields['name']=a.name			b.fields['pose']='Unspecified'			b.fields['truncated']='0'			b.fields['difficult']='0'			blist.append(b)		x=[]		x.append(p)		x.append(blist)		xml=parseXML.GenerateXML(x)		fname=GetPath(self.filename) + "/" + GetFilenameNoEXT(self.filename)+".xml"		SaveFileStr(fname,xml)	def __init__(self,caller,img,event,filename=None):		self.lst=[]		self.x=box()		self.img=img		self.caller=caller		self.imageOCV=None		self.filename=filename		if filename!=None:								self.img.LoadPicture=filename			path=GetPath(filename)			fname=path+"/"+GetFilenameNoEXT(filename)+".xml"			if FileExist(fname)==True:				self.xml=parseXML.parseXML(fname)				for a in self.xml[1]:					#import pdb; pdb.set_trace();					x=box()					x.x1,x.x2,x.y1,x.y2,=int(a.fields['xmin']),int(a.fields['xmax']),int(a.fields['ymin']),int(a.fields['ymax'])					x.name=a.fields['name']					self.lst.append(x)																	self.imageOCV=img.imread()			self.shape=self.imageOCV.shape			self.putboxes(fast=False)		self.filename=filename				self.event=event		self.aa1=event.connect('motion-notify-event',self.Image1_motion_notify_event)		self.aa2=event.connect('button-press-event',self.Image1_button_press_event)		self.aa3=event.connect('button-release-event',self.Image1_button_release_event)	def __del__(self): 		print("Deleted")	def delete(self): 		self.event.disconnect(self.aa1)		self.event.disconnect(self.aa2)		self.event.disconnect(self.aa3)	def putboxes(self,fast=True):		if self.imageOCV is None:			return		if fast:			if len(self.lst)!=0:				a=self.lst[-1]				_x=self.imageOCV				cv2.rectangle(_x, (a.x1,a.y1),(a.x2,a.y2), (0,255,0), 2)				cv2.putText(_x, a.name, (a.x1,a.y1-7),fontFace = cv2.FONT_HERSHEY_SIMPLEX ,  fontScale=0.5,color=(255,0,0), thickness=1)								self.img.LoadPictureOCV=_x						else:			for a in self.lst:				if a.y2!=None:					self.setNumpyImg()					_x=self.imageOCV					cv2.rectangle(_x, (a.x1,a.y1),(a.x2,a.y2), (0,255,0), 2)					cv2.putText(_x, a.name, (a.x1,a.y1-7),fontFace = cv2.FONT_HERSHEY_SIMPLEX ,fontScale=0.5,  color=(255,0,0), thickness=1)					self.img.LoadPictureOCV=_x		if len(self.lst)==0:			self.img.LoadPicture=self.filename			self.imageOCV=self.img.imread()	def setNumpyImg(self):		if self.img.imread() is None:			import numpy as np			x=np.ones((self.img.Height,self.img.Width,3))			self.img.LoadPictureOCV=x			self.imageOCV=x#					def set(self,x,y):		self.x.set(x,y)		if self.x.y2!=None:			_x=deepcopy(self.imageOCV)			cv2.rectangle(_x, (self.x.x1,self.x.y1),(self.x.x2,self.x.y2), (255,0,0), 2)			self.img.LoadPictureOCV=_x	def point1(self):		return (self.x.x1,self.x.y1)	def point2(self):		return (self.x.x2,self.x.y2)	def finish(self):		self.lst.append(self.x)		self.x=box()		def Image1_motion_notify_event(self,event,e):		import cv2		self.set(int(e.x),int(e.y))		pass	def Image1_button_press_event(self,event,e):		self.caller.Entry2.SetFocus()		self.setNumpyImg()		#self.boxes.set_image(self.Image1)		self.set(int(e.x),int(e.y))		pass	def Image1_button_release_event(self,event,e):		if self.x.x1!=None:			self.set(int(e.x),int(e.y))			ret="YES"			if self.caller.caller!=None and 'draw' in self.caller.wiredevents:				ret=self.caller.wiredevents['draw']()			if ret=="YES":				self.finish()							self.putboxes()class box:	def __init__(self):		self.x1=None		self.x2=None		self.y1=None		self.y2=None		self.name=""		def set(self,x,y):		if self.x1==None:			self.x1=x			self.y1=y		else:			self.x2=x			self.y2=y		class Handler(usercontrol):	#WiredEvent def draw(self)#if self.caller!=None and 'draw' in self.wiredevents:self.wiredevents['draw']()	def __init__(self,*param):				initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.Init()			def Init(self,w=0,h=0,zoom=False,filename=None):#zoom=True then clear all box		if zoom:			ratioW=w/self.boxes.img.Width			ratioH=h/self.boxes.img.Height			for a in self.boxes.lst:				#import pdb; pdb.set_trace();				_w=abs(a.x1-a.x2)				_h=abs(a.y1-a.y2)				a.x1=int(ratioW*a.x1)				a.y1=int(ratioH*a.y1)				a.x2=a.x1+int(ratioW*_w)				a.y2=a.y1+int(ratioH*_h)						for a in self.Layout1.get_children():			self.Layout1.remove(a)		self._Image1Event=Gtk.EventBox()		self.Image1Event=forms(self._Image1Event)		self._Image1=Gtk.Image()		self.Image1=forms(self._Image1)		if w==0 or h==0:			w,h=self.ScrolledWindow1.Width,self.ScrolledWindow1.Height			self.Layout1.Width,self.Layout1.Height=w,h#self.ScrolledWindow1.Width,self.ScrolledWindow1.Height		self.Image1.Width,self.Image1.Height=w,h#self.ScrolledWindow1.Width,self.ScrolledWindow1.Height		self.Image1Event.Width,self.Image1Event.Height=w,h#self.ScrolledWindow1.Width,self.ScrolledWindow1.Height		self.Layout1.put(self._Image1,0,0)		self.Layout1.put(self._Image1Event,0,0)		self.Image1Event.Visible=True		self.Image1.Visible=True		if zoom==True:			lst=self.boxes.lst			self.boxes.delete()				self.boxes=boxlst(self,self.Image1,self.Image1Event.obj,filename)				if zoom==True:			self.boxes.lst=lst			self.boxes.putboxes(False)	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.ScrolledWindow1.Width= self.usercontrol.Width		self.ScrolledWindow1.Height= self.usercontrol.Height		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.Button1=forms		self.create("{'Tag': '', 'Name': 'Button1', 'Height': '50', 'Width': '100', 'Font': '', 'BackColor': '(1,1,1,1)', 'Left': '290', 'Text': 'Zoom', 'Top': '495', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[clicked]', 'ParentsType': '', 'Picture': '', 'Var': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.ScrolledWindow1=forms		self.create("{'Tag': '', 'Name': 'ScrolledWindow1', 'Height': '480', 'Width': '640', 'Font': '', 'BackColor': '(0, 0.4316880916756659, 0.7364792088713961, 0.5)', 'Left': '0', 'Text': 'ScrolledWindow1', 'Top': '0', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[[, ]]', 'ParentsType': '', 'Picture': '', 'Var': ''}","ScrolledWindow","usercontrol","[]")		self.Button2=forms		self.create("{'Tag': '', 'Name': 'Button2', 'Height': '50', 'Width': '100', 'Font': '', 'BackColor': '(1,1,1,1)', 'Left': '395', 'Text': 'Clear+Zoom', 'Top': '495', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[clicked]', 'ParentsType': '', 'Picture': '', 'Var': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.Entry1=forms		self.create("{'Alignment': '', 'Tag': '', 'Name': 'Entry1', 'Height': '30', 'Width': '170', 'Font': '', 'BackColor': '(1,1,1,1)', 'Left': '115', 'Text': '640,480', 'Top': '495', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[[, ]]', 'ParentsType': '', 'Picture': '', 'Var': ''}","Entry","usercontrol","[]")		self.Entry2=forms		self.create("{'Alignment': '', 'Tag': '', 'Name': 'Entry2', 'Height': '30', 'Width': '170', 'Font': '', 'BackColor': '(1,1,1,1)', 'Left': '650', 'Text': 'Entry2', 'Top': '150', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[key-press-event]', 'ParentsType': '', 'Picture': '', 'Var': ''}","Entry","usercontrol","[['key-press-event', 'self,event,e']]")		self.Viewport1=forms		self.create("{'Tag': '', 'Name': 'Viewport1', 'Height': '320', 'Width': '320', 'Font': '', 'BackColor': '(1,1,1,1)', 'Left': '0', 'Text': 'Viewport1', 'Top': '0', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[[, ]]', 'ParentsType': 'ScrolledWindow', 'Picture': '', 'Var': ''}","Viewport","ScrolledWindow1","[]")		self.Layout1=forms		self.create("{'Tag': '', 'Name': 'Layout1', 'Height': '300', 'Width': '300', 'Font': '', 'BackColor': '(0, 0.7362415546826772, 0.2706414342707212, 0.5)', 'Left': '-15', 'Text': 'Layout1', 'Top': '0', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)', 'Help': '', 'Events': '[[, ]]', 'ParentsType': 'Viewport', 'Picture': '', 'Var': ''}","Layout","Viewport1","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form			pass	def Button1_clicked(self,e):		x,y=eval(self.Entry1.Text)		self.Init(self,x,y,zoom=True,filename="cam_image4.jpg")		pass	def Button2_clicked(self,e):		x,y=eval(self.Entry1.Text)		self.Init(self,x,y,zoom=False)		pass	def Entry2_key_press_event(self,event,e):		print(e.hardware_keycode,chr(e.hardware_keycode))		if e.hardware_keycode==27:			self.boxes.x.x1=None			self.boxes.x.y1=None			self.boxes.x.x2=None			self.boxes.x.y2=None			self.boxes.putboxes()		pass	def ClearBox(self):		self.boxes.lst=[]		self.boxes.putboxes(fast=False)if __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()