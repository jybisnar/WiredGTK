import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pangofrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def changed(self,value)	#add more events 	#WiredProperty 'Min': '1'	#WiredProperty 'Max': '100'	def __init__(self,*param):				initUI(self,param,w=500,h=500,title="WiredGTKV1.0 Spin Sample 1")		self.GTKForms()		super().__init__(self.usercontrol)		self._text=''				self.sch=Scheduler(500)#500 ms		self.sch.Start()				self._Min=1.0		self._Max=100.0		self.adj = Gtk.Adjustment(1.0,self._Min, self._Max, 1.0, 5.0, 0.0)		self._SpinButton1.set_adjustment(self.adj)	def activeXcreated(self):		pass			def unload(self,*args):		self._window=None		Gtk.main_quit()		def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})		@property	def Min(self):		return self._Min	@Min.setter	def Min(self,value):		self._Min=float(value)		self.adj.set_lower(self._Min)		pass	@property	def Max(self):		return self._Max	@Max.setter	def Max(self,value):		self._Max=float(value)		self.adj.set_upper(self._Max)		pass	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Font': '', 'Enable': 'True', 'Left': '1', 'Name': 'SpinButton1', 'Visible': 'True', 'Picture': '', 'ParentsType': '', 'BackColor': '(1,1,1,1)', 'Height': '30', 'Width': '113', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'Top': '1', 'Text': 'SpinButton1', 'Events': '[changed]'}","SpinButton","usercontrol","[['changed', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def SpinButton1_changed(self,e):		if self.caller!=None:				if 'changed' in self.wiredevents:						self.wiredevents['changed'](self.SpinButton1.Text)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()