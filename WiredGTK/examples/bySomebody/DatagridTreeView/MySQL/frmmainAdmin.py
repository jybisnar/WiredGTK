import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *import datetimefrom MySQLdb import OperationalError#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################import MySQLdbclass Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		try:			self.db = MySQLdb.connect(host="localhost",user="root",db="wta",port=3306)		except:			pass	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Top': '431', 'BackColor': '(1,1,1,1)', 'Left': '172', 'Help': '', 'Text': 'Datagrid Values', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '115', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '34', 'Font': '', 'Name': 'Button1', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'AlternateColor': 'True', 'BackColor': '(0, 0.24499645336485343, 0.9999431506275153, 0.5)', 'Left': '4', 'Events': '[dblclick]', 'dbtype': 'mysql', 'Tag': 'Activex', 'ForeColor': '(0,0,0,1)', 'Var': '', 'FontStyle': 'Times New Roman', 'Picture': '', 'ParentsType': '', 'Top': '2', 'UNSELECT': '#FFFFFF', 'Help': '', 'Text': 'datagridtreeview1', 'Visible': 'True', 'FontSize': '14', 'Width': '431', 'Height': '229', 'Font': '', 'Name': 'datagridtreeview1', 'Enable': 'True', 'SELECT': '#FFAAAA'}","DatagridTreeView","usercontrol","[['dblclick', 'self,model,row,col']]")		self.create("{'Top': '355', 'BackColor': '(1,1,1,1)', 'Left': '27', 'Help': '', 'Text': 'Querry to DataGrid', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '143', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Font': '', 'Name': 'Button2', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '350', 'BackColor': '(1,1,1,1)', 'Left': '190', 'Help': '', 'Text': 'Delete', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '100', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Font': '', 'Name': 'Button3', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '290', 'BackColor': '(1,1,1,1)', 'Left': '345', 'Help': '', 'Text': 'Update', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '100', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Font': '', 'Name': 'Button4', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '350', 'BackColor': '(1,1,1,1)', 'Left': '345', 'Help': '', 'Text': 'Querry', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '100', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Font': '', 'Name': 'Button5', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '245', 'BackColor': '(1,1,1,1)', 'Left': '35', 'Help': '', 'Text': 'Create Table', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '100', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Font': '', 'Name': 'Button6', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '290', 'BackColor': '(1,1,1,1)', 'Left': '190', 'Help': '', 'Text': 'Insert Table', 'Events': '[clicked]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '110', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '50', 'Font': '', 'Name': 'Button7', 'ParentsType': '', 'Enable': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Top': '250', 'BackColor': '(1,1,1,1)', 'Left': '190', 'Help': '', 'Text': 'Michelle', 'Alignment': '', 'Events': '[]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '90', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '30', 'Font': '', 'Name': 'Entry1', 'ParentsType': '', 'Enable': 'True'}","Entry","usercontrol","[]")		self.create("{'Top': '240', 'BackColor': '(1,1,1,1)', 'Left': '345', 'Help': '', 'Text': 'Donna', 'Alignment': '', 'Events': '[]', 'Visible': 'True', 'Picture': '', 'Tag': '', 'Width': '90', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Height': '40', 'Font': '', 'Name': 'Entry2', 'ParentsType': '', 'Enable': 'True'}","Entry","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def datagridtreeview1_dblclick(self,model,row,col):		print(row,col,model[row][col])		model[row][col]="wala"		if self.datagridtreeview1.selectionState(row)==True:			self.datagridtreeview1.selectthis(row,False)		else:			self.datagridtreeview1.selectthis(row,True)		pass	def Button1_clicked(self,e):		for a in self.datagridtreeview1.get_ListStore():			print(a[:])		pass	def Button2_clicked(self,e):		self.db = MySQLdb.connect(host="localhost",user="root",db="wta",port=3306)		self.datagridtreeview1.DataSource(self.db,"select * from student")				pass	def Button3_clicked(self,e):		sql='delete from student where Name="%s"' % (self.Entry1.Text)		curs=self.db.cursor()		curs.execute (sql)		self.db.commit()		self.datagridtreeview1.DataSource(self.db,"select * from student")		pass	def Button4_clicked(self,e):		sql='update student set Name="%s" where Name="%s"' % (self.Entry2.Text,self.Entry1.Text)		curs=self.db.cursor()		curs.execute (sql)		self.db.commit()		self.datagridtreeview1.DataSource(self.db,"select * from student")		pass	def Button5_clicked(self,e):		sql="select * from student"		curs=self.db.cursor()		curs.execute (sql)		results = curs.fetchall()		print(len(results),results)		pass	def Button6_clicked(self,e):		sql="CREATE TABLE student (Name VARCHAR(255), Age INT,Address VARCHAR(255))"		try:			curs=self.db.cursor()			curs.execute (sql)			self.db.commit()			self.datagridtreeview1.DataSource(self.db,"select * from student")		except:			print("connection Error/Table Exist")	def Button7_clicked(self,e):				sql = "INSERT INTO student (Name, Age, Address) VALUES ('%s', %s,'%s')"% (self.Entry1.Text, 18,"Manila")		curs=self.db.cursor()		curs.execute (sql)		self.db.commit()		self.datagridtreeview1.DataSource(self.db,"select * from student")				passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()