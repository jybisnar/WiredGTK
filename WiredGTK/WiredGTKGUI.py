import sysimport giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wired_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################import DataGridfrom dialog import *import frmFormimport intelfrom shutil import copyfileimport ctlCodeEditorimport osimport platformimport jedifrom subprocess import PIPE, Popenfrom threading  import Threadtry:	from queue import Queue, Emptyexcept ImportError:	from Queue import Queue, Empty  # python 2.xclass Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=1366,h=900,title="WiredGTK v2.1",controlbox=True,startpos=(0,0),timeoutdestroy=-1)		self.GTKForms()		self.keydeb=None		super().__init__(self.usercontrol)		self.cboObject_disable_event=False #covid19		self.cboFilename_disable_event=False#covid19		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.runtime="Default"		self.win=[]			self.grid=DataGrid.TreeViewFilterWindow(self.scrolledwindow1,checkbox=False,clickISR=self.Update,prop=self)		import jedi		self.jedi=jedi		import numpy as np		self.jedi.preload_module(np,cv2,os)						#import anouncement		#x=anouncement.Handler([self,""])						#second instance of your usercontrol		self.layout1=self.usercontrol		#self.layout1.put(x.Widget(),0,480)		self.addedobj=None		self.name=""		self.addedobjglobal=None		self.frmForm=[]		self.currentform=None		self.cboObjectFromClick=True		#self.btnSave.Enable=False		self.btnSaveAs.Enable=False		#self.lblFileNameW.Text=""		self.view=False		self.widgetview=True		self.sourceview=True		self.untitledcnt=1		#self.lblFileNameW.ForeColor=0,0,1,1		#self.usercontrolbuf.Visible=False		self.helphasshown=False		self.btnNew_clickedold(None)		self.wingide=[]		self.wingidepath=''		#s=[]		#for a in range(20):			#s.append("Item " + str(a))		self.intel=intel.Handler()		self.intel.WidgetSetSize(100, 300)		self.layout1.put(self.intel.Widget(),400,100)		self.intel.usercontrol.Visible=False		self.stderr=""		self.process=None		self.Properties_button_release_event(None)		self.main_dir=os.path.expanduser('~')		#print(os.path.isdir(main_dir+'/WiredGTK'))		if os.path.isdir(self.main_dir+'/WiredGTK')==False:			os.mkdir(self.main_dir+'/WiredGTK')		self.currentform.CheckWing()			#import dlgSelection		#f=dlgSelection.Handler(self)#param		#f.List("Select Wing IDE PATH",self.wingide)		#self.wingidepath=f.Show(modal=True)			self.importnextflag=False		a=0		self.copy=None		#self.currentform.PrepareWingIDE()		self.showcutpaste(False)		self.loadingnewfile=False		self.usercontrolW=self.usercontrolbuf		self.showdebugbutton(False)		self.Entry2.connect("size-allocate", self.autoscroll)		self.EventBox1.set_tooltip_text("Watch object member");self.EventBox2.set_tooltip_text("Clear OUTPUT pane");		padx=0;pady=30		tool_tip=["New Python Script","New GTK Forms","Open python script/GTK forms","Close active Python script/GTK forms",				"MySQL DBBuilder","Sample GTK forms","Save active Python script/GTK forms","Save As","Cut selected widget",				"Copy selected widget","Paste copied widget","Delete selected widget","Run active Python script/GTK forms",				"Stop Execution","Hide/Show Properties","user-control Helper","Insert BreakPoint within code(will not triggered if code is already running)","Jump to cursor(F6)",				"Insert Break(interactive)","Show current Program line(F4)","Step Over(F8)","Run/Resume from break(F5)","Step In(F11)","Step Out(F12)"]		for i,a in enumerate( [self.btnNew,self.NewActivex,self.btnOpen,self.imclose,self.imagecloseall,self.btnExample,self.btnSave,self.btnSaveAs,		self.btnCut,self.btnCopy,self.btnPaste,self.btnDelete,self.run,self.btn_stop,self.Properties,self.Widget,self.clearbreak,			self.Button8,self.Button9,self.Button1,self.Button2,self.Button5,self.Button3,self.Button4]):			try:				a.set_tooltip_text(tool_tip[i])			except:				i=i			if i >16:				padx=5				pady=30			a.Width=35;a.Height=35;			a.Left=i*36+padx;a.Top=0+pady;		'''for i,a in enumerate( [self.Button8,self.Button9,self.Button1,self.Button2,self.Button5,self.Button3,self.Button4]):			a.Width=35;a.Height=35;			a.Left=i*36+700;a.Top=40;'''		self.ctlmenuBar1.MenuBar([['File',[['new','qwerty'],['close','qwerty']]],['Option',[['Runtime','Runtime']]],['Help',[['About','qwerty'],['close','qwerty']]],])		import about		f=about.Handler(self)		f.Show(modal=True)		self.bufftypedIndex=0		self.bufftyped=[]					if FileExist('runtime.txt'):						self.runtime=GetFileStr('runtime.txt')			if FileExist(self.runtime)==False:				self.runtime="Default"		lm = GtkSource.LanguageManager()				self.Entry1.get_buffer().set_language(lm.get_language('python'))				lm = GtkSource.LanguageManager()				self.Entry2.get_buffer().set_language(lm.get_language('python'))				self.btn_stop_button_release_event(None,None)		try:			import ctypes			user32 = ctypes.windll.user32			screensize = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)]			resizeW=float(screensize[0]/1366.0)			resizeH=float(screensize[1]/768.0)				print (screensize)		except:			screensize = [1320, 768]			resizeW=float(screensize[0]/1320.0)			resizeH=float(screensize[1]/768.0)		if screensize[1]<768:			self.DatagridTreeView1.Top-=200;self.Entry1.Top-=200; self.Label1.Top-=200; self.EventBox1.Top-=200; self.EventBox2.Top-=200; self.Label2.Top-=200; self.ScrolledWindow1.Top-=200;			self.scrolledwindow1.Height-=20				def keyDebug(self,arg0,arg1):		if arg1.get_keyval()[1]==65477 and self.Button2.Enable==True:#stepover			self.keydeb=1		if arg1.get_keyval()[1]==65480 and self.Button3.Enable==True:#stein			self.keydeb=2		if arg1.get_keyval()[1]==65481 and self.Button4.Enable==True:#stepout			self.keydeb=3		if arg1.get_keyval()[1]==65474 and self.Button5.Enable==True:#run			self.keydeb=4		if arg1.get_keyval()[1]==65475 and self.Button8.Enable==True:#jump to			self.keydeb=5		if arg1.get_keyval()[1]==65473 and self.Button1.Enable==True:#show PC			self.keydeb=6	def checkDebugkey(self):		if self.keydeb!=None:			if self.keydeb==1:#stepover				self.Button2_clicked(None)			if self.keydeb==2:#stepin				self.Button3_clicked(None) 			if self.keydeb==3:#stepout				self.Button4_clicked(None)			if self.keydeb==4:#run				self.Button5_clicked(None)			if self.keydeb==5:#jump to				self.Button8_clicked(None)			if self.keydeb==6:#show PC				self.Button1_clicked(None)			self.keydeb=None	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		for a in self.cboFilename.List:			if a.find("UnTitled")==-1:				self.cboFilename.Text=a				self.btnSave_clicked(None)		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		self.checkDebugkey()		if self.process!=None:			self.CheckTraceError()		if self.process!=None and self.process.poll()!=None:			for a in range(3):				refreshGTK()				self.CheckTraceError()						#self.btn_stop.Enable=False			#self.run.Enable=True							#self.process=None			#print('Process terminated')		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.btnNew=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '15', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '17.png', 'Height': '30', 'Left': '0', 'Font': '', 'Name': 'btnNew', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.NewActivex=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '2.png', 'Height': '50', 'Left': '55', 'Font': '', 'Name': 'NewActivex', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnOpen=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '3.png', 'Height': '35', 'Left': '115', 'Font': '', 'Name': 'btnOpen', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.imclose=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '4.png', 'Height': '35', 'Left': '175', 'Font': '', 'Name': 'imclose', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.imagecloseall=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '5.png', 'Height': '30', 'Left': '235', 'Font': '', 'Name': 'imagecloseall', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.btnExample=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '6.png', 'Height': '30', 'Left': '295', 'Font': '', 'Name': 'btnExample', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnSave=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '7.png', 'Height': '30', 'Left': '355', 'Font': '', 'Name': 'btnSave', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnSaveAs=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '8.png', 'Height': '30', 'Left': '415', 'Font': '', 'Name': 'btnSaveAs', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnCut=forms		self.create("{'Var': '', 'Width': '35', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '9.png', 'Height': '30', 'Left': '485', 'Font': '', 'Name': 'btnCut', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnCopy=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '10.png', 'Height': '40', 'Left': '540', 'Font': '', 'Name': 'btnCopy', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnPaste=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '-5', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '11.png', 'Height': '30', 'Left': '600', 'Font': '', 'Name': 'btnPaste', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.btnDelete=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '-5', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '12.png', 'Height': '40', 'Left': '670', 'Font': '', 'Name': 'btnDelete', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.run=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '13.png', 'Height': '30', 'Left': '725', 'Font': '', 'Name': 'run', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.btn_stop=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '14.png', 'Height': '40', 'Left': '780', 'Font': '', 'Name': 'btn_stop', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.Properties=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '90', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '15.png', 'Height': '30', 'Left': '775', 'Font': '', 'Name': 'Properties', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.Widget=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '125', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '16.png', 'Height': '30', 'Left': '765', 'Font': '', 'Name': 'Widget', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.clearbreak=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '125', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': 'pdb.png', 'Height': '30', 'Left': '815', 'Font': '', 'Name': 'clearbreak', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.usercontrolbuf=forms		self.create("{'Var': '', 'Width': '305', 'Help': '', 'Top': '100', 'BackColor': '(0, 0.16821630082508665, 0.7205644320921178, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Text': 'Layout1', 'Picture': '', 'Height': '380', 'Left': '0', 'Font': '', 'Name': 'usercontrolbuf', 'ParentsType': '', 'Tag': ''}","Layout","usercontrol","[]")		self.lblFileName=forms		self.create("{'Var': '', 'Width': '100', 'Help': '', 'Top': '70', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': 'Open Project Folder', 'Picture': '', 'Height': '30', 'Left': '0', 'Font': '', 'Name': 'lblFileName', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['button-release-event', 'self,event,e']]")		self.Button1=forms		self.create("{'Var': '', 'Width': '45', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '19.png', 'Height': '30', 'Left': '375', 'Font': '', 'Name': 'Button1', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button2=forms		self.create("{'Var': '', 'Width': '50', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '21.png', 'Height': '30', 'Left': '435', 'Font': '', 'Name': 'Button2', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button3=forms		self.create("{'Var': '', 'Width': '75', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '22.png', 'Height': '30', 'Left': '580', 'Font': '', 'Name': 'Button3', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.ScrolledWindow1=forms		self.create("{'Var': '', 'Width': '1050', 'Help': '', 'Top': '595', 'BackColor': '(0, 0.2283765486683038, 0.9218062664839296, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Text': 'ScrolledWindow1', 'Picture': '', 'Height': '115', 'Left': '305', 'Font': '', 'Name': 'ScrolledWindow1', 'ParentsType': '', 'Tag': ''}","ScrolledWindow","usercontrol","[]")		self.Button4=forms		self.create("{'Var': '', 'Width': '80', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '23.png', 'Height': '30', 'Left': '665', 'Font': '', 'Name': 'Button4', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button5=forms		self.create("{'Var': '', 'Width': '60', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '25.png', 'Height': '30', 'Left': '505', 'Font': '', 'Name': 'Button5', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.Label1=forms		self.create("{'Var': '', 'Width': '20', 'Help': '', 'Top': '550', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Alignment': '', 'Text': '>>', 'Picture': '', 'Height': '25', 'Left': '365', 'Font': '', 'Name': 'Label1', 'ParentsType': '', 'Tag': ''}","Label","usercontrol","[]")		self.Button8=forms		self.create("{'Var': '', 'Width': '60', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '18.png', 'Height': '30', 'Left': '200', 'Font': '', 'Name': 'Button8', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.Button9=forms		self.create("{'Var': '', 'Width': '95', 'Help': '', 'Top': '40', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '20.png', 'Height': '30', 'Left': '270', 'Font': '', 'Name': 'Button9', 'ParentsType': '', 'Tag': ''}","Button","usercontrol","[['clicked', 'self,e']]")		import ctlmenuBar		self.ctlmenuBar1=ctlmenuBar.Handler		self.create("{'Var': '', 'Width': '265', 'Help': '', 'Top': '0', 'BackColor': '(0, 0.5842975292398256, 0.870020511207372, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': 'ctlmenuBar1', 'Picture': '', 'Height': '20', 'Left': '0', 'Font': '', 'Name': 'ctlmenuBar1', 'ParentsType': '', 'Tag': 'Activex'}","ctlmenuBar","usercontrol","[['clicked', 'self,caption']]")		import FileChooser		self.FileChooser1=FileChooser.Handler		self.create("{'Var': '', 'Width': '30', 'Help': '', 'Top': '180', 'BackColor': '(0, 0.05066897811702087, 0.903619944129897, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Text': 'FileChooser1', 'Picture': '', 'Height': '30', 'Left': '525', 'Font': '', 'Name': 'FileChooser1', 'ParentsType': '', 'Tag': 'Activex'}","FileChooser","usercontrol","[]")		import MsgBox		self.MsgBox1=MsgBox.Handler		self.create("{'Var': '', 'Width': '30', 'Help': '', 'Top': '80', 'BackColor': '(0, 0.8954106704968187, 0.5155371000812619, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Text': 'MsgBox1', 'Picture': '', 'Height': '30', 'Left': '325', 'Font': '', 'Name': 'MsgBox1', 'ParentsType': '', 'Tag': 'Activex', 'usercontrolproperty': 'sample only'}","MsgBox","usercontrol","[]")		self.EventBox1=forms		self.create("{'Var': '', 'Width': '30', 'Help': '', 'Top': '550', 'BackColor': '(0, 0.8967267378254482, 0.47491483413434776, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': 'EventBox1', 'Picture': '', 'Height': '25', 'Left': '335', 'Font': '', 'Name': 'EventBox1', 'ParentsType': '', 'Tag': ''}","EventBox","usercontrol","[['button-release-event', 'self,event,e']]")		self.EventBox2=forms		self.create("{'Var': '', 'Width': '30', 'Help': '', 'Top': '550', 'BackColor': '(0.8967267378254482,0 , 0.47491483413434776, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[button-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': 'EventBox2', 'Picture': '', 'Height': '25', 'Left': '305', 'Font': '', 'Name': 'EventBox2', 'ParentsType': '', 'Tag': ''}","EventBox","usercontrol","[['button-release-event', 'self,event,e']]")		import ctlanouncement		self.ctlanouncement1=ctlanouncement.Handler		self.create("{'Var': '', 'Width': '305', 'Help': '', 'Top': '480', 'BackColor': '(0, 0.33298230352382896, 0.11104401292885702, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Text': 'ctlanouncement1', 'Picture': '', 'Height': '230', 'Left': '0', 'Font': '', 'Name': 'ctlanouncement1', 'ParentsType': '', 'Tag': 'Activex'}","ctlanouncement","usercontrol","[]")		self.Label2=forms		self.create("{'Var': '', 'Width': '80', 'Help': '', 'Top': '575', 'BackColor': '(0.07,0.71,0.90,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Alignment': 'CENTER', 'Text': '-Debug Probe-', 'Picture': '', 'Height': '20', 'Left': '305', 'Font': '9', 'Name': 'Label2', 'ParentsType': '', 'Tag': ''}","Label","usercontrol","[]")		self.Entry1=forms		self.create("{'Var': '', 'Width': '970', 'Help': '', 'Top': '550', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[key-press-event, key-release-event]', 'ForeColor': '(0,0,0,1)', 'Text': 'print(\"Hello\")', 'Picture': '', 'Height': '30', 'Left': '385', 'Font': '', 'Name': 'Entry1', 'ParentsType': '', 'Tag': ''}","SourceView","usercontrol","[['key-press-event', 'self,event,e'], ['key-release-event', 'self,event,e']]")		import DatagridTreeView		self.DatagridTreeView1=DatagridTreeView.Handler		self.create("{'Var': '', 'AlternateColor': 'False', 'Width': '1050', 'Top': '550', 'Visible': 'False', 'dbtype': 'sqllite', 'ForeColor': '(0,0,0,1)', 'Height': '160', 'Enable': 'True', 'Font': '', 'SELECT': '#FFAAAA', 'ParentsType': '', 'UNSELECT': '#FFFFFF', 'Help': '', 'FontStyle': 'Times New Roman', 'BackColor': '(0, 0.11356460269631485, 0.34237651576272, 0.5)', 'Left': '305', 'Events': '[dblclick]', 'FontSize': '', 'Text': 'DatagridTreeView1', 'Picture': '', 'Name': 'DatagridTreeView1', 'Tag': 'Activex'}","DatagridTreeView","usercontrol","[['dblclick', 'self,model,row,col']]")		self.cboFilename=forms		self.create("{'Var': '', 'Width': '295', 'Help': '', 'Top': '0', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[changed]', 'ForeColor': '(0,0,0,1)', 'Text': 'ComboBoxText1', 'Picture': '', 'Height': '30', 'Left': '0', 'Font': '', 'Name': 'cboFilename', 'ParentsType': 'Layout', 'Tag': ''}","ComboBoxText","usercontrolbuf","[['changed', 'self,e']]")		self.cboObject=forms		self.create("{'Var': '', 'Width': '235', 'Help': '', 'Top': '30', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[changed]', 'ForeColor': '(0,0,0,1)', 'Text': 'ComboBoxText1', 'Picture': '', 'Height': '30', 'Left': '0', 'Font': '', 'Name': 'cboObject', 'ParentsType': 'Layout', 'Tag': ''}","ComboBoxText","usercontrolbuf","[['changed', 'self,e']]")		self.btnhighlight=forms		self.create("{'Var': '', 'Width': '60', 'Help': '', 'Top': '30', 'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[clicked]', 'ForeColor': '(0,0,0,1)', 'Text': 'Hide', 'Picture': '', 'Height': '30', 'Left': '235', 'Font': '', 'Name': 'btnhighlight', 'ParentsType': 'Layout', 'Tag': ''}","Button","usercontrolbuf","[['clicked', 'self,e']]")		self.scrolledwindow1=forms		self.create("{'Var': '', 'Width': '295', 'Help': '', 'Top': '60', 'BackColor': '(0, 0.10381282458180208, 0.8874311878391989, 0.5)', 'Visible': 'True', 'Enable': 'True', 'Events': '[[, ]]', 'ForeColor': '(0,0,0,1)', 'Text': 'ScrolledWindow1', 'Picture': '', 'Height': '319', 'Left': '0', 'Font': '', 'Name': 'scrolledwindow1', 'ParentsType': 'Layout', 'Tag': ''}","ScrolledWindow","usercontrolbuf","[]")		self.Entry2=forms		self.create("{'Var': '', 'Width': '170', 'Help': '', 'Top': '10', 'BackColor': '(0,0,0,1)', 'Visible': 'True', 'Enable': 'True', 'Events': '[]', 'ForeColor': '(0,0,0,1)', 'Text': '', 'Picture': '', 'Height': '55', 'Left': '20', 'Font': '', 'Name': 'Entry2', 'ParentsType': 'ScrolledWindow', 'Tag': ''}","SourceView","ScrolledWindow1","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	@property	def Property(self):		return self.addedobj	@Property.setter	def Property(self,value):		self.addedobj=value[0]		self.addedobj.RefreshProperty()		self.addedobjglobal=value[1]		self.gtkClass=value[2]		self.properties=value[3]		self.Refresh()	def ShowLineCodeInFile(self,line,filename):		#import pdb;pdb.set_trace();		for i,a in enumerate(self.frmForm):				print(a.filename)				a.Widget().hide()				if a.filename.lower()==filename.lower():					self.currentform=a					self.currentform.Widget().show()					try:						x=self.currentform.editor[1].get_buffer()					except:						self.currentform.hassavedWiredGT=True						self.currentform.ShowEventSelected(None,"")						#x=self.currentform.editor[1].TextView().TextView1						#x.set_highlight_current_line(True)							#delay(1000)						refreshGTK()					self.currentform.showLineInCode(line)										def cboFilename_changed(self,*args):		#import pdb;pdb.set_trace()		if self.cboFilename_disable_event:return		if self.currentform!=None:			self.sourceview=False			self.currentform.sourceVisible(self.sourceview)								for i,a in enumerate(self.frmForm):			a.Widget().hide()			if a.filename==self.cboFilename.Text:				self.currentform=a				self.currentform.Widget().show()				#self.lblFileNameW.Text=self.cboFilenameW.Text		try:				if self.loadingnewfile==False:				self.PopulateObjectAdded()				if self.currentform.gtkcodeflag==False:				if self.cboFilenameW.Text.find("UnTitled")==-1:					self.currentform.sourceVisible(True)					return						except:			a=a	def lblFileName_button_release_event(self,*args):		print(self.currentform.filename)		if self.currentform.hasFilename:			#subprocess.Popen('explorer /select,' + self.currentform.filename) #windows			import webbrowser			webbrowser.open(GetPath(self.currentform.filename))   		pass	def AdjustView(self):		if self.view==False:			forms(self.currentform.Widget()).Left=0			forms(self.currentform.Widget()).Top=67			self.currentform.layout1W.Left=1230			self.currentform.layoutCodeW.Left=0			self.currentform.eventbox1W.Width=1230		else:			forms(self.currentform.Widget()).Top=67			forms(self.currentform.Widget()).Left=300			self.currentform.layout1W.Left=930			self.currentform.layoutCodeW.Left=0			self.currentform.eventbox1W.Width=930			self.currentform.scrolledwindow3W.Height-=120			self.currentform.scrolledwindow1W.Height-=120			#forms(self.currentform.Widget()).Height-=120#gtk_widget_set_size_request: assertion 'height >= -1' failed			self.currentform.layout1W.Height-=120			self.currentform.layoutCodeW.Height-=120			self.currentform.eventbox1W.Height-=120	def btn_stop_button_release_event(self,event,e):		if self.process!=None:			self.process.terminate()		self.showdebugbutton(False)		self.DatagridTreeView1.Visible=False		self.process=None		self.btn_stop.Enable=False		self.run.Enable=True						for a in self.frmForm:			try:				x=a.editor[1].TextView().TextView1				x.set_highlight_current_line(False)			except:				x=0	def btnExample_clicked(self,*args):		self.loadingnewfile=True		self.OpenFile('examples')		self.loadingnewfile=False	def btnCut_clicked(self,*args):		import MsgBox		self.MsgBox=MsgBox.Handler(None)		ret=self.MsgBox.Display("Cut selected widget?","" ,button=["YES","NO"])		if ret[0]=="NO":			return 				self.copy=self.currentform.addedobj.SelectedObject()		self.currentform.addedobj.RemoveSelected(deleted=self.currentform.deleted)			self.PopulateObjectAdded()		pass	def btnCopy_clicked(self,*args):		self.copy=self.currentform.addedobj.SelectedObject()		pass	def btnPaste_clicked(self,*args):		self.currentform.Paste()		pass	def btnDelete_clicked(self,*args):		import MsgBox		self.MsgBox=MsgBox.Handler(None)		ret=self.MsgBox.Display("Delete selected widget?","" ,button=["YES","NO"])		if ret[0]=="NO":			return				self.currentform.addedobj.RemoveSelected(deleted=self.currentform.deleted)		self.PopulateObjectAdded()		pass	def btnOpen_clicked(self,*args):		self.loadingnewfile=True		self.sourceview=False		self.currentform.sourceVisible(self.sourceview)					self.OpenFile()		self.loadingnewfile=False	def OpenFile(self,_path=''):		if _path!="" and _path[0]==":":			fnameGlade=_path[1:]		else:			fnameGlade=dlgFile("Select python file",path=_path,parent=self._window,types=['*.py'])		if str(fnameGlade)=='-6' or str(fnameGlade)=='-4':			self.window.Visible=True			return		fnameGlade=fnameGlade.replace("\\","/")		for i,a in enumerate(self.frmForm):			if fnameGlade.lower()==self.cboFilename.List[i].lower():						return		self.run.Enable=False		cont=GetFileStr(fnameGlade)					watch_cursor = Gdk.Cursor(Gdk.CursorType.WATCH)		for a in range(3):			self.window.get_window().set_cursor(watch_cursor)			refreshGTK()				delay(3)		if 1:#try:			f=frmForm.Handler(self,fnameGlade)			self.layout1.put(f.Widget(),0,0)			self.frmForm.append(f)					self.btnSaveAs.Enable=True					self.cboFilename.ComboValues=[a.filename for a in self.frmForm]			self.untitledcnt+=1			self.currentform=f			self.cboFilename.set_active(len(self.frmForm)-1)			self.cboFilename_changed(None)			self.currentform.ActiveXEnable(True)			self.AdjustView()			self.PopulateObjectAdded()			self.currentform.hasFilename=True			if self.cboFilename.Text.find('examples')!=-1:				self.btnSaveAs_clicked(None)			self.window.get_window().set_cursor(None)				self.backup(self.currentform.filename)#march 2019			if cont.find('#	Generated By WiredGTK for Python: by Rocky Nuarin')==-1:				self.currentform.editor[1].OpenTab(fnameGlade)				self.currentform.editor[1].ScrolledWindowCode().Height=(self.Entry1.Top-self.currentform.editor[1].ScrolledWindowCode().Top)-140				forms(self.currentform.editor[1].ScrolledWindowCode().get_parent()).Height=self.currentform.editor[1].ScrolledWindowCode().Height+70				forms(self.currentform.editor[1].ScrolledWindowCode().get_parent().get_parent()).Height=self.currentform.editor[1].ScrolledWindowCode().Height+70				self.currentform.gtkcodeflag=False				self.currentform.editor[1].ButtonHide.Visible=False				self.currentform.editor[1].btnSave.Visible=True				#self.currentform.editor[1].Text=GetFileStr(fnameGlade)				self.currentform.showLineInCode(1)		else:#except:			self.window.get_window().set_cursor(None)			msgbox(self._window,"Loading Error!!!","WiredGTK Error")		self.run.Enable=True	def backup(self,fname):#march 2019		path=GetPath(fname).replace('\\','/')+'backup'		if os.path.isdir(path)==False:			os.mkdir(path)		_fname=GetFilenameNoEXT(fname)		if FileExist(fname):			SaveFileStr(path+"/"+_fname+CreateFileName()+'.py', GetFileStr(fname))		def imagecloseall_button_release_event(self,*args):		dir_path = os.path.dirname(os.path.realpath(__file__))		from mysql import gladeToPython		gladeToPython.Start()		os.chdir(dir_path)		pass	def btnabout(self,*args):		import about		f=about.Handler(self)		f.Show(modal=True)	def imclose_button_release_event(self,*args):		import MsgBox		self.MsgBox=MsgBox.Handler(None)		ret=self.MsgBox.Display("Close current form/script?","" ,button=["YES","NO"])		if ret[0]=="NO":			return				self.btnSave_clicked(None)		self.close_script()	def close_script(self):			x=self.cboFilename.ComboValues		if len(x)==1:return		if len(self.frmForm)!=0:			x.remove(self.currentform.filename)		if len(x):			fname=x[0]			self.currentform.Widget().hide()				b=self.currentform			self.frmForm.remove(b)			self.cboFilename.ComboValues=x			self.currentform=b			self.currentform.unload()			del self.currentform			self.currentform=None			self.currentform=self.frmForm[0]			self.currentform.Widget().show()						try:				#self.lblFileNameW.Text=self.cboFilenameW.Text						self.cboFilename_changed(None)			except:				pass			def NewActivex_clicked(self,*args):		self.btnNew_clickedold(None)		self.currentform.activexFlag=True		self.btnSaveAs_clicked(1)	def btnhide_clicked(self,*args):		self.view=False		self.usercontrolbuf.Visible=self.view		self.AdjustView()	def opencodefordisplay(self,fnameGlade):		self.loadingnewfile=True		self.sourceview=False		self.currentform.sourceVisible(self.sourceview)					self.OpenFile(":"+fnameGlade)		self.loadingnewfile=False			def btnNew_clicked(self,*args):				fnameGlade=dlgFile("Save As",False,parent=self._window,types=['*.py'])		#import pdb;pdb.set_trace();		if type(fnameGlade)==int:			return		if fnameGlade.find(".py")==-1:			fnameGlade+=".py"		SaveFileStr(fnameGlade,'import sys\nprint("Hello Word")\n')		self.loadingnewfile=True		self.sourceview=False		self.currentform.sourceVisible(self.sourceview)					self.OpenFile(":"+fnameGlade)		self.loadingnewfile=False	def btnNew_clickedold(self,*args):		if len(self.frmForm):			self.frmForm[-1].Widget().hide()		f=frmForm.Handler(self,"UnTitled"+str(self.untitledcnt)+".py")		self.layout1.put(f.Widget(),0,0)		self.frmForm.append(f)		#forms(f.Widget()).BackColor=1,1,0,1		self.btnSaveAs.Enable=True				self.cboFilename.ComboValues=[a.filename for a in self.frmForm]		self.untitledcnt+=1		self.currentform=f		self.cboFilename.set_active(len(self.frmForm)-1)		f.Widget().show()		self.cboFilename_changed(None)		self.AdjustView()		#self.btnSave_clicked(None)		pass	def view(self,*args):		pass					def showcutpaste(self,enable):		self.btnCut.Enable=enable		self.btnCopy.Enable=enable		self.btnPaste.Enable=enable		self.btnDelete.Enable=enable					def run_button_release_event(self,*args):		self.showdebugbutton(False)		if self.currentform.filename.find('plugin')!=-1 or self.currentform.filename.find('examples')!=-1:			msgbox(self._window,"Cant save and run to this directory","WiredGTK Error")			return		if len(self.frmForm)!=0:			if self.currentform.gtkcodeflag==True:				self.currentform.intel.usercontrol.Visible=False				self.currentform.btncode_clicked_cb(None)			else:				SaveFileStr(self.currentform.filename, self.currentform.editor[1].Text)			if self.process==None:				print('Process Started')				self.btn_stop.Enable=True				self.run.Enable=False				self.showcutpaste(False)				import platform				if self.runtime!="Default" and platform.system()=="Windows":					path=GetPath(self.runtime)[:-1]					import shutil					#if FileExist(path +"\\python_.exe")==False:					#	shutil.copyfile(self.runtime, path +"\\python_.exe")										paths=[]					if os.environ["PATH"].find(path)==-1:						os.environ["PATH"]+=";"+path+";"											paths=['Library\\mingw-w64\\bin','Library\\usr\\bin','Library\\bin','Scripts','bin']					for a in paths:						if FileExist(path+'\\' + a) and os.environ["PATH"].find(path+'\\' + a)==-1:							os.environ["PATH"]+=path+'\\' + a +";"										#self.process=subprocess.Popen('python ' + "\""+ self.currentform.filename +"\"")				#self.devnull = open(os.devnull, 'wb')				#self.process=subprocess.Popen('python ' + self.currentform.filename,stdout=self.devnull, stderr=self.devnull)				command='python ' + self.currentform.filename														ON_POSIX = 'posix' in sys.builtin_module_names															def enqueue_output(out, queue):					for line in iter(out.readline, b''):						queue.put(line)					out.close()				def enqueue_output2(out, queue):					for line in iter(out.readline, b''):						queue.put(line)					out.close()				import frmaddlibs				frmaddlibs.getimportlibs(self.currentform.filename)				if platform.system()!="Windows":					python_name="python3"				if platform.system()=="Windows" and self.runtime=="Default":					python_name="python.exe"				if platform.system()=="Windows" and self.runtime!="Default":					python_name=self.runtime														dir_path = os.path.dirname(os.path.realpath(self.currentform.filename))				os.chdir(dir_path)								self.process = Popen([python_name,'-u',self.currentform.filename], stderr=PIPE,stdout=PIPE ,stdin=PIPE, bufsize=1, close_fds=ON_POSIX)				self.queue = Queue()				self.queue2 = Queue()				#self.outraks,self.errraks = self.process.communicate()				t = Thread(target=enqueue_output, args=(self.process.stderr, self.queue))				t.daemon = True # thread dies with the program				t.start()									t = Thread(target=enqueue_output2, args=(self.process.stdout, self.queue2))				t.daemon = True # thread dies with the program				t.start()					os.chdir(app_path())					pass	def btnSave_clicked(self,*args):		if self.currentform.code=="":			if self.currentform.filename.find('UnTitled')==-1:				self.currentform.code=GetFileStr(self.currentform.filename)			#print "save code first"			self.currentform.prop.btnSaveAs_clicked(1)		if self.currentform.gtkcodeflag==False:			self.currentform.btncode_clicked_cb(None)			return				self.currentform.btncode_clicked_cb(None)			if self.currentform.editor[1].Text.find('#	Generated By WiredGTK for Python: by Rocky Nuarin')==-1:			return		self.currentform.CreateControl("Generate","")		self.currentform.ActiveXEnable(True)		pass	def createproperty(self):		import MsgBox		self.MsgBox=MsgBox.Handler(None)		ret=self.MsgBox.Display("User-Control","Properties=Yes\nEvents=OK" ,button=["OK","YES"])		if ret[0]=="YES":			ret=self.MsgBox.Display("Enter property name","Text",button=["OK"])			ret="""	#WiredProperty '%s': ''		self._%s=""	@property	def %s(self):		return self._%s	@%s.setter		def %s(self,value):		self._%s=value"""%(ret[1],ret[1],ret[1],ret[1],ret[1],ret[1],ret[1])		else:			ret1=self.MsgBox.Display("Enter Event name","oncomm",button=["OK"])			ret2=self.MsgBox.Display("Enter Event param","(self)",button=["OK"])			#WiredEvent def usercontrolevent(self,value)	#add more events 			ret="	#WiredEvent def %s%s#if self.caller!=None and '%s' in self.wiredevents:self.wiredevents['%s']()" % (ret1[1],ret2[1],ret1[1],ret1[1])		self.MsgBox.Display("Generated",ret,button=["OK"])	def Properties_button_release_event(self,*args):				if self.view==True:			self.view=False		else:			self.view=True		self.usercontrolbuf.Visible=self.view		self.AdjustView()		#self.intel.Scroll(7)		pass	def showhide(self,obj,flag):		for b in obj.children:			for c in self.currentform.addedobj.lst:				if b==c:					if b.HasChildren()==True: 						self.showhide(b, self.currentform.addedobj,flag)					forms(b.widget.realcontrol).Visible=flag^True					forms(b.widget.Widget()).Visible=flag^True	def btnhighlight_clicked(self,e):		addedobj=None		for a in self.currentform.addedobj.lst:			if a.Name==self.cboObject.Text:				addedobj=a				if addedobj==None:			return				x=forms(addedobj.widget.realcontrol).Visible				forms(addedobj.widget.realcontrol).Visible=x^True		forms(addedobj.widget.Widget()).Visible=x^True		if x^True:			addedobj.widget.Selected=True			forms(self.btnhighlight).Text="Hide"			forms(self.btnhighlight).ForeColor=(0,0,0,1)		else:			forms(self.btnhighlight).Text="Show"			forms(self.btnhighlight).ForeColor=(1,0,0,1)		self.showhide(addedobj,x)	def cboObject_changed(self,e):		if self.cboObject_disable_event: return		if self.cboObject.Text!="" and self.cboObjectFromClick:			self.currentform.RefreshDatagrid(self.cboObject.Text)			refreshGTK()			addedobj=None			for a in self.currentform.addedobj.lst:				if a.Name==self.cboObject.Text:					addedobj=a			if addedobj!=None and forms(addedobj.widget.realcontrol).Visible:				forms(self.btnhighlight).Text="Hide"				forms(self.btnhighlight).ForeColor=(0,0,0,1)			else:				forms(self.btnhighlight).Text="Show"				forms(self.btnhighlight).ForeColor=(1,0,0,1)		self.cboObjectFromClick=True		def PopulateObjectAdded(self):		x=[a.Name for a in self.currentform.addedobj.lst]		self.cboObject.ComboValues=x		pass			def Widget_button_release_event(self,*args):		#if self.widgetview==True:		#	self.widgetview=False		#else:		#	self.widgetview=True		self.createproperty()		self.widgetview=True		self.currentform.toolbarVisible(self.widgetview)		if FileExist('b4a.txt')==True:			import tokenTest			b4aCustomView=False			for a in self.currentform.addedobj.lst:				if a.Name=="Activity":					b4aCustomView=True			if b4aCustomView==False:				return			declare=""			initialize=""			creation=""			routine=""			declarelst=[]			declarelstfind=[]			initializelst=[]			initializelstfind=[]			creationlst=[]			creationlstfind=[]			routinelst=[]			routinelstfind=[]			def addview(a):				panel=""				if a.parent.types=='Layout'and  a.parent.Var=="ScrollView":					panel="Panel."				return panel				for a in self.currentform.addedobj.lst:				if a.Name=="Activity":					act_x=a.Left					act_y=a.Top					act_w=a.Width					act_h=a.Height														if a.Name!="Activity" and a.Name!="mBase":										parentname=a.parent.Name					base_x=a.parent.Left					base_y=a.parent.Top					base_w=a.parent.Width					base_h=a.parent.Height																				x="%0.2f" % (float(a.Left)/int(base_w)) + " * "+parentname+".Width"					y="%0.2f" % (float(a.Top)/int(base_h)) + " * "+parentname+".Height"					w="%0.2f" % (float(a.Width)/int(base_w)) + " * "+parentname+".Width"					h="%0.2f" % (float(a.Height)/int(base_h)) + " * "+parentname+".Height"					#initialize+="\t" + a.Name + '.Initialize(\"'+ a.Name + '")\r\n'					#initializelst.append("\t" + a.Name + '.Initialize(\"'+ a.Name + '")')					#initializelstfind.append("\t" + a.Name + '.Initialize(\"'+ a.Name + '")')					if a.types=="Timer":						buf="\t" + a.Name + '.Initialize(\"'+ a.Name + '",1000)'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);							buf="\t" + a.Name + '.Enabled = True'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);					elif a.types=="DatagridTreeView":												buf="\t" + a.Name + '.Initialize(Me,\"'+ a.Name + '\",4)'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);													buf="\t\'"+ a.Name + "."+"LoadTableFromCSV(Dir, Filename, HeadersExist)"												initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);																						buf="\t\'"+ 'vb6.SetDataGrid(Activity,Main.SQL,' + a.Name + ',"History")'												initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);																							elif a.types=="Layout" and a.Var!="":	#ScrollView						buf="\t" + a.Name + '.Initialize('+ "%0.2f" % (float(a.Height)*100/int(base_h)) + "%y" + ')\'add '+a.Name+'.Height=xx%y at the end of GTKForms'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);																	else:							buf="\t" + a.Name + '.Initialize(\"'+ a.Name + '")'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);																def getcolor(x):						r=eval(x)[0]*255						r="%02x" % (int(r))						g=eval(x)[1]*255						g="%02x" % (int(g))						b=eval(x)[2]*255						b="%02x" % (int(b))							return r,g,b						'''					Supported widget					ListBox,WebKit,CheckButton,RadioButton,Entry,Button,Timer,DatagridTreeView,ComboBoxText,HScrollbar,Label,Image,Layout										just click properties toolbar to generate b4 code(b4a.txt must exist and there is an Activity and mBase layout )										notes					1.code that must be retained should be at the begining of Class_Globals or Initialize or GTKForms					2.if code already exist events will not be added, add it manualy or delete the bas file(warning, all manualy added code will be erased )					3.1and 2 not needed anymore, this produces filename_new.bas if file already exist, just copy all code in "filename_new.bas: related to the new widget added within wiredgtk					'''								if a.types=="Button":						buf='\tDim ' + a.Name + " as Button"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);														if a.types=="ListBox":						buf="\t" + a.Name + '.AddSingleLine("My ListView")'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);													buf='\tDim ' + a.Name + " as ListView"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);						buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);															r,g,b=getcolor(a.BackColor)						if r!="ff" or g!="ff" or b!="ff":							buf='\t'+a.Name+".Color =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																		else:							buf='\t'+a.Name+".Color =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																		r,g,b=getcolor(a.ForeColor)						if r!="ff" or g!="ff" or b!="ff":							buf='\t'+a.Name+".SingleLineLayout.Label.Color =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																		else:							buf='\t'+a.Name+".SingleLineLayout.Label.Color =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																								if a.types=="WebKit":						buf='\tDim ' + a.Name + " as WebView"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																	if a.types=="CheckButton":						buf='\tDim ' + a.Name + " as CheckBox"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																	if a.types=="RadioButton":						buf='\tDim ' + a.Name + " as RadioButton"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																							if a.types=="Entry":						buf='\tDim ' + a.Name + " as EditText"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																if a.types=="Timer":													buf='\tDim ' + a.Name + " As Timer"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);										if a.types=="DatagridTreeView":												buf='\tDim ' + a.Name + " as Table"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);						buf='\t'+a.Name+'.AddToParent(mBase,'+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);						buf='\t\''+a.Name+'.LoadTableFromCSV(File.DirAssets, "datus.csv", True)'						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);						buf='\t\''+a.Name+'.SetDatagrid(Array As String ("A","B","C"),Array(Array As String("1","2","3"),Array As String("4","5","6")))'						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);											if a.types=="ComboBoxText":						buf="\t" + a.Name + '.AddAll(Array As String("Sunday", "Monday"))'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);													buf='\tDim ' + a.Name + " as Spinner"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);						buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);												r,g,b=getcolor(a.BackColor)						if r!="ff" or g!="ff" or b!="ff":							buf='\t'+a.Name+".Color =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																			buf='\t'+a.Name+".DropdownBackgroundColor =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																		else:							buf='\t'+a.Name+".Color =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																			buf='\t'+a.Name+".DropdownBackgroundColor =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																									r,g,b=getcolor(a.ForeColor)						if r!="ff" or g!="ff" or b!="ff":							buf='\t'+a.Name+".DropdownTextColor =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																			buf='\t'+a.Name+".TextColor =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																									else:							buf='\t'+a.Name+".DropdownTextColor =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																									buf='\t'+a.Name+".TextColor =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																							if a.types=="HScrollbar":						buf="\t" + a.Name + '.Max = 100'						initialize+=buf+"\r\n";initializelst.append(buf);initializelstfind.append(buf);													buf='\tDim ' + a.Name + " as SeekBar"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);						buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);											if a.types=="Label":						buf='\tDim ' + a.Name + " as Label"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);						r,g,b=getcolor(a.BackColor)						if r!="ff" or g!="ff" or b!="ff":							buf='\t'+a.Name+".Color =  0xff" + r+g+b							creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);													else:							buf='\t'+a.Name+".Color =  0x00" + r+g+b							creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);													r,g,b=getcolor(a.ForeColor)						buf='\t'+a.Name+".TextColor = 0xff" + r+g+b						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);												if a.Alignment=="LEFT":							buf='\t'+a.Name+".Gravity = Gravity.CENTER_HORIZONTAL+Gravity.LEFT"						elif a.Alignment=="RIGHT":								buf='\t'+a.Name+".Gravity = Gravity.CENTER_HORIZONTAL+Gravity.RIGHT"						else:							buf='\t'+a.Name+".Gravity = Gravity.CENTER_HORIZONTAL+Gravity.CENTER_VERTICAL"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);												buf='\t'+a.Name+".Text = \"" + a.Text + "\""						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);											if a.types=="Image":						buf='\tDim ' + a.Name + " as ImageView"						declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);												buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);												if a.Picture!="":							buf='\t'+ a.Name+".Bitmap = LoadBitmapResize(File.DirAssets,\"" + a.Picture + "\","+a.Name+".Width,"+a.Name+".Height,true)"							creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																			if a.types=="Layout":						if a.Var=="":							buf='\tDim ' + a.Name + " as Panel"						if a.Var!="":							buf='\tDim ' + a.Name + " as " + a.Var													declare+=buf+"\r\n";declarelst.append(buf);declarelstfind.append(buf);													buf='\t'+parentname+'.'+addview(a)+'AddView('+a.Name+','+x +','+y+','+w+','+h+")"						creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																		r,g,b=getcolor(a.BackColor)						if r!="ff" or g!="ff" or b!="ff":							buf='\t'+a.Name+".Color =  0xff" + r+g+b								creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																		else:							buf='\t'+a.Name+".Color =  0x00" + r+g+b									creation+=buf+"\r\n";creationlst.append(buf);creationlstfind.append(buf);																	if a.types=="ComboBoxText":						routine+= "Sub " + a.Name + "_" + "ItemClick (Position As Int, Value As Object)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "ItemClick (Position As Int, Value As Object)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "ItemClick (Position As Int, Value As Object)")																elif a.types=="HScrollbar":						routine+= "Sub " + a.Name + "_" + "ValueChanged (Value As Int, UserChanged As Boolean)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "ValueChanged (Value As Int, UserChanged As Boolean)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "ValueChanged (Value As Int, UserChanged As Boolean)")																						elif a.types=="ListBox":						routine+= "Sub " + a.Name + "_" + "ItemClick (Position As Int, Value As Object)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "ItemClick (Position As Int, Value As Object)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "ItemClick (Position As Int, Value As Object)")																						elif a.types=="Timer":						routine+= "Sub " + a.Name + "_" + "Tick()\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "Tick()\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "Tick()")							elif a.types=="CheckButton":						routine+= "Sub " + a.Name + "_" + "CheckedChange(Checked As Boolean)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "CheckedChange(Checked As Boolean)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "CheckedChange(Checked As Boolean)")													elif a.types=="RadioButton":						routine+= "Sub " + a.Name + "_" + "CheckedChange(Checked As Boolean)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "CheckedChange(Checked As Boolean)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "CheckedChange(Checked As Boolean)")													elif a.types=="WebKit":						routine+= "Sub " + a.Name + "_" + "PageFinished (Url As String)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "PageFinished (Url As String)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "PageFinished (Url As String)")																			elif a.types=="DatagridTreeView":						routine+= "Sub " + a.Name + "_" + "CellClick (Col As Int, Row As Int)\r\n\tLog(\"CellClick: \" & Col & \" , \" & Row)\r\n\tDim val As String = "+a.Name+".GetValue(Col, Row)\r\n\tToastMessageShow(val,False)\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "CellClick (Col As Int, Row As Int)\r\n\tLog(\"CellClick: \" & Col & \" , \" & Row\r\n\tDim val As String = Table1.GetValue(Col, Row)\r\n\tToastMessageShow(val,False)\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "CellClick (Col As Int, Row As Int)")						else:							routine+= "Sub " + a.Name + "_" + "click()\r\nEnd Sub\r\n"						routinelst.append("Sub " + a.Name + "_" + "click()\r\nEnd Sub")						routinelstfind.append("Sub " + a.Name + "_" + "click()")								def GetFileStrX(fname):				fname=fname.replace('\\','/')				fo = open(fname, "rb")				str = fo.read(GetFileSize(fname))				return str.decode()								strs=GetFileStrX("ctlCustom.bas")			strs=strs.replace("declare",declare)			strs=strs.replace("initialize",initialize)			strs=strs.replace("creation",creation)			strs=strs.replace("routine",routine)			def SaveFileStrX(fname,str_to_write):				fname=fname.replace('\\','/')				fo = open(fname, "wb")				fo.write(str_to_write.encode());				fo.close()			if FileExist(GetPath(self.currentform.filename) + GetFilenameNoEXT(self.currentform.filename)+'.bas')==True:				if 0:#skip this we dont need this anymore					s=tokenTest.tokenKO()					s.addreplace("Sub Class_Globals",declarelstfind,declarelst)					s.addreplace("Public Sub GTKForms",creationlstfind,creationlst)					s.addreplace("Public Sub Initialize (Callback As Object, EventName As String)",initializelstfind,initializelstfind)					#s.addreplace("Public Sub Initialize",initializelstfind,initializelstfind)					s.Start(GetPath(self.currentform.filename) + GetFilenameNoEXT(self.currentform.filename)+'.bas')								SaveFileStrX(GetPath(self.currentform.filename) + GetFilenameNoEXT(self.currentform.filename)+'_new.bas', strs)					else:					SaveFileStrX(GetPath(self.currentform.filename) + GetFilenameNoEXT(self.currentform.filename)+'.bas', strs)				pass			def SourceCode_button_press_event(self,*args):		if self.sourceview==True:			self.sourceview=False		else:			self.sourceview=True		self.currentform.sourceVisible(self.sourceview)		def CloseSource(self):		self.sourceview=False		self.currentform.sourceVisible(self.sourceview)			pass		def SetCurrentForm(self,currentform):		self.currentform=currentform		if self.currentform.filename!="":			self.btnSaveAs.Enable=True		else:			self.btnSaveAs.Enable=False		pass	def btnSaveAs_clicked(self,*args):				if args[0]==None:			self.currentform.btnsaveas_cb()		else:			if self.currentform.hasFilename==False:				self.currentform.btncode_clicked_cb()			else:				self.btnSaveAs_clickedX(None)				self.currentform.btncode_clicked_cb()							def btnSaveAs_clickedX(self,*args):		#self.window1.hide()				index=self.cboFilename.get_active()		flagcopy=False		if self.cboFilename.Text.find('examples')==-1:			fnameGlade=dlgFile("Save As",False,parent=self._window,types=['*.py'])		else:			while(1):				fnameGlade=CreateFileName()				if os.path.isdir(self.main_dir+'/WiredGTK/'+fnameGlade)==False:					os.mkdir(self.main_dir+'/WiredGTK/'+fnameGlade)					fnameGlade=self.main_dir+'/WiredGTK/'+fnameGlade + '/frmmain.py'					fnameGlade=fnameGlade.replace('\\','/')						flagcopy=True					break						if str(fnameGlade)=='-6' or str(fnameGlade)=='-4':			self.window.Visible=True			return			#print (fnameGlade)		fnameGlade=fnameGlade.replace('\\','/');		gtkclass=self.currentform.gtkClass.Names()		gtkclass=[a for a in gtkclass]			if GetFilename(fnameGlade).replace('.py','') in gtkclass:			msgbox(self._window, 'Invalid Name', "WiredGTK")			return		if fnameGlade.find(' ')!=-1:			print("Error: Filename or Directory Contains Spaces")				if fnameGlade.find(".py")==-1 and fnameGlade.find(".PY")==-1 and fnameGlade.find(".Py")==-1 and fnameGlade.find(".pY")==-1:			fnameGlade+=".py"		if app_path().replace('\\','/')==GetPath(fnameGlade):			msgbox(self._window,"Cant save to this directory","WiredGTK Error")			return		if FileExist(fnameGlade)==True:			import MsgBox			self.MsgBox=MsgBox.Handler(None)			openedfile= [x.lower() for x in self.cboFilename.List] 			if (fnameGlade.lower() in openedfile)==True:				self.MsgBox.Display("Error " ,"File %s Already opened!!!" %(GetFilename(fnameGlade)),button=["OK"])					return			ret=self.MsgBox.Display("File Exist","Ovewrite File?" ,button=["YES","NO"])						if ret[0]=="NO":				return 												if flagcopy:			root_src_dir=GetPath(self.cboFilename.Text)			root_dst_dir=GetPath(fnameGlade)			root_dst_dir=root_dst_dir.replace('\\','/');			#global __current_dir			#__current_dir=root_dst_dir #dialog.__current_dir			frmForm.copyall(root_src_dir, root_dst_dir)		__fname=self.currentform.filename		if self.currentform.hasFilename==True and GetPath(__fname).find('plugin')==-1 and GetPath(__fname).find('examples')==-1: 			self.btnSave_clicked(None)			SaveFileStr(fnameGlade, GetFileStr(self.currentform.filename))			try:				self.currentform.editor[1].tabs[0]=fnameGlade			except:				fnameGlade=fnameGlade		self.currentform.filename=fnameGlade		self.backup(self.currentform.filename)#march 2019		#self.btnSave_clicked(None)		self.cboFilename.ComboValues=[a.filename for a in self.frmForm]		self.cboFilename.set_active(index)		self.currentform.ActiveXEnable(True)		#self.window1.show()		pass			def OnTop(self,value):		#if value:			#self.window1.set_keep_above(1)			#else:			#self.window1.set_keep_above(0)			#if Gtk.events_pending():			#Gtk.main_iteration()			pass	def Refresh(self):		c=[]				for index,a in enumerate(self.properties):			if self.addedobj is None:				value=""			else:					if hasattr(self.addedobj, a)==False:					exec("self.addedobj.%s=''" % a)				value=eval("self.addedobj.%s" % a)			if a in ["Visible","Enable","Alignment"]:				if a=="Visible" or a== "Enable":					c.append([a,value,["True","False"]])#c.append([a,value,["rakster"]])					continue				if a=="Alignment":					c.append([a,value,["LEFT","CENTER","RIGHT"]])#c.append([a,value,["rakster"]])										continue				c.append([a,value])#c.append([a,value,["rakster"]])									else:	#covid19 add ctlfile not just plugin folder				if self.currentform.plugin.Exist(self.addedobj.types+'.py') or FileExist(GetPath(self.currentform.filename)+"/"+self.addedobj.types+'.py'):					gtkclass=self.currentform.gtkClass.Object(self.addedobj.types)					if (gtkclass is None)==False and a in gtkclass.properties:						#if len(gtkclass.propertiesval)!=0:						for i,b in enumerate(gtkclass.properties):							if b==a:								if len(gtkclass.propertieslst[i])!=0:									c.append([a,value,gtkclass.propertieslst[i]])								else:									c.append([a,value])#c.append([a,value,["rakster"]])														break					else:									c.append([a,value])#c.append([a,value,["rakster"]])										else:								c.append([a,value])#c.append([a,value,["rakster"]])														#self.currentform.plugin.Exist(self.addedobj.types+'.py')			#gtkclass=self.currentform.gtkClass.Object(self.addedobj.types)		self.grid.Display(["--------","---------"], c,None)	def reloadCurrentForm(self):		self.btnSave_clicked(None)		pass	def Update(self,val,prevname=""):			imageloaded=False		if self.addedobjglobal==None:return		if prevname!='':			self.currentform.deleted.append(prevname)		for index,a in enumerate(self.grid.values):			self.addedobj.updated=True			if val!="" and val[0]==a[0] and val[0]=='Picture':				#a[1]=val[1].upper()#problem: if letter after '\\' is small				fname=GetFilename(a[1])				path=val[1]				a[1]=fname				src=path;src=src.replace('\\','/');				dst=(GetPath(self.currentform.filename) + '/' + fname);dst=dst.replace('\\','/');								#if src!='' and src!=dst and dst.find(':')!=-1 and self.currentform.hasFilename==True:					#copyfile(src, dst)				if self.currentform.hasFilename==True:						if imageloaded==False and src!='':						if self.addedobj.types=='Image':							self.addedobj.widget.realcontrolW.LoadPicture=dst						if self.addedobj.types=='Button':							self.addedobj.widget.realcontrol.set_always_show_image (True)							self.addedobj.widget.realcontrolW.Text=""							dir_path = os.path.dirname(os.path.realpath(__file__))							dir_proj=GetPath(self.currentform.filename)							os.chdir(dir_proj)							butimg=Gtk.Image.new_from_file (val[1])								os.chdir(dir_path)							self.addedobj.widget.realcontrol.set_image(butimg)													imageloaded=True				else:					msgbox(self._window, "Save Project", 'WiredGTK')			if a[0]=='Name' or a[0]=='ParentsType':				if a[0]=='Name':					if self.addedobjglobal.NameExist(a[1],self.addedobj)==False:						exec("self.addedobj.%s='%s'" % (a[0],a[1]))				else:							obj=self.addedobjglobal.NameToObjectType(self.addedobj.Name)					if obj.HasParent()==True:						exec("self.addedobj.%s='%s'" % ("ParentsType",obj.parent.types))							else:					#if a[0]=="Events":					#exec("self.addedobj.%s=%s" % (a[0],a[1]))				#else:					#exec("self.addedobj.%s='%s'" % (a[0],a[1]))				#if type(a[1])==str and :				if a[0]=="Events":					ev=[aa[0] for aa in self.addedobj.event]					if len(self.addedobj.event)!=0 and self.addedobj.event[0]!='[':						ev=str(ev).replace("'",'')						exec("self.addedobj.%s='%s'" % (a[0],ev))					else:							ev=str(ev).replace("'",'')						exec("self.addedobj.%s='%s'" % (a[0],ev))					else:					exec("self.addedobj.%s='%s'" % (a[0],a[1]))					#print "self.addedobj.%s='%s'" % (a[0],a[1])				if a[0]=="Alignment":					try:						exec("self.addedobj.widget.realcontrolW.Alignment='%s'" % (a[1]))					except:						a=a									if a[0]=="Text":					try:						exec("self.addedobj.widget.realcontrolW.Text='%s'" % (a[1]))					except:						a=a				if a[0]=="BackColor":					try:						exec("self.addedobj.widget.realcontrolW.BackColor=%s" % (a[1]))					except:						a=a				if a[0]=="ForeColor":					try:						exec("self.addedobj.widget.realcontrolW.ForeColor=%s" % (a[1]))					except:						a=a					ev=[a[0] for a in self.addedobj.event]										if val!='':						if val[0]=='Picture':						if imageloaded==False and val[1]!='' and self.currentform.hasFilename:							if self.addedobj.types=='Image':								self.addedobj.widget.realcontrolW.LoadPicture=val[1]							if self.addedobj.types=='Button':								self.addedobj.widget.realcontrolW.Text=""								self.addedobj.widget.realcontrol.set_always_show_image (True)								dir_path = os.path.dirname(os.path.realpath(__file__))								dir_proj=GetPath(self.currentform.filename)								os.chdir(dir_proj)								butimg=Gtk.Image.new_from_file (val[1])									os.chdir(dir_path)								self.addedobj.widget.realcontrol.set_image(butimg)								self.addedobj.widget.realcontrolW.Text=''						if val[1]=='':							try:								self.addedobj.widget.realcontrol.set_always_show_image (False)							except:								val=val							imageloaded=True													if a[0]=="Font":						try:							exec("self.addedobj.widget.realcontrolW.Font='%s'" % (a[1]))													#w=self.addedobj.widget.realcontrolW.Width							#h=self.addedobj.widget.realcontrolW.Height							#self.addedobj.widget.WidgetSetSize(w,h)													except:							a=a										if a[0]=="Width":						try:							exec("self.addedobj.widget.realcontrolW.Width=%s" % (a[1]))							w=float(a[1])							for c in self.grid.values:								if c[0]=='Height':									h=float(c[1])									self.addedobj.widget.WidgetSetSize(w,h)						except:							a=a					if a[0]=="Height":						try:							exec("self.addedobj.widget.realcontrolW.Height=%s" % (a[1]))							h=float(a[1])							for c in self.grid.values:								if c[0]=='Width':									w=float(c[1])									self.addedobj.widget.WidgetSetSize(w,h)						except:							a=a					if a[0]=="Left":						try:							class _event:								def __init__(self,x,y,xr,yr):									self.x_root=xr									self.y_root=yr									self.x=20									self.y=20							if  self.addedobj.HasParent():								a[1]=self.addedobj.parent.widget.realcontrolW.Left+int(a[1])								top=self.addedobj.parent.widget.realcontrolW.Top+int(self.addedobj.Top)							else:								top=int(self.addedobj.Top)							event=_event(0,0,int(a[1]),top)							self.currentform.mycontrol=frmForm.Drag()							self.currentform.mycontrol.addObject(self.addedobj)							self.currentform.addedobj.Select(self.addedobj)							self.currentform.mycontrol.MemorizeClick(event)							self.currentform. mycontrol.Dragging(event,self.currentform.addedobj,event.x_root,event.y_root)													except:							a=a										if a[0]=="Top":						try:							class _event:								def __init__(self,x,y,xr,yr):									self.x_root=xr									self.y_root=yr									self.x=20									self.y=20							if  self.addedobj.HasParent():								a[1]=self.addedobj.parent.widget.realcontrolW.Top+int(a[1])								left=self.addedobj.parent.widget.realcontrolW.Left+int(self.addedobj.Left)							else:								left=int(self.addedobj.Left)							event=_event(0,0,left,int(a[1]))							self.currentform.mycontrol=frmForm.Drag()							self.currentform.mycontrol.addObject(self.addedobj)							self.currentform.addedobj.Select(self.addedobj)							self.currentform.mycontrol.MemorizeClick(event)							self.currentform. mycontrol.Dragging(event,self.currentform.addedobj,event.x_root,event.y_root)													except:							a=a		if prevname!='':			self.cboObjectFromClick=False			self.PopulateObjectAdded()								def isAllWinClose(self):		for a in self.win:			if a.get_visible()==True:				return False		return True	def findFirstErrorInCode(self,errCode):		#errCode=errCode.decode()		x=errCode.split('\n');		for a in x:			if a.find("File")!=-1 and a.find('line')!=-1:				lineno=getCSV(1, ',', a)				lineno=lineno.replace(' line ','')				return lineno		return 0		def Fill(self,err=None):		if err!=None:			strs=err			strs=strs.split("\n")#windows "\r\n"		else:			strs=GetFileStr("error.txt")			strs=strs.split("\n\n")		row=[]		buf=''		for a in strs:			if a.find("File \"")!=-1 and buf!="":				if len(row)==0:					row.append(["Error ",buf])				else:						row.append([len(row),buf])				buf=a			else:					buf+="\r\n"+a		if len(row)>0:					row.append([len(row),buf])		else:			row.append(["Error ","Syntax Error"])			row.append([1,buf])				self.DatagridTreeView1.TreeViewFilterWindow(row[0],row[1:])		def DatagridTreeView1_dblclick(self,model,row,col):		watch_cursor = Gdk.Cursor(Gdk.CursorType.WATCH)		for a in range(3):			self.window.get_window().set_cursor(watch_cursor)			refreshGTK()				delay(3)				strs=model[row][col]		fname=getCSV(1,"\"",strs)						index=strs.find("line ")		if index!=-1:			line=strs[index+len('line '):]						for i,a in enumerate(line):			if a.isdigit()==False:				break		if i==len(line)-1:				i+=1			line=line[0:i]					fname=fname.replace("\\","/")		openedfile= [x.lower() for x in self.cboFilename.List] 		if (fname.lower() in openedfile)==False:			'''			import MsgBox			self.MsgBox=MsgBox.Handler(None)								self.MsgBox.Width=400;self.MsgBox.Height=400;			self.MsgBox.Display("Debug in progress","Please Open \n" + fname +"\n\nCant automatically open this file due to pdb issue\n,incorrect file path due to str.lower()\n conversion of pdb )", "OK")			'''			self.opencodefordisplay(fname)			for i,a in enumerate(self.cboFilename.List): #covid19,show current filename in self.cboFilename			if a.lower()==fname.lower():				self.cboFilename_disable_event=True				self.cboFilename.ListIndex=i					self.cboFilename_disable_event=False				break					#self.Label1.Text=fname		self.DatagridTreeView1.selectthis(row,True)		self.ShowLineCodeInFile(int(line),fname)		self.window.get_window().set_cursor(None)		pass	def CheckTraceError(self):		def getLine():			try:  line = self.queue.get_nowait()			except Empty:				return ""			else: # got line				#...do something with line				return line.decode()		def getLine2():			try:  line = self.queue2.get_nowait()			except Empty:				return ""			else: # got line				#...do something with line				return line.decode()				buf=getLine()		buf2=getLine2()		if (buf2!=''):			#print("at last stdout has data",buf2)			while(buf2.find("(Pdb) ")==0):				buf2=buf2[6:]						pdbheader= '(Pdb) > /'			pdbheader2= '> '#pdbheader2= '> /'						if buf2[:2]==pdbheader or buf2.find(pdbheader2) ==0:				if buf2.find(pdbheader2)==0:					pdbheader=pdbheader2				offset=len(pdbheader)				_start=buf2[offset:].find("(")				_end=buf2[offset:].find(")")				codeline=buf2[_start+offset+1:_end+offset]				fname=buf2[offset-1:offset+_start]				fname=fname.replace("\\","/")				fname=fname.strip()				#print("fname",fname)				#print("codeline",codeline)				openedfile= [x.lower() for x in self.cboFilename.List] 				if (fname.lower() in openedfile)==False:					'''					import MsgBox					self.MsgBox=MsgBox.Handler(None)										self.MsgBox.Width=400;self.MsgBox.Height=400;					self.MsgBox.Display("Debug in progress","Please Open \n" + fname +"\n\nCant automatically open this file due to pdb issue\n,incorrect file path due to str.lower()\n conversion of pdb )", "OK")					'''					self.opencodefordisplay(fname)								self.showdebugbutton(True)				for i,a in enumerate(self.cboFilename.List): #covid19,show current filename in self.cboFilename					if a.lower()==fname.lower():						self.cboFilename_disable_event=True						self.cboFilename.ListIndex=i							self.cboFilename_disable_event=False						break								self.ShowLineCodeInFile(int(codeline),fname)							self.importnextflag=False			self.Entry2.Text+=buf2			if len(buf2)>10:				if buf2[:9]=="-> import":					self.importnextflag=True							line=''		while(buf!=''):			line+=buf			buf=getLine()		if line!='':			if line.find('Traceback')!=-1 or line.find('SyntaxError')!=-1:				self.process.terminate()				#msgbox(parent=self._window, msg=line, title="WiredGTK")				self.DatagridTreeView1.Visible=True				#import errorWindow				#err=errorWindow.Handler(None)				self.Fill(line)				#err.Show(modal=False)												#lineno=self.findFirstErrorInCode(line)				#self.currentform.showLineInCode(lineno)														else:				#import pdb;pdb.set_trace();				self.importnextflag=False				print(line,"raks")	def showdebugbutton(self,flag):		self.Button1.Enable=flag;		self.Button2.Enable=flag;		self.Button3.Enable=flag;		self.Button4.Enable=flag;		self.Button5.Enable=flag;		self.Button8.Enable=flag;		self.Button9.Enable=flag;		self.Entry1.Enable=flag;	def Button2_clicked(self,e):#ste over		self.showdebugbutton(False)		self.process.stdin.write(b'n\n')		self.process.stdin.flush()	def aa_button_press_event(self,event,e):		pass	def Button1_clicked(self,e):		self.showdebugbutton(False)		self.process.stdin.write(b'where\n')		self.process.stdin.flush()		pass	def Button3_clicked(self,e):#step into		if self.importnextflag==True:#stepin crashes so we stepout instead if current line is import xxx(CheckTraceError handles it)			self.Button2_clicked(None)			return		self.showdebugbutton(False)		self.process.stdin.write(b's\n')		self.process.stdin.flush()		pass	def Button4_clicked(self,e):		self.showdebugbutton(False)		self.process.stdin.write(b'r\n')		self.process.stdin.flush()		self.process.stdin.write(b'r\n')		self.process.stdin.flush()		pass	def Button5_clicked(self,e):		self.showdebugbutton(False)		self.process.stdin.write(b'c\n')		self.process.stdin.flush()		pass	def Entry1_key_press_event(self,event,e):		#print( e.get_keyval())		if  e.get_keyval()[1]==65362 or e.get_keyval()[1]==65364:			try:				if e.get_keyval()[1]==65362:					self.bufftypedIndex-=1					if e.get_keyval()[1]==65364:					self.bufftypedIndex+=1					if self.bufftypedIndex>=len(self.bufftyped):					self.bufftypedIndex=len(self.bufftyped)-1				if self.bufftypedIndex<0:					self.bufftypedIndex=0				self.Entry1.Text=self.bufftyped[self.bufftypedIndex]							except:				a=0						if  e.get_keyval()[1]==65293 or e.get_keyval()[1]==13:			self.execPDB()			self.erase=True						pass	def Entry1_key_release_event(self,event,e):		try:			if self.erase==True:				self.Entry1.Text=""				self.erase=False		except:			pass	def execPDB(self):		if len(self.Entry1.Text)!=0:			while(self.Entry1.Text[-1]=='\n'):				self.Entry1.Text=self.Entry1.Text[:-1]		cmd="!"+self.Entry1.Text+"\n"		self.process.stdin.write(cmd.encode())		self.process.stdin.flush()		self.Entry2.Text+=">>"+self.Entry1.Text+'\n'		self.bufftyped.append(self.Entry1.Text)		self.bufftypedIndex=len(self.bufftyped)-1		self.Entry1.Text=""	def autoscroll(self,*args):		"""The actual scrolling method"""		adj = self.ScrolledWindow1.get_vadjustment()		#print(adj.get_upper() - adj.get_page_size())		adj.set_value((adj.get_upper() - adj.get_page_size()))			def Button7_clicked(self,e):		self.window.Text=self.currentform.Currentline()		pass	def Button8_clicked(self,e):		cmd='j '+str(self.currentform.Currentline())+'\n'		#self.showdebugbutton(False)		self.process.stdin.write(cmd.encode())		self.process.stdin.flush()				self.Button1_clicked(None)		pass	def Button9_clicked(self,e):		cmd='b '+str(self.currentform.Currentline())+'\n'		#self.showdebugbutton(False)		self.process.stdin.write(cmd.encode())		self.process.stdin.flush()		pass	def ctlmenuBar1_clicked(self,caption):		if caption=="About":			self.btnabout(None)		if caption=="close":			self.unload()		if caption=="new":			self.btnNew_clicked(None)							if caption=="Runtime":			if platform.system()=="Windows":				ret =self.MsgBox1.Display("Runtime Python path",self.runtime,["Default","Search Python","Cancel"],buttonwidth=130,width=410,height=40)				if ret[0]=="Search Python":					py=self.FileChooser1.SelectFile("Select python.exe ",filetypes=['*.exe'],OpenFlag=True)					if type(py)==str and GetFilename(py)=="python.exe" and FileExist(py):						SaveFileStr('runtime.txt', py)						self.runtime=py					else:						self.MsgBox1.Display("Runtime Python path","Invalid python!!!",["OK"])				if ret[0]=="Default":					if FileExist(self.runtime):						path=GetPath(self.runtime)[:-1]						if os.environ["PATH"].find(path)!=-1:							os.environ["PATH"]=os.environ["PATH"].replace(";"+path+";","")					if FileExist(path+"\\Library\\bin"):						if os.environ["PATH"].find(path+"\\Library\\bin;")!=-1:							os.environ["PATH"]=os.environ["PATH"].replace(path+"\\Library\\bin;","")					SaveFileStr('runtime.txt', "Default")						self.runtime="Default";											pass	def clearbreak_clicked(self,e):		if forms(self.currentform.editor[1].get_textview()).Visible:			text = "import pdb; pdb.set_trace();"  # text will have the content of clipboard			buffers=self.currentform.editor[1].get_buffer()				buffers.insert_at_cursor(text)							pass	def EventBox2_button_release_event(self,event,e):		self.Entry2.Text=""		self.Entry1.SetFocus()		pass	def EventBox1_button_release_event(self,event,e):		if self.Button5.Enable==True: 			x=self.MsgBox1.Display("Watch Object Member (dir)","self.window",["OK"])			self.Entry1.Text="for a in dir(%s):print(a)" % (x[1]) 			self.execPDB()			self.erase=True				self.Entry1.Text="for a in dir(%s):print(a)" % (x[1]) 		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()