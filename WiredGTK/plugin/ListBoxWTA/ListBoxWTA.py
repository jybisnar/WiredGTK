import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdkfrom wta_module import *from copy import deepcopy#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	def __init__(self,*param):					#WiredEvent def highlighted(self,value)	#add more events 		#WiredEvent def selected(self,value)	#add more events 		initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()			self.form_load=False		self.window.Text="GTKWired"				self.GTKForms()		self.top=0		self.lst=[]		self.Image1Event.Left=0		self.Image1Event.Top=0		self.Image1Event.Top=0		self.lastindex=0		self.List(["Donna","Michelle","Abcd","Mich"],"Dog")		self.HighlightLst=[]	def activeXcreated(self,*args):		self.Layout1.Width=self.usercontrol.Width-10		self.Layout2.Width=self.usercontrol.Width-10		self.VScrollbar1.Left=self.usercontrol.Width+self.Layout1.Left-20		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})				def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):				self.create("{'Name': 'Layout1', 'ForeColor': '(0, 0, 0, 1)', 'Visible': 'True', 'Tag': '', 'Text': 'Layout1', 'Width': '121', 'Events': '[button-press-event]', 'Enable': 'True', 'Top': '1', 'Font': '', 'ParentsType': '', 'Left': '0', 'BackColor': '(1, 1, 1, 1)', 'Picture': '', 'Height': '115'}","Layout","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Name': 'Layout2', 'ForeColor': '(0, 0, 0, 1)', 'Visible': 'True', 'Tag': '', 'Text': 'Layout2', 'Width': '115', 'Events': '[button-press-event]', 'Enable': 'True', 'Top': '0', 'Font': '', 'ParentsType': 'Layout', 'Left': '1', 'BackColor': '(1, 1, 1, 1)', 'Picture': '', 'Height': '106'}","Layout","Layout1","[['button-press-event', 'self,event,e']]")		self.create("{'Name': 'VScrollbar1', 'ForeColor': '(0, 0, 0, 1)', 'Visible': 'True', 'Tag': '', 'Text': 'VScrollbar1', 'Width': '30', 'Events': '[change-value]', 'Enable': 'True', 'Top': '1', 'Font': '', 'ParentsType': '', 'Left': '112', 'BackColor': '(1, 1, 1, 1)', 'Picture': '', 'Height': '115'}","VScrollbar","usercontrol","[['change-value', 'self,e']]")		self.create("{'Name': 'Image1', 'ForeColor': '(0, 0, 0, 1)', 'Visible': 'True', 'Tag': '', 'Text': 'Image1', 'Width': '146', 'Events': '[button-press-event]', 'Enable': 'True', 'Top': '198', 'Font': '', 'ParentsType': '', 'Left': '62', 'BackColor': '(1, 1, 1, 1)', 'Picture': '', 'Height': '123'}","Image","usercontrol","[['button-press-event', 'self,event,e']]")	def Highlight(self,lst,color=(1,0,0,1)):		self.HighlightLst=lst		index=[]		for i,a in enumerate(self.lst):			for b in lst:				if a[1]==b:					index.append(i)									for a in index:			forms(self.lst[a][0]).ForeColor=color			def List(self,lsts,targetWord=None,Highlight=None,sort=False):		lst=deepcopy(lsts)		if sort:			lst.sort()		for a in self.lst:			parent=a[0].get_parent()			parent.remove(a[0])			del a			self.lst=[]		self.top=0		self.Layout2.Top=0		for a,text in enumerate(lst):			lbl=Gtk.Label()			forms(lbl).Text=text			forms(lbl).Visible=True			lbl.set_alignment(0,0)			forms(lbl).Width=self.VScrollbar1.Left			self.Layout2.put(lbl,0,a*20)					self.lst.append((lbl,text))					if targetWord!=None:			self.ScrollTo(targetWord)		lens=len(self.lst)		adj=self.VScrollbar1.get_adjustment()		adj.set_upper(lens)			adj.set_value(self.top)		self.Layout2.Height=20*len(lst)		self.Image1Event.Top=self.Layout2.Top		self.Image1Event.Width=self.Layout2.Width		self.Image1Event.Height=self.Layout2.Height		forms(self.lst[abs(self.top)][0]).ForeColor=0,0,1,1		self.lastindex=abs(self.top)		if Highlight!=None:			self.Highlight(Highlight)	def loop(self, user_data):		if self.form_load==False:			self.form_load=True			self.parse=Parser("WTA","\r",1)		#        Serial.begin(9600)#enable serial comm		if self.sch.Event():#timer routine			#code here			self.sch.Start()		#while Serial.available():#enable serial comm		#        c=Serialx.read()		#        if self.parse.DataReceived(c):		#                print int(getCSV(0,",", self.parse.data))                        		return True	#return true so that main_loop can call it again                        	@property	def Text(self):		if abs(self.top)<len(self.lst):			return self.lst[abs(self.top)][1]		return ""	@Text.setter	def Text(self,value):		pass		def clickISR(self,items):		#self.btdelete_items.show()#delete		#self.btnupdate_items.show()#update				#self.dbUtils.TableValToUserInput("Items",items)		print(items)	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def ScrollTo(self,targetWord):		found=False		for i,a in enumerate(self.lst):			if targetWord[0].lower()==a[1][0].lower():				found=True				break		if found==True:				self.top=i*-1			self.Layout2.Top=self.top*20	def ScrollDown(self):		self.top-=1		if abs(self.top)>=len(self.lst):			self.top=(len(self.lst)-1)*-1		self.Layout2.Top=self.top*20		self.ColorSelected(abs(self.top))	def ScrollUp(self):		self.top+=1		if self.top>0:self.top=0		self.Layout2.Top=self.top*20		self.ColorSelected(abs(self.top))					def Layout1_button_press_event(self,event,e):				pass	def Layout2_button_press_event(self,event,e):		pass	def Button1_button_press_event(self,event,e):		self.ScrollUp()		self.window.Text=self.Text		pass	def Button2_button_press_event(self,event,e):		self.ScrollDown()		self.window.Text=self.Text		pass	def Button3_button_press_event(self,event,e):		self.ScrollTo('mas')		pass	def VScrollbar1_change_value(self,*args):		val=self.VScrollbar1.Text		self.top=float(val)*-1		self.Layout2.Top=self.top*20		self.Image1Event.Top=self.Layout2.Top	def Image1_button_press_event(self,event,e):		self.ColorSelected(e)	def ColorSelected(self,e=None):		if type(e)!=int:			x,y=e.get_coords()			index=int(y/20)			if Gdk.EventType._2BUTTON_PRESS==e.type:				sel= self.lst[index][1]				if self.caller!=None:					if 'selected' in self.wiredevents:							self.wiredevents['selected'](sel)					else:				index=e				if type(e)==int or Gdk.EventType.BUTTON_PRESS==e.type:			forms(self.lst[index][0]).ForeColor=0,0,1,1			forms(self.lst[index][0]).BackColor=0.9,0.9,0.9,1			if index!=self.lastindex:				forms(self.lst[self.lastindex][0]).ForeColor=0,0,0,1				forms(self.lst[self.lastindex][0]).BackColor=1,1,1,1				self.Highlight(self.HighlightLst)				sel=self.lst[index][1]				if self.caller!=None:					if 'highlighted' in self.wiredevents:							self.wiredevents['highlighted'](sel)							self.lastindex=index		pass	if __name__ == "__main__":	_m = Handler()	_m.window.show()	Gtk.main()