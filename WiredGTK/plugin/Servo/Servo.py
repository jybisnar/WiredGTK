import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################import pigpioclass Handler(usercontrol):	#WiredProperty 'Angle': '90'		#WiredProperty 'Pin': '18'	#WiredProperty 'MinDutyCycle': '540'		#WiredProperty 'MaxDutyCycle': '2400'	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self.gpio = pigpio.pi()		self._MinDutyCycle=540		self._MaxDutyCycle=2400		self._angle=90		self._pin=18	def write(self,angle):		self._angle=int(float(angle))		x=Map(self._angle,0,180,self._MinDutyCycle,self._MaxDutyCycle)		self.gpio.set_servo_pulsewidth(self._pin, x)		@property		def Angle(self):		return self._angle	@Angle.setter		def Angle(self,value):		self.write(value)	@property		def MinDutyCycle(self):		return self._MinDutyCycle	@MinDutyCycle.setter		def MinDutyCycle(self,value):		self._MinDutyCycle=int(value)	@property		def MaxDutyCycle(self):		return self._MaxDutyCycle	@MaxDutyCycle.setter		def MaxDutyCycle(self,value):		self._MaxDutyCycle=int(value)	@property		def Pin(self):		return self._pin	@Pin.setter		def Pin(self,value):		self._pin=int(value)	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		x=Map(90,0,180,self.MinDutyCycle,self.MaxDutyCycle)		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		pass	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this formif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()