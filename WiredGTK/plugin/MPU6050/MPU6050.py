import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com######################some MPU6050 Registers and their AddressPWR_MGMT_1   = 0x6BSMPLRT_DIV   = 0x19CONFIG       = 0x1AGYRO_CONFIG  = 0x1BINT_ENABLE   = 0x38ACCEL_XOUT_H = 0x3BACCEL_YOUT_H = 0x3DACCEL_ZOUT_H = 0x3FGYRO_XOUT_H  = 0x43GYRO_YOUT_H  = 0x45GYRO_ZOUT_H  = 0x47import smbus			       '''	Read Gyro and Accelerometer by Interfacing Raspberry Pi with MPU6050 using Python	http://www.electronicwings.com'''class MPU6050:	def __init__(self,i2c=None):		#import pdb;pdb.set_trace();		if i2c==None:			bus = smbus.SMBus(1) 	# or bus = smbus.SMBus(0) for older version boards		else:			bus=i2c		Device_Address = 0x68   # MPU6050 device address			#write to sample rate register		bus.write_byte_data(Device_Address, SMPLRT_DIV, 7)		#Write to power management register		bus.write_byte_data(Device_Address, PWR_MGMT_1, 1)		#Write to Configuration register		bus.write_byte_data(Device_Address, CONFIG, 0)		#Write to Gyro configuration register		bus.write_byte_data(Device_Address, GYRO_CONFIG, 24)		#Write to interrupt enable register		bus.write_byte_data(Device_Address, INT_ENABLE, 1)		self.bus=bus		self.Device_Address=Device_Address		pass	def read_raw_data(self,addr):		#Accelero and Gyro value are 16-bit		high = self.bus.read_byte_data(self.Device_Address, addr)		low = self.bus.read_byte_data(self.Device_Address, addr+1)		#concatenate higher and lower value		value = ((high << 8) | low)			#to get signed value from mpu6050		if(value > 32768):				value = value - 65536		return value	def GetAccel_X(self):		ret=self.read_raw_data(ACCEL_XOUT_H)		ret=ret/16384.0		return ret	def GetAccel_Y(self):		ret=self.read_raw_data(ACCEL_YOUT_H)		ret=ret/16384.0		return ret	def GetAccel_Z(self):		ret=self.read_raw_data(ACCEL_ZOUT_H)		ret=ret/16384.0		return ret	#Read Gyroscope raw value	def GetGyro_X(self):		ret=self.read_raw_data(GYRO_XOUT_H)		ret=ret/131.0		return ret	def GetGyro_Y(self):		ret=self.read_raw_data(GYRO_YOUT_H)		ret=ret/131.0		return ret	def GetGyro_Z(self):		ret=self.read_raw_data(GYRO_ZOUT_H)		ret=ret/131.0		return retclass Handler(usercontrol):	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''			def Init(self,i2c=None):		self.mpu=MPU6050(i2c)	def GetAccel_X(self):		return self.mpu.GetAccel_X()	def GetAccel_Y(self):		return self.mpu.GetAccel_Y()	def GetAccel_Z(self):		return self.mpu.GetAccel_Z()	#Read Gyroscope raw value	def GetGyro_X(self):		return self.mpu.GetGyro_X()	def GetGyro_Y(self):		return self.mpu.GetGyro_Y()	def GetGyro_Z(self):		return self.mpu.GetGyro_Z()	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		pass	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this formif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()