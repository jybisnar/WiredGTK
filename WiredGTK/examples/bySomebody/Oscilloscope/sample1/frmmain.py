import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()			def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[clicked]', 'Picture': '', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'Tag': '', 'Width': '100', 'Text': 'Pause', 'Top': '296', 'ParentsType': '', 'Name': 'Button1', 'Left': '123', 'Height': '50'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[clicked]', 'Picture': '', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'Tag': '', 'Width': '100', 'Text': 'Run', 'Top': '291', 'ParentsType': '', 'Name': 'Button2', 'Left': '227', 'Height': '50'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.4614562938253698, 0.8895275615113666, 0.5)', 'Events': '[change-value]', 'Picture': 'hscrollbarwta.png', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'Tag': 'Activex', 'Max': '6', 'Width': '550', 'Value': '2.5', 'Text': 'hscrollbarwta1', 'Top': '253', 'ParentsType': '', 'Name': 'hscrollbarwta1', 'Left': '53', 'Height': '30'}","HScrollBarWTA","usercontrol","[['change-value', 'self,value']]")		self.create("{'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Events': '[[, ]]', 'Picture': '', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'Tag': '', 'Width': '57', 'Text': '0', 'Top': '296', 'ParentsType': '', 'Name': 'Entry1', 'Left': '58', 'Height': '30'}","Entry","usercontrol","[]")		self.create("{'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.024845390873611595, 0.47632767185452995, 0.5)', 'Events': '[]', 'Picture': 'oscilloscopewta.png', 'LineThickness': '1', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'Tag': 'Activex', 'Width': '545', 'BG_Color': '(0,0,0,1)', 'Text': 'oscilloscopewta1', 'Top': '37', 'ParentsType': '', 'VPP': '5', 'Name': 'oscilloscopewta1', 'Left': '57', 'LineColor': '(0.17,0.96,0.14,1)', 'Height': '211'}","OscillocopeWTA","usercontrol","[['framecomplete', 'self,value']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def oscilloscopewta1_usercontrolEvent1(self,e):		pass	def hscrollbarwta1_change_value(self,value):		#value of 0 to 99 converted to -2.5 to 2.5		value=float(value)		value=Map(value,0,self.hscrollbarwta1.Max-1,(self.hscrollbarwta1.Max-1)/-2,(self.hscrollbarwta1.Max-1)/2)		#value of 0 to 99 converted to -2.5 to 2.5				self.oscilloscopewta1.SetAmplitude(amp=float(value))		self.Entry1.Text=value		pass	def Button1_clicked(self,e):		self.oscilloscopewta1.Pause()		pass	def Button2_clicked(self,e):		self.oscilloscopewta1.Run()		pass	def oscilloscopewta1_framecomplete(self,value):		self.window.Text=value		self.oscilloscopewta1.Save("snap.png")		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()