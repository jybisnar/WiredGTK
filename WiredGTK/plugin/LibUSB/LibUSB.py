import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################import usb.coreimport usb.utiltry:	import threading	import thread	except ImportError:	import _thread as threadclass Handler(usercontrol):	#WiredEvent def usb_commevent(self,value)	#add more events 	#WiredEvent def usb_connectedevent(self)	#add more events 	#WiredEvent def usb_disconnectedevent(self)	#add more events 	#WiredProperty 'VID': '0x13ba'		#WiredProperty 'PID': '0x0018'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self.vid='0x13ba'		self.pid='0x0018'		self.data=None		self.device=None		self.connectionStatus=False		#self.activeXcreated()	def UsbLoop(self,device,endpoint):		lock = threading.Lock()		while True:			try:				data = device.read(endpoint.bEndpointAddress,							endpoint.wMaxPacketSize)				while self.data!=None:						a=0				self.data=data				#print data				#if data[2]!=0:					#print(chr(data[2]+19))					#for a in data:			except usb.core.USBError as e:				data = None				if e.args[1] == 'Operation timed out':					continue				if e.args[1] == 'Input/Output Error':					if self.caller!=None:						if 'usb_disconnectedevent' in self.wiredevents:							self.wiredevents['usb_disconnectedevent']()					self.close()							break					def close(self):		#self.device.close()		pass	@property		def VID(self):		return self.vid	@VID.setter		def VID(self,value):		self.vid=value	@property	def PID(self):		return self.pid	@PID.setter		def PID(self,value):		self.pid=value			def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def initLibUSB(self):		device = usb.core.find(idVendor=int(eval(self.vid)), idProduct=int(eval(self.pid)))#book drop barcode model copex			#use the first/default configuration		if device==None:			if self.caller!=None:				if 'usb_disconnectedevent' in self.wiredevents:					self.wiredevents['usb_disconnectedevent']()						return		if self.caller!=None:			if 'usb_connectedevent' in self.wiredevents:				self.wiredevents['usb_connectedevent']()					self.connectionStatus=True				device.set_configuration()		#first endpoint		endpoint = device[0][(0,0)][0]		#read a data packet		data = None		thread.start_new_thread(self.UsbLoop, (device,endpoint,))		self.device=device			def activeXcreated(self,*args):		self.initLibUSB()		pass	def unload(self,*args):		destroy=True		self.close()		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.data!=None:			if self.caller!=None:				if 'usb_commevent' in self.wiredevents:					self.wiredevents['usb_commevent'](self.data)				self.data=None		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		pass	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this formif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()