import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,Gdkimport datetime#from MySQLdb import OperationalErrorfrom copy import deepcopyfrom wired_module import *from dialog import *from shutil import copyfiledef reconnectMySql(db):        print ("DB has Run Away, pinging to reconnect")        db.ping(True)def GetSingleRec(db,Table, Fields, Fieldsval,retvalfields):        curs=db.cursor()        #connectDBifRunAway()        if type(Fieldsval)==int or type(Fieldsval)==float or type(Fieldsval)==long:                sql="select * from " + Table + " where " + Fields + " = " + Fieldsval         else:#might be string or date or time                    sql="select * from " + Table + " where " + Fields + " = '" + str(Fieldsval) + "'"        #curs.execute (sql)        for a in range(2):                try:                        curs.execute (sql)                        break                except OperationalError as e:                        #do what you want to do on the error                        reconnectMySql(db)        results = curs.fetchall()        col=getFields(db,Table)        if len(results)==0:                return ""        for a in range(len(col)):                if col[a]==retvalfields:                        return results[0][a]#first record only        return ""def getFields(db,cols):        #connectDBifRunAway()        curs=db.cursor()        sql="SHOW COLUMNS FROM " + cols        for a in range(2):                try:                        curs.execute (sql)                        break                except OperationalError as e:                        #do what you want to do on the error                        reconnectMySql(db)        results = curs.fetchall()        ret=[]        for a in results:                ret.append(a[0])        return ret#ExecuteNonQuerry(db,"INSERT INTO data (Name, Date, Time) VALUES ('%s', '%s', '%s')" % ("Bago", Date(),Time()) )#ExecuteNonQuerry(db,"UPDATE data SET Name='%s' WHERE Name='%s'" % ("Wala","raks"))		#ExecuteNonQuerry(db,"DELETE FROM data WHERE Name='%s'" % ("Bago"))	def ExecuteNonQuerry(db,sql):        curs=db.cursor()        for a in range(2):                try:                        curs.execute (sql)                        break                except OperationalError as e:                        #do what you want to do on the error                        connectMySql()        db.commit()        return ""def getRecords(db,sql):        #connectDBifRunAway()        #curs.execute (sql)        curs=db.cursor()        for a in range(2):                try:                        curs.execute (sql)                        break                except OperationalError as e:                        #do what you want to do on the error                        reconnectMySql(db)        results = curs.fetchall()        return resultsdef getType(x):        if type(x) is str:                return str        if type(x) is long:                return int        if x == None:                return str            if type(x) is datetime.date:                return str #datetime.date        if type(x) is datetime.datetime:                return str #datetime.date            if type(x) is datetime.timedelta:                return str #datetime.timedelta            if type(x) is int:                return int        if type(x) is datetime.time:                return str #datetime.date                if type(x) is datetime.timedelta:                return str #datetime.date    def getTable(sql,after="from"):        flag=False        x=sql.split(" ")        for a in x:                if flag==True:                        if a.lower() in ["\r","\t","\n","\t"]:                                continue                        else:                                return a                if a.lower()==after:                        flag=True        class TreeViewFilterWindow:                #Creating the ListStore model#        _fields=["Name","Age","Address"]#        _listdata=[["1Rocky Nuarin","23","Malate Manila"],["2Rocky Nuarin","23","Malate Manila"],["3Rocky Nuarin","23","Malate Manila"],["4Rocky Nuarin","23","Malate Manila"]]        def __init__(self,scrolledwindow1,checkbox=False,clickISR=None,prop=None):                self.prop=prop                self.obj=[]                self.scrolledwindow1=scrolledwindow1                self.checkbox=checkbox                self.table = Gtk.Layout()                self.table.set_size_request(2000,800)                                self.table.set_visible(True)			#importtant                self.scrolledwindow1.add_with_viewport(self.table)	                self.clickISR=clickISR          def keyrelease(self,*arg):                forcechange=False                try:                        #print(arg[1].get_keycode()[1], arg[1].get_keyval()[1])                                                if forms(arg[0]).Text.isdecimal():                                if (arg[1].get_keycode()[1]==38 or arg[1].get_keycode()[1]==111) and arg[1].get_keyval()[1]==65362:                                        forms(arg[0]).Text=(int(forms(arg[0]).Text)+1)                                        forcechange=True                                 if (arg[1].get_keycode()[1]==40 or arg[1].get_keycode()[1]==116) and arg[1].get_keyval()[1]==65364:                                        forms(arg[0]).Text=(int(forms(arg[0]).Text)-1)                                                                                forcechange=True                 except:                        forcechange=False                #keycode=arg[1].get_keycode()#fuck cr in my keyboard(raspi) returns 36 not 13                #print(keycode,arg[1].get_keyval())                if type(arg[0])==Gtk.ComboBoxText or arg[1].get_keycode()[1]==13 or arg[1].get_keycode()[1]==36 or forcechange:                        prevname=self.UpdateMemFromTextBox()                        r,c= self.row[arg[0]],self.col[arg[0]]                        if r==-1:return                        #print r,c,self.values[r]                        self.HighlightSelected(r+1)                        if self.clickISR!=None:                                self.clickISR(self.values[r],prevname)#(r,c,self.values[r])                                        pass        def PlaceGridRow(self,rowdata,i=0,header=False,width=100,height=30):                rowsobject=[]                                for j,data in enumerate(rowdata):                        caption = "Btn"+str(j)+str(i)                        #btn = Gtk.Button(data)		                        ##btn = Gtk.Label()	                        ##btn.set_text(caption)                        ##btn.connect("button-press-event",self.click)                        #btn.connect("button-press-event",self.click)                        #btn.set_size_request(width,height)                        ##btn.set_markup("<b><i>"+ data +"</i></b>")                        if header:                                #btn = Gtk.Button(data)		                                btn=Gtk.Entry()                                btn.set_text(data)                                                                btn.override_color(Gtk.StateType.NORMAL, Gdk.RGBA(0,0,1,1))                                 btn.modify_bg(Gtk.StateType.NORMAL, Gdk.Color(0,0,0))                                forms(btn).Enable=False                                a=0                        else:                                                               if j==0:                                        btn=Gtk.Entry()                                        forms(btn).Text=str(data)                                        forms(btn).Enable=False                                else:                                        if len(rowdata)==3:                                                btn=Gtk.ComboBoxText()                                                if (str(data) in rowdata[2])==False:                                                        arrvalue=[str(data)]+rowdata[2]                                                else:                                                        arrvalue=rowdata[2]                                                if (str(data) in arrvalue)==True:                                                        strindex=arrvalue.index(str(data))                                                else:                                                        strindex=0                                                forms(btn).List=arrvalue                                                forms(btn).ListIndex=strindex                                        else:                                                btn=Gtk.Entry()                                                forms(btn).Text=str(data)                                                                                a=0                                                                #btn=Gtk.Entry()                                #if j==0:                                        #forms(btn).Enable=False                                #btn.set_text(str(data))                                #a=0                                if j==0:                                        btn.override_color(Gtk.StateType.NORMAL, Gdk.RGBA(0,0,1,1))                                 #btn.modify_bg(Gtk.StateType.NORMAL, Gdk.Color(0,0,0))					                        btn.connect("button-press-event",self.click)                        btn.connect('key-release-event',self.keyrelease)                        if type(btn)==Gtk.ComboBoxText:                                btn.connect('changed',self.keyrelease)                        btn.set_size_request(width,height)                                                        self.table.put(btn, (j)*width,(i)*height)                        btn.set_visible(True)	#importtant	                        self.obj.append(btn)                        self.row[btn]=i-1                        self.col[btn]=j                        rowsobject.append(btn)                        if j==1:                                break                self.table.set_size_request(2000,800)                         self.rowsobject.append(rowsobject)                        def HighlightSelected(self,row):                if row in self.rowselected:                        for btn in self.rowsobject[row]:                                btn.override_color(Gtk.StateType.NORMAL, Gdk.RGBA(0,0,0,1))                                                                 self.rowselected.remove(row)                        else:                        for btn in self.rowsobject[row]:                                btn.override_color(Gtk.StateType.NORMAL, Gdk.RGBA(1,0,0,1))                                         self.rowselected.append(row)          def HighlightRemoveAll(self):                for row in self.rowselected:                        for btn in self.rowsobject[row]:                                btn.override_color(Gtk.StateType.NORMAL, Gdk.RGBA(0,0,0,1))                                                                 self.rowselected.remove(row)                def SetValueCurrentTextbox(self,row,value):                self.rowsobject[row]                                def DeleteSelectedValues(self):                if len(self.rowselected)!=0:                        buf=[]                        for i in range(0,len(self.values)):                                if (i+1) in self.rowselected:                                        i=i                                else:                                        buf.append(self.values[i])                        self.values=buf                        self.rowselected=[]                        self.Refresh()                                         def getSelectedValues(self):                ret=[]                for a in self.rowselected:                        ret.append(self.values[a-1])                return ret        def getSelectedIndex(self):                ret=[]                for a in self.rowselected:                        ret.append(a-1)                return ret        def AddItem(self,value):                self.values.append(value)                self.Refresh()                               def AddItems(self,values):                for a in values:                        self.values.append(a)                self.Refresh()                                def click(self,*arg):                self.HighlightRemoveAll()                r,c= self.row[arg[0]],self.col[arg[0]]                if r==-1:return                if Gdk.EventType._2BUTTON_PRESS==arg[1].type:                        if self.values[r][0] in ['Enable','Visible']:                                import InputBox                                y=forms(arg[0]).Top;x=forms(arg[0]).Left                                x+=forms(arg[0].get_parent().get_parent().get_parent()).Left                                x+=forms(arg[0].get_parent().get_parent().get_parent().get_parent()).Left                                y+=forms(arg[0].get_parent().get_parent().get_parent()).Top                                #y+=forms(arg[0].get_parent().get_parent().get_parent().get_parent()).Top                                win=arg[0].get_parent().get_parent().get_parent().get_parent().get_parent().get_window()                                _,xx,yy=win.get_origin()                                                        x+=xx;y+=yy+40                                f=InputBox.Handler(self)#param                                ret=f.Show(modal=True,x=x,y=y)	                                 forms(self.rowsobject[r+1][1]).Text=ret                        if self.values[r][0].find('Color')!=-1:                                prevcolor=eval(self.values[r][1])                                                                cdia = Gtk.ColorSelectionDialog("Select color")                                colorsel = cdia.get_color_selection()                                colorsel.set_current_rgba( Gdk.RGBA(prevcolor[0],prevcolor[1],prevcolor[2],prevcolor[3]))                                                        response = cdia.run()                                if response == Gtk.ResponseType.OK:                                        colorsel = cdia.get_color_selection()                                        color =  "%0.2f"%(colorsel.get_current_rgba().red)                                        color += ",%0.2f"%(colorsel.get_current_rgba().green)                                        color += ",%0.2f"%(colorsel.get_current_rgba().blue)                                        color += ",1"#color += ",%0.2f"%(colorsel.get_current_rgba().alpha)                                        color = '(' + color +')'                                        forms(self.rowsobject[r+1][1]).Text=color                                        self.HighlightSelected(r+1)                                cdia.destroy()                        if self.values[r][0] in ['Help']:                                #import pdb;pdb.set_trace()                                try:                                        import help                                        _help=help.Handler(self)                                        for a in self.values:                                                    if a[0]=="Name":                                                        _name=a[1]                                                        x=self.prop.currentform.addedobj.NameToObjectType(_name)                                                        break                                        fname=app_path()+"/plugin/" + x.types+"/help/" + x.types + ".html"                                        if FileExist(fname):                                                 _help.OpenURL(fname,x.types)                                                _help.Show()                                except:                                        r=r                        if self.values[r][0] in ['Font']:                                #if self.values[r][1]!='':                                        #prevfont=eval(self.values[r][1])                                                        cdia = Gtk.FontSelectionDialog("Select Font")                                                                                       response = cdia.run()                                if response == Gtk.ResponseType.OK:                                        fontsel = cdia.get_font_name()                                        forms(self.rowsobject[r+1][1]).Text=fontsel                                        self.HighlightSelected(r+1)                                cdia.destroy()                                                if self.values[r][0].find('Folder')!=-1 or self.values[r][0].find('Picture')!=-1 or self.values[r][0].find('Icon')!=-1: # in ['Picture','Icon']: #if self.values[r][0] in ['Picture','Icon']:                                if self.values[r][0].find('Folder')!=-1:                                        fnameGlade=dlgFile("Select Image File",['*.png','*.jpg','*.gif'],True,FolderSelect=True)                                else:                                                fnameGlade=dlgFile("Select Image File",True,['*.png','*.jpg','*.gif'])                                if type(fnameGlade)!=int:                                        fnameGlade=fnameGlade.replace('\\','/')                                        if self.values[r][0].find('Folder')==-1:                                                fname=GetFilename(fnameGlade)                                                dst=(GetPath(self.prop.currentform.filename) + fname);dst=dst.replace('\\','/');                                                if FileExist(dst)==False:                                                        copyfile(fnameGlade, dst)                                                                                                        forms(self.rowsobject[r+1][1]).Text=GetFilename(fnameGlade)                                        else:                                                forms(self.rowsobject[r+1][1]).Text=fnameGlade                                else:                                        return                if Gtk.events_pending():                        Gtk.main_iteration()	                        Gtk.main_iteration()	                prevname=self.UpdateMemFromTextBox()                        if self.clickISR!=None:                        self.clickISR(self.values[r],prevname)#(r,c,self.values[r])                #ret=self.HighlightSelected(r+1)                                                return False        def UpdateMemFromTextBox(self):                ret=""                for index,a in enumerate(self.values):                        val=forms(self.rowsobject[index+1][1]).Text                        if a[0]=='Name':                                if a[1]!=val:                                        ret=a[1]#name of control has change                        a[1]=val                 return ret                def Refresh(self):                self.Display(self.fields, self.values, None)        def Display(self,fields,listdata,_checkbox):                for a in self.obj:                        self.table.remove(a)                                 self.obj=[]                self.row={}                self.col={}                self.rowsobject=[]                self.rowselected=[]                self.values=deepcopy(listdata)                self.fields=deepcopy(fields)                  self.PlaceGridRow(self.fields,0,True)		                self.table.set_size_request(100*len(self.fields),(len(self.values)+1)*31)                 for i,rowdata in enumerate(self.values):                        self.PlaceGridRow(rowdata,i+1)                                           class Handler:        def __init__(self,clickISR=None,checkbox=False):                self.clickISR=clickISR                builder = Gtk.Builder()                builder.add_from_file("DataGrid.glade")                builder.connect_signals(self)                self.win=[]                self.liststore1 = builder.get_object("liststore1")                self.window1 = builder.get_object("window1")                self.win.append(self.window1)                self.layout1 = builder.get_object("layout1")                self.usercontrol = builder.get_object("usercontrol")                self.alignment1 = builder.get_object("alignment1")                self.scrolledwindow1 = builder.get_object("scrolledwindow1")                self.treeview1 = builder.get_object("treeview1")                self.label1 = builder.get_object("label1")                self.liststore1 = builder.get_object("liststore1")                self.window1 = builder.get_object("window1")                self.win.append(self.window1)                self.layout1 = builder.get_object("layout1")                self.checkbox=checkbox                self.grid=TreeViewFilterWindow(self.scrolledwindow1,checkbox=False,clickISR=self.clickISR,currentForm=self)        def on_changedx(self, *selection):	#assuming we only have two columns in our liststore                # get the model and the iterator that points at the data in the model                #(model, iter) = selection.get_selected()                # set the label to a new value depending on the selection                ret=[]                try:                        for a in model[iter]:                                ret.append(a)                except:                        ret=[]                return ret                        def on_changed(self, selection):	#assuming we only have two columns in our liststore                # get the model and the iterator that points at the data in the model                (model, iter) = selection.get_selected()                # set the label to a new value depending on the selection                ret=[]                try:                        for a in model[iter]:                                ret.append(a)                        if self.clickISR!=None:                                       self.clickISR(ret)                                                except:                        ret=[]                return ret                                def isAllWinClose(self):                for a in self.win:                        if a.get_visible()==True:                                return False                return True        def window1_show(self):                self.window1.show_all()        def Widget(self):                if self.usercontrol in self.layout1.get_children():                        self.layout1.remove(self.usercontrol)                return self.usercontrol        def WidgetSetSize(self,width,height):                self.usercontrol.set_size_request(width,height)        def WidgetSize(self):                return {'width':self.usercontrol.get_size_request()[0],'height':self.usercontrol.get_size_request()[1]}        def Hide(self):                self.usercontrol.hide()        def Show(self):                self.usercontrol.show()        def DataSource(self,db,sql):                asc=getTable(sql,"select")                #if asc=="*":                #        cols=getFields(db,table)                #else:                #        cols=[]                table=getTable(sql)                cols=getFields(db,table)                                                        rec=getRecords(db,sql)                self.grid.Display(cols,rec,False)                #example: Add Two usercontrol to your main form        #at the very end of your class Handler: constructor(def __init__(self))        #x=myWidget.Handler()						#first instance of your usercontrol        #y=myWidget.Handler()						#second instance of your usercontrol        #self.layout1.put(x.Widget(),0,0)				#add first usercontrol to your main form        #self.layout1.put(y.Widget(),0+x.WidgetSize()["width"]+5,0)	#add second usercontrol to your main form        #self.myusercontrol1=x						#add reference so we can access this control within this class        #self.myusercontrol2=y						#add reference so we can access this control within this class#	Generated By Glade To Python: by Rocky Nuarin, Aug 2017 Phils#	#####################www.WireThemAll.com#####################if __name__ == "__main__":        _DataGrid = Handler()        _DataGrid.window1_show()        Gtk.main()