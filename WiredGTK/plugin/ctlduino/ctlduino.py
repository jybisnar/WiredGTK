import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'pin': '23'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._pin=18		self.Button1.Visible=False		self.Button2.Visible=False		self.Button1Event.Visible=False		self.Button2Event.Visible=False		pinMode(self._pin,INPUT)				self.Button1.set_tooltip_text("Force HIGH")		self.Button2.set_tooltip_text("Force LOW")		self.btnoutput.set_tooltip_text("OUTPUT MODE")		self.btninput.set_tooltip_text("INPUT MODE")		self.btninputpullup .set_tooltip_text("INPUT PULLUP MODE")	@property		def pin(self):		return self._pin	@pin.setter		def pin(self,value):		self._pin=int(value)		self.Entry1.Text=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pinMode(self._pin,INPUT)		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if digitalRead(self._pin)==HIGH:			self.CheckButton1.Text='True'		else:			self.CheckButton1.Text='False'		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Font': '10', 'Name': 'Entry1', 'Height': '25', 'Text': '18', 'BackColor': '(1,1,1,1)', 'Width': '35', 'Picture': '', 'Top': '0', 'Events': '[changed]', 'Left': '1', 'ParentsType': '', 'Tag': '', 'Alignment': '', 'Visible': 'True', 'Enable': 'False', 'ForeColor': '(0,0,0,1)'}","Entry","usercontrol","[['changed', 'self,e']]")		self.create("{'Font': '', 'Name': 'CheckButton1', 'Height': '20', 'Text': 'CheckButton1', 'BackColor': '(1,1,1,1)', 'Width': '20', 'Picture': '', 'Top': '1', 'Events': '[]', 'Left': '91', 'ParentsType': '', 'Tag': '', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)'}","CheckButton","usercontrol","[]")		self.create("{'Font': '', 'Name': 'Button1', 'Height': '25', 'Text': '', 'BackColor': '(1,0,0,1)', 'Width': '25', 'Picture': '', 'Top': '0', 'Events': '[button-press-event]', 'Left': '40', 'ParentsType': '', 'Tag': '', 'Alignment': '', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Font': '', 'Name': 'Button2', 'Height': '25', 'Text': '', 'BackColor': '(0,0,0,1)', 'Width': '25', 'Picture': '', 'Top': '0', 'Events': '[button-press-event]', 'Left': '65', 'ParentsType': '', 'Tag': '', 'Alignment': '', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Font': '', 'Name': 'btnoutput', 'Height': '25', 'Text': '', 'BackColor': '(0,0,1,1)', 'Width': '25', 'Picture': '', 'Top': '0', 'Events': '[button-press-event]', 'Left': '110', 'ParentsType': '', 'Tag': '', 'Alignment': '', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Font': '', 'Name': 'btninput', 'Height': '25', 'Text': '', 'BackColor': '(0,1,0,1)', 'Width': '25', 'Picture': '', 'Top': '0', 'Events': '[button-press-event]', 'Left': '135', 'ParentsType': '', 'Tag': '', 'Alignment': '', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[['button-press-event', 'self,event,e']]")		self.create("{'Font': '', 'Name': 'btninputpullup', 'Height': '25', 'Text': '', 'BackColor': '(1,0,1,1)', 'Width': '25', 'Picture': '', 'Top': '0', 'Events': '[button-press-event]', 'Left': '160', 'ParentsType': '', 'Tag': '', 'Alignment': '', 'Visible': 'True', 'Enable': 'True', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[['button-press-event', 'self,event,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_button_press_event(self,event,e):		pinMode(int(self.Entry1.Text),OUTPUT)		digitalWrite(int(self.Entry1.Text),HIGH)		pass	def Button2_button_press_event(self,event,e):		pinMode(int(self.Entry1.Text),OUTPUT)		digitalWrite(int(self.Entry1.Text),LOW)		pass	def Label2_button_press_event(self,event,e):		pass	def btnoutput_button_press_event(self,event,e):		self.Button1.Visible=True		self.Button2.Visible=True		self.Button1Event.Visible=True		self.Button2Event.Visible=True		#pinMode(self._pin,INPUT)		self.CheckButton1.Text=False		#self.CheckButton1.Visible=False		pinMode(self._pin,OUTPUT)		digitalWrite(self._pin,LOW)	def btninput_button_press_event(self,event,e):		self.Button1.Visible=False		self.Button2.Visible=False		self.Button1Event.Visible=False		self.Button2Event.Visible=False		pinMode(self._pin,INPUT)		#self.CheckButton1.Visible=True	def btninputpullup_button_press_event(self,event,e):		self.Button1.Visible=False		self.Button2.Visible=False		self.Button1Event.Visible=False		self.Button2Event.Visible=False		pinMode(self._pin,INPUT_PULLUP)		#self.CheckButton1.Visible=True		pass	def Entry1_changed(self,e):		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()