import gi
import time
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk,GObject,Gdk,Pango,GLib
from wta_module import *
#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils
#	#####################www.WireThemAll.com#####################

class Handler(usercontrol):
	#WiredEvent def usercontrolevent(self,value)	#add more events 
	#WiredProperty 'usercontrolproperty': 'sample only'	
	def __init__(self,*param):			
		initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)
		self.GTKForms()
		super().__init__(self.usercontrol)
		self.sch=Scheduler(500)#500 ms
		self.sch.Start()
		self._text=''
		self._usercontrolproperty=''
		self.Tab.arrangetabs()
	@property	
	def usercontrolproperty(self):
		return self._usercontrolproperty
	@usercontrolproperty.setter	
	def usercontrolproperty(self,value):
		self._usercontrolproperty=value
	def connect(self,ev,evusr):
		self.wiredevents.update({ev:evusr})
	def activeXcreated(self,*args):
		pass
	def unload(self,*args):
		destroy=True
		if destroy==True:
			GLib.source_remove(self.timeout_id)
			self._window.hide()
			del self._window
			#ExitApplication() #activate this if u want to destroy this window
			return False
		else:
			self.window.Visible=False
			return True		
	def loop(self, user_data):
		if self.form_load==False:
			self.form_load=True
		if self.sch.Event():#timer routine
			#code here
			if self.timeoutdestroy!=-1:
				self.timeoutdestroy-=1
				if self.timeoutdestroy==0:
					self.unload(None)
			self.sch.Start()#restart scheduler
		return True	#return true so that main_loop can call it again 	
	def create(self,prop,control,parent,event=[]):
		createWidget(self,prop,control,parent,event)
	def GTKForms(self):
		self.create("{'Name': 'Tab', 'Text': 'Tab1', 'Top': '0', 'Left': '0', 'Width': '380', 'Height': '220', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(0, 0.09004361682639883, 0.4684644537518319, 0.5)', 'ForeColor': '(0,0,0,1)', 'Picture': 'Tab.png', 'Events': '[]', 'Tag': 'Activex', 'ParentsType': '', 'Var': '', 'Help': '', 'TabVisible': 'True', 'BackColorTab': '(1,1,1,0)'}","Tab","usercontrol","[]")
		self.create("{'Name': 'Websocket21', 'Text': 'ctlWebsocket21', 'Top': '235', 'Left': '270', 'Width': '30', 'Height': '30', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(0, 0.13043537062429844, 0.9380628203960197, 0.5)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': 'Activex', 'ParentsType': '', 'Var': '', 'Help': '', 'url': 'new.testonlineproject.com:5000', 'ID': '123', 'ClientID': '456'}","ctlWebsocket2","usercontrol","[]")
		self.create("{'Name': 'ctlarduino1', 'Text': 'ctlarduino1', 'Top': '240', 'Left': '80', 'Width': '30', 'Height': '30', 'Visible': 'True', 'Enable': 'True', 'Font': '', 'BackColor': '(0, 0.3731428535872404, 0.48386269779705604, 0.5)', 'ForeColor': '(0,0,0,1)', 'Picture': '', 'Events': '[]', 'Tag': 'Activex', 'ParentsType': '', 'Var': '', 'Help': ''}","ctlarduino","usercontrol","[]")
	def Widget(self):
		if self._usercontrol in self._mainlayout.get_children():
			self._mainlayout.remove(self._usercontrol)
		return self._usercontrol
	def Hide(self):
		self._window.hide()
	def Show(self,modal=False,x=None,y=None):
		if x!=None:
			self._window.move(x,y)
		if modal and self.caller!=None:
			self._window.set_transient_for(self.caller._window)
		self._window.set_modal(modal)
		self._window.show()
		Gtk.main()
		return ""#put ur return value here upon closing this form
if __name__ == "__main__":
	_m = Handler()
	_m._window.show()
	Gtk.main()