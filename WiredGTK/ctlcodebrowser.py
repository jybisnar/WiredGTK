import giimport timegi.require_version('Gtk', '3.0')gi.require_version('GtkSource', '3.0')from gi.repository import Gtk,GObject,Gdk,GdkPixbuf,Pango,GLib,GtkSourcetry:	from wired_module import *except:	from wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################import astdef getdefOrclass(ast_data):#returns array of two data; 1=ast of either class or def(function) and 2=name of either class or def(function) 	#from ast_data , ie [[x,y]..] where x= ast y = name w/ param , this does not include sub tree	ret=[]	for i,body in enumerate(ast_data.body):		if body.__class__ == ast.ClassDef:			#func=getFunctionCall(body, mod_path)			cname=x=eval('body.'+ ast.ClassDef.__dict__['_fields'][0])			ret.append([body,cname])		if body.__class__ == ast.FunctionDef:			try:				x=eval('body.'+ ast.FunctionDef.__dict__['_fields'][0])				args=''				for a in range(len(body.args.args)):					args+=body.args.args[a].arg+','				if args!='':    					args=args[:-1]    				x=x+"("+args+")"    				ret.append([body,x])			except:				#print("AST error parsing line %r for %r" % ('12', mod_path))				import traceback    				traceback.print_exc()	def takeSecond(elem):		return elem[1].casefold()#elem[1]		ret = sorted(ret, key=takeSecond)					return retdef ASTRootFileOrcode(mod_path,code=None):	ast_data=None	ModuleType = type(ast)	if code==None:		with open(mod_path, "r") as file_mod:			data = file_mod.read()	else:		data=code	try:		if code==None:			ast_data = ast.parse(data, filename=mod_path)		else:			ast_data = ast.parse(data)	except:		#print("Syntax error 'ast.parse' can't read %r" % mod_path)		#import traceback		#traceback.print_exc()		a=0	return ast_datadef getclassdefname(namewparam):	index=namewparam.find("(")	if index!=-1:		return namewparam[0:index]	else:		return namewparamdef deepsearch(lst,ast,retast=None):# lst is array tree, eg ['Hadler','Widget']	ast_name=getdefOrclass(ast)	for j,a in enumerate(lst):		for i,b in enumerate(ast_name):			if getclassdefname(b[1])==a:				if len(lst)==1:#last node in tree list					retast.append(ast_name[i][0])					break				else:						deepsearch(lst[j+1:],ast_name[i][0],retast)					break		if len(retast)!=0: break	def find(lst,code):# lst is array tree, eg ['Hadler','Widget']	astroot=ASTRootFileOrcode("",code)	retast=[]	deepsearch(lst,astroot,retast)	if len(retast)!=0:		_ast=retast[0]		startline=_ast.lineno		while(1):			_ast=_ast.body[len(_ast.body)-1]			if _ast.__class__!=ast.ClassDef and _ast.__class__!=ast.FunctionDef:				break				endline=_ast.lineno		return startline,endline	return -1,-1def replace(lst,code,replace):# lst is array tree, eg ['Hadler','Widget']	startline,endline=find(lst, code)	if startline!=-1:		newcode=''		arr=code.split('\n')		for a in range(startline-1):			newcode+=arr[a]+"\n"		newcode+=replace+"\n"		for a in range(endline,len(arr)):			newcode+=arr[a]+"\n"				return newcode[:-1]	return codedef insert(lst,code,insert):# lst is array tree, eg ['Hadler','Widget']	startline,endline=find(lst, code)	if startline!=-1:		newcode=''		arr=code.split('\n')		for a in range(endline-1):			newcode+=arr[a]+"\n"		newcode+=insert+"\n"		for a in range(endline,len(arr)):			newcode+=arr[a]+"\n"					return newcode[:-1]	return codedef getRoutinCode(lst,code):	startline,endline=find(lst, code)	if startline!=-1:		newcode=''		arr=code.split('\n')		for a in range(startline-1,endline):			newcode+=arr[a]+"\n"			return newcode[:-1]	return code#must be \n only#lineno=find(["Handler","loop"],GetFileStr('123.bas')[4:])	#lineno=find(["Handler","loop"],GetFileStr('ctlcodebrowser.py'))	#newcode=getRoutinCode(["Handler"],GetFileStr('ctlcodebrowser.py'))	#newcode=getRoutinCode(["Handler","loop"],GetFileStr('ctlcodebrowser.py'))	#newcode=replace(["Handler","loop"],GetFileStr('ctlcodebrowser.py'),"\tdef rakster(self)\r\n\t\tpass")#newcode=insert(["Handler","loop"],GetFileStr('ctlcodebrowser.py'),"\t\tx+=1\r\n")#lineno=find(["codebrowser"],GetFileStr('ctlcodebrowser.py'))	#lineno=find(["codebrowser","__init__","donna"],GetFileStr('ctlcodebrowser.py'))	#lineno=find(["codebrowser","__init__","donna","raks"],GetFileStr('ctlcodebrowser.py'))	class codebrowser:	def __init__(self,widgetparent,ast=None,caller=None):		def donna():			def raks():				pass			pass		self.numlevel=0		self.lst=[]		self.numlevellst={}		self.usercontrol=widgetparent		self.caller=caller		pass	def mreateCombo(self,ast):		cbo=Gtk.ComboBoxText()		self.usercontrol.put(cbo,self.numlevel*150,0)		forms(cbo).Width=100		forms(cbo).Visible=True		lst=[a[1] for a in ast]		ast=[a[0] for a in ast]		forms(cbo).List=lst		cbo.connect("changed",self.clicked)		self.numlevellst.update({cbo:[self.numlevel,ast]})		self.numlevel+=1		pass	def clear(self,clickedlevel=-1):		if self.numlevel>=clickedlevel+2:			pop=[]			for a in self.numlevellst:				if self.numlevellst[a][0]>clickedlevel:					pop.append(a)			for a in pop:				forms(a).Visible=False				self.numlevellst.pop(a)				del a			self.numlevel=clickedlevel+1			def clicked(self,*args):		hassubselection=True		clickedlevel=self.numlevellst[args[0]][0]		cboindex=forms(args[0]).ListIndex		value=self.numlevellst[args[0]][1][cboindex]		print(value)		#if self.numlevel>=clickedlevel+2:			#pop=[]			#for a in self.numlevellst:				#if self.numlevellst[a][0]>clickedlevel:					#pop.append(a)			#for a in pop:				#forms(a).Visible=False				#self.numlevellst.pop(a)				#del a			#self.numlevel=clickedlevel+1		self.clear(clickedlevel)			if(hassubselection):			lst=getdefOrclass(value)			if len(lst)!=0:				self.mreateCombo(lst)		if self.caller!=None:			if 'clicked' in self.caller.wiredevents:				self.caller.wiredevents['clicked'](value)		print(value.name,value.lineno)		passclass Handler(usercontrol):	#WiredEvent def clicked(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.cb=codebrowser(self.usercontrol,ast=None, caller=self)		self.browse()				def browse(self,code=None):		self.cb.clear()		if code==None:			#code=GetFileStr("ctlcodebrowser.py")				return		astroot=ASTRootFileOrcode("",code)		lst=getdefOrclass(astroot)		self.cb.mreateCombo(lst)			@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):			pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Left': '27', 'Visible': 'True', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Width': '100', 'Height': '50', 'BackColor': '(1,1,1,1)', 'Tag': '', 'Font': '', 'ParentsType': '', 'Events': '[clicked]', 'Text': 'Button1', 'Enable': 'True', 'Name': 'Button1', 'Top': '87'}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_clicked(self,e):		self.browse(code=None)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()