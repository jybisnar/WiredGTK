import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibgi.require_version('Poppler','0.18')from gi.repository import Popplerfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.page=None	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.ScrolledWindow1.Width=self.usercontrol.Width		self.ScrolledWindow1.Height=self.usercontrol.Height		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):				self.create("{'Width': '320', 'Enable': 'True', 'Font': '', 'BackColor': '(0, 0.6418589671623566, 0.721718607325271, 0.5)', 'Height': '320', 'ForeColor': '(0,0,0,1)', 'Events': '[[, ]]', 'Visible': 'True', 'Top': '-3', 'Tag': '', 'ParentsType': '', 'Name': 'ScrolledWindow1', 'Picture': '', 'Text': 'ScrolledWindow1', 'Left': '-3'}","ScrolledWindow","usercontrol","[]")		self.create("{'Width': '285', 'Enable': 'True', 'Font': '', 'BackColor': '(1,1,1,1)', 'Height': '242', 'ForeColor': '(0,0,0,1)', 'Events': '[[, ]]', 'Visible': 'True', 'Top': '24', 'Tag': '', 'ParentsType': 'ScrolledWindow', 'Name': 'Viewport1', 'Picture': '', 'Text': 'Viewport1', 'Left': '15'}","Viewport","ScrolledWindow1","[]")		self.create("{'Width': '243', 'Enable': 'True', 'Font': '', 'BackColor': '(0, 0.8297594780144331, 0.28058569943606226, 0.5)', 'Height': '161', 'ForeColor': '(0,0,0,1)', 'Events': '[draw]', 'Visible': 'True', 'Top': '27', 'Tag': '', 'ParentsType': 'Viewport', 'Name': 'Layout1', 'Picture': '', 'Text': 'Layout1', 'Left': '14'}","Layout","Viewport1","[['draw', 'self,widget,surface']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Layout1_draw(self,widget,surface):		if self.page!=None:			w,h=self.page.get_size()			self.Layout1.set_size_request(w,h)			self.page.render(surface)		pass	def open(self,file):		#document = Poppler.Document.new_from_file("file:///c:///a.pdf", None)		self.document = Poppler.Document.new_from_file("file:///" +  file, None)		self.page = self.document.get_page(0)		self.Layout1.queue_draw()	def Button1_clicked(self,e):		self.open(app_path()+"/" +"sample.pdf")		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()