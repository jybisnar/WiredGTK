import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def gpsReady(self,lat,lon,status,time)	#add more events 	#WiredProperty 'Port': 'COM4','list':["COM4","COM5","COM6","Banana"]	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()			self.parse1=Parser("$GPRMC,", '\r', 1, _sizeofdata=20)		self.status=''		self.lat=''		self.lon=''		self.time=''	def Open(self):		self.serialport1.Open=True	def Close(self):		self.serialport1.Open=False		@property		def Port(self):		return self.serialport1.Port	@Port.setter		def Port(self,value):			self.serialport1.Port=value			def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		GLib.source_remove(self.timeout_id)		self._window.hide()		del self._window		Gtk.main_quit()			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Visible': 'True', 'Text': 'serialport1', 'Setting': '4800,n,8,1', 'Picture': '', 'Tag': 'Activex', 'Enable': 'True', 'Font': '', 'Width': '32', 'BackColor': '(0, 0.14977258970565266, 0.5384189191095536, 0.5)', 'ParentsType': '', 'Port': 'COM5', 'Top': '63', 'Events': '[CommEvent]', 'Height': '23', 'Name': 'serialport1', 'Left': '23', 'ForeColor': '(0,0,0,1)', 'Open': ''}","SerialPort","usercontrol","[['CommEvent', 'self,e']]")		self.create("{'Visible': 'True', 'Text': 'btnOpen', 'Picture': '', 'Tag': '', 'Enable': 'True', 'Font': '', 'Width': '100', 'BackColor': '(1,1,1,1)', 'ParentsType': '', 'Top': '133', 'Events': '[clicked]', 'Height': '50', 'Name': 'btnOpen', 'Left': '24', 'ForeColor': '(0,0,0,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Visible': 'True', 'Text': 'txtRX', 'Picture': '', 'Tag': '', 'Enable': 'True', 'Font': '', 'Width': '273', 'BackColor': '(1,1,1,1)', 'ParentsType': '', 'Top': '233', 'Events': '[[, ]]', 'Height': '39', 'Name': 'txtRX', 'Alignment': '', 'Left': '29', 'ForeColor': '(0,0,0,1)'}","Entry","usercontrol","[]")		self.create("{'Visible': 'True', 'Text': 'btnSend', 'Picture': '', 'Tag': '', 'Enable': 'True', 'Font': '', 'Width': '100', 'BackColor': '(1,1,1,1)', 'ParentsType': '', 'Top': '193', 'Events': '[clicked]', 'Height': '30', 'Name': 'btnSend', 'Left': '27', 'ForeColor': '(0,0,0,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Visible': 'True', 'Text': 'txtSend', 'Picture': '', 'Tag': '', 'Enable': 'True', 'Font': '', 'Width': '170', 'BackColor': '(1,1,1,1)', 'ParentsType': '', 'Top': '195', 'Events': '[[, ]]', 'Height': '30', 'Name': 'txtSend', 'Left': '131', 'ForeColor': '(0,0,0,1)'}","Entry","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def getAngle(self,falcom):		falcom=float(falcom)		Hours = int(falcom / 100);		falcom1 = falcom - Hours * 100;		B=falcom1;		xx=Hours+(falcom1/60);		return xx;		def serialport1_CommEvent(self,e):		while(e.available()):			c= e.read()			c=c.decode()			if self.parse1.available(c)==True:				self.txtRX.Text = self.parse1.data				self.status=self.parse1.data[11] 				self.lat= self.getAngle( self.parse1.data[13:13+9])				self.lon=self.getAngle( self.parse1.data[13+9+3:13+9+3+10])				self.time=self.parse1.data[0:0+10]				self.window.Text=self.status + ' ' + str(self.lat) +"N" + str(self.lon)+"E"				if self.caller!=None:					if 'gpsReady' in self.wiredevents:						self.wiredevents['gpsReady'](self.lat,self.lon,self.status,self.time)		pass	def btnOpen_clicked(self,e):		self.serialport1.Open=True		pass	def btnSend_clicked(self,e):		s=self.txtSend.Text+'\r'		self.serialport1.prints(s.encode())		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()