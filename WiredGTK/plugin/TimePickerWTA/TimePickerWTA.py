import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def click(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		mid=self.Label1.Width/2		quarter=self.Label1.Width/6		self.Label2.Left=self.Label1.Width/10		self.Label2Event.Left=self.Label2.Left		self.pos=0		self.f=0		self.s=0		self.t=0	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	@property		def Text(self):		return self.Label1.Text	@Text.setter		def Text(self,value):		try:			self.f=int(getCSV(0,":",value))			self.s=int(getCSV(1,":",value))			self.t=int(getCSV(2,":",value))		except:				value=TimeToString()			self.f=int(getCSV(0,":",value))			self.s=int(getCSV(1,":",value))			self.t=int(getCSV(2,":",value))		self.Label1.Text="%02d" % self.f + ":" + "%02d" % self.s + ":" +"%02d" % self.t	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Events': '[button-release-event]', 'Name': 'Label1', 'Width': '73', 'Font': 'Sans Bold 12', 'Top': '0', 'Text': '00:00:00', 'Tag': '', 'Height': '30', 'Visible': 'True', 'Alignment': 'CENTER', 'Left': '1', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Enable': 'True', 'ParentsType': '', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[['button-release-event', 'self,event,e']]")		self.create("{'Events': '[clicked]', 'Name': 'Button1', 'Width': '35', 'Font': '', 'Top': '0', 'Text': '-', 'Tag': '', 'Height': '32', 'Visible': 'True', 'Left': '74', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Enable': 'True', 'ParentsType': '', 'ForeColor': '(0,0,0,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Events': '[clicked]', 'Name': 'Button2', 'Width': '37', 'Font': '', 'Top': '0', 'Text': '+', 'Tag': '', 'Height': '32', 'Visible': 'True', 'Left': '112', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Enable': 'True', 'ParentsType': '', 'ForeColor': '(0,0,0,1)'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Events': '[]', 'Name': 'Label2', 'Width': '17', 'Font': '', 'Top': '4', 'Text': '', 'Tag': '', 'Height': '20', 'Visible': 'True', 'Alignment': '', 'Left': '0', 'Picture': '', 'BackColor': '(0.98,0.04,0.04,0.2)', 'Enable': 'True', 'ParentsType': '', 'ForeColor': '(0,0,0,1)'}","Label","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button2_clicked(self,e):		if self.pos==0:			v=self.f			v+=1			if v==24:v=23			self.f=v					if self.pos==1:			v=self.s			v+=1			if v==60:v=59			self.s=v		if self.pos==2:			v=self.t			v+=1			if v==60:v=59			self.t=v		self.Label1.Text="%02d" % self.f + ":" + "%02d" % self.s + ":" +"%02d" % self.t		if self.caller!=None:			if 'click' in self.wiredevents:				self.wiredevents['click'](self.Text)		pass	def Button1_clicked(self,e):		if self.pos==0:			v=self.f			v-=1			if v==-1:v=0			self.f=v					if self.pos==1:			v=self.s			v-=1			if v==-1:v=0			self.s=v		if self.pos==2:			v=self.t			v-=1			if v==-1:v=0			self.t=v		self.Label1.Text="%02d" % self.f + ":" + "%02d" % self.s + ":" +"%02d" % self.t		if self.caller!=None:			if 'click' in self.wiredevents:				self.wiredevents['click'](self.Text)		pass	def Entry1_click(self,event,e):		self.pos=0		pass	def Entry2_click(self,event,e):		self.pos=1		pass	def Entry3_click(self,event,e):		self.pos=2		pass	def Label1_button_release_event(self,event,e):		#self.window.Text=str(e.get_coords())+" " + str(self.Label1.Width)		mid=self.Label1.Width/2		quarter=self.Label1.Width/6				if Constrain(e.get_coords()[0], mid-quarter, mid+quarter)==e.get_coords()[0]:			#self.window.Text="2"			self.Label2.Left=self.Label1.Width/2.5						self.pos=1		elif e.get_coords()[0]<mid:			#self.window.Text="1"			self.Label2.Left=self.Label1.Width/10			self.pos=0				else:			#self.window.Text="3"			self.pos=2			self.Label2.Left=self.Label1.Width/3*2.1		self.Label2Event.Left=self.Label2.Left		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()