import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	#WiredEvent def DistanceAquired(self,dist_mm)	#WiredProperty 'Port': '/dev/ttyS0'	def __init__(self,*param):		initUI(self,param,w=500,h=500,title="WiredGTKV1.0 Serial Sample1")		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self.buff=[]					self._Port=""	@property	def Open(self):		pass	@Open.setter		def Open(self,value):		self.SerialPort1.Open=value	@property	def Port(self):		return self._Port	@Port.setter		def Port(self,value):		self._Port=value		self.SerialPort1.Port=value	def unload(self,*args):		GLib.source_remove(self.timeout_id)		self._window.hide()		del self._window		Gtk.main_quit()			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Name': 'SerialPort1', 'Port': '/dev/ttyS0', 'Setting': '9600,n,8,1', 'Height': '23', 'Var': '', 'Font': '', 'Open': '', 'ParentsType': '', 'Top': '50', 'Tag': 'Activex', 'Picture': '', 'Help': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.4439179214183796, 0.7743018762922695, 0.5)', 'Events': '[CommEvent]', 'Enable': 'True', 'Visible': 'True', 'Left': '56', 'Text': 'SerialPort1', 'Width': '32'}","SerialPort","usercontrol","[['CommEvent', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False):		self._window.set_modal(modal)		self._window.show()		Gtk.main()	def SerialPort1_CommEvent(self,e):		while(e.available()):			#import pdb;pdb.set_trace();			cc= e.read()			self.buff.append(int.from_bytes(cc,byteorder='big'))			if len(self.buff)==2:				self.window.Text=str(self.buff[0]*100+self.buff[1])				dist_mm=self.window.Text				self.buff=[]				if self.caller!=None and 'DistanceAquired' in self.wiredevents:					self.wiredevents['DistanceAquired'](dist_mm)			#c=c.decode()						#self.txtRX.Text+= c		pass	def GetDistance(self):		self.SerialPort1.print("U")if __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()