import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.Tab.arrangetabs()	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		import Tab		self.Tab=Tab.Handler		self.create("{'BackColor': '(0, 0.09004361682639883, 0.4684644537518319, 0.5)', 'BackColorTab': '(1,1,1,0)', 'Left': '0', 'Text': 'Tab1', 'Enable': 'True', 'Name': 'Tab', 'Events': '[[, ]]', 'Width': '380', 'ForeColor': '(0,0,0,1)', 'ParentsType': '', 'Visible': 'True', 'TabVisible': 'False', 'Height': '220', 'Picture': 'Tab.png', 'Help': '', 'Top': '410', 'Font': '', 'Tag': 'Activex', 'Var': ''}","Tab","usercontrol","[]")		import ctlarduino		self.ctlarduino1=ctlarduino.Handler		self.create("{'BackColor': '(0, 0.3731428535872404, 0.48386269779705604, 0.5)', 'Left': '0', 'Text': 'ctlarduino1', 'Enable': 'True', 'Name': 'ctlarduino1', 'Events': '[[, ]]', 'Width': '30', 'ForeColor': '(0,0,0,1)', 'usercontrolproperty': '', 'ParentsType': '', 'Visible': 'True', 'Height': '30', 'Picture': '', 'Help': '', 'Top': '370', 'Font': '', 'Tag': 'Activex', 'Var': ''}","ctlarduino","usercontrol","[]")		import ctlOnline		self.ctlOnline1=ctlOnline.Handler		self.create("{'BackColor': '(0, 0.0816836384367462, 0.33045200925009777, 0.5)', 'Left': '40', 'Text': 'ctlOnline1', 'Enable': 'True', 'Name': 'ctlOnline1', 'Events': '[[, ]]', 'Width': '30', 'ForeColor': '(0,0,0,1)', 'usercontrolproperty': 'sample only', 'ParentsType': '', 'Visible': 'True', 'Height': '30', 'Picture': '', 'Help': '', 'Top': '370', 'Font': '', 'Tag': 'Activex', 'Var': ''}","ctlOnline","usercontrol","[]")		self.Label1=forms		self.create("{'BackColor': '(1,1,1,1)', 'Left': '35', 'Text': 'Label1', 'Enable': 'True', 'Name': 'Label1', 'Events': '[[, ]]', 'Width': '210', 'ForeColor': '(0,0,0,1)', 'Alignment': 'CENTER', 'ParentsType': '', 'Visible': 'True', 'Height': '30', 'Picture': '', 'Help': '', 'Top': '70', 'Font': '', 'Tag': '', 'Var': ''}","Label","usercontrol","[]")		self.Label2=forms		self.create("{'BackColor': '(1,1,1,1)', 'Left': '35', 'Text': 'Label2', 'Enable': 'True', 'Name': 'Label2', 'Events': '[[, ]]', 'Width': '210', 'ForeColor': '(0,0,0,1)', 'Alignment': 'CENTER', 'ParentsType': '', 'Visible': 'True', 'Height': '30', 'Picture': '', 'Help': '', 'Top': '100', 'Font': '', 'Tag': '', 'Var': ''}","Label","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this formif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()