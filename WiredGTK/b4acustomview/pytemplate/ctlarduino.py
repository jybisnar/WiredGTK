import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=475,h=250,title="Medicine Dispenser",controlbox=True,startpos=(0,0),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(1000*10)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''			self.parse1=Parser("WTA",'\r',1,100)		self.ConnectSerial('/dev/ttyUSB0')		self.hastare=False	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine						#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		import SerialPort		self.SerialPort1=SerialPort.Handler		self.create("{'Text': 'SerialPort1', 'Picture': 'SerialPort.png', 'Left': '140', 'Name': 'SerialPort1', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'Setting': '9600,n,8,1', 'ParentsType': '', 'Var': '', 'Tag': 'Activex', 'Open': 'False', 'Port': 'ttyUSB0', 'Width': '160', 'Help': '', 'Enable': 'True', 'Height': '30', 'BackColor': '(0, 0.9679655699784422, 0.8827200630035124, 0.5)', 'Top': '80', 'Font': '', 'Events': '[CommEvent]'}","SerialPort","usercontrol","[['CommEvent', 'self,e']]")		self.ComboBoxText1=forms		self.create("{'Text': 'ComboBoxText1', 'Picture': '', 'Left': '310', 'Name': 'ComboBoxText1', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'ParentsType': '', 'Var': '', 'Tag': '', 'Width': '100', 'Help': '', 'Enable': 'True', 'Height': '25', 'BackColor': '(1,1,1,1)', 'Top': '75', 'Font': '', 'Events': '[[, ]]'}","ComboBoxText","usercontrol","[]")		self.Button1=forms		self.create("{'Text': 'open ports', 'Picture': '', 'Left': '135', 'Name': 'Button1', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'ParentsType': '', 'Var': '', 'Tag': '', 'Width': '100', 'Help': '', 'Enable': 'True', 'Height': '50', 'BackColor': '(1,1,1,1)', 'Top': '125', 'Font': '', 'Events': '[clicked]'}","Button","usercontrol","[['clicked', 'self,e']]")		import Timer		self.Timer1=Timer.Handler		self.create("{'Text': 'Timer1', 'Picture': 'Timer.png', 'Left': '315', 'Name': 'Timer1', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'ParentsType': '', 'Var': '', 'Tag': 'Activex', 'Interval': '1000', 'Width': '35', 'Help': '', 'Enable': 'True', 'Height': '30', 'BackColor': '(0, 0.23151533446815142, 0.06479336439450101, 0.5)', 'Top': '145', 'Font': '', 'Events': '[Tick]'}","Timer","usercontrol","[['Tick', 'self']]")		self.Label1=forms		self.create("{'Text': 'Label1', 'Picture': '', 'Left': '410', 'Name': 'Label1', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'ParentsType': '', 'Var': '', 'Tag': '', 'Alignment': '', 'Width': '100', 'Help': '', 'Enable': 'True', 'Height': '30', 'BackColor': '(1,1,1,1)', 'Top': '30', 'Font': '', 'Events': '[[, ]]'}","Label","usercontrol","[]")		self.Button2=forms		self.create("{'Text': 'Button2', 'Picture': '', 'Left': '135', 'Name': 'Button2', 'ForeColor': '(0,0,0,1)', 'Visible': 'True', 'ParentsType': '', 'Var': '', 'Tag': '', 'Width': '100', 'Help': '', 'Enable': 'True', 'Height': '50', 'BackColor': '(1,1,1,1)', 'Top': '180', 'Font': '', 'Events': '[]'}","Button","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_clicked(self,e):		self.ConnectSerial()	def ConnectSerial(self,port):		self.SerialPort1.Port=port		try:			self.SerialPort1.Open=False		except:			pass		pass		try:			self.SerialPort1.Open=True			print("Port connected")		except:			print("Error Port")			pass	def log(self,ms):		#import pdb; pdb.set_trace();		if FileExist("saved/log.txt")==False:			SaveFileStr("saved/log.txt","Message,Date\n")		s=GetFileStr("saved/log.txt")		s+=ms+","+NowToString()+'\n'		SaveFileStr("saved/log.txt",s)	def SerialPort1_CommEvent(self,e):		while(e.available()):			c= e.read()			c=c.decode()			if self.parse1.available(c)==True:				self.window.Text = self.parse1.data				if self.caller!=None:					if self.caller.ctlOnline1.connectFlag==True:						if self.hastare==False:							self.hastare=True							self.SerialPort1.println("WTATARE")						s="WTA"+self.parse1.data						try:							self.caller.Label1.Text="Volt" + " = "  + getCSV(0,",",self.parse1.data) + " V"							self.caller.Label2.Text="Amps" + " = "  + getCSV(1,",",self.parse1.data)+ " A"						except:							pass							print(s)						self.caller.ctlOnline1.ctlWebsocket21.SendClient(s)	def Timer1_Tick(self):		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()