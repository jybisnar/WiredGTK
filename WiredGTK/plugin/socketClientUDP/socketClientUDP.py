import gi	import timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *import selectimport socketimport sysimport osfrom _thread import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def CommEvent(self,conn,data)	#add more events 	#WiredEvent def ConnectionFrom(self,conn)	#add more events 	#WiredProperty 'Port': '5000'	#WiredProperty 'Address': 'localhost'	#WiredProperty 'BufferSize': '1024'	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self._BufferSize=1024		self.address='localhost'		self.port=5000		HOST = ''   # Symbolic name meaning all available interfaces		self.conn=None		self.data=None		self.hassend=False		#self.activeXcreated()	def clientthread(self,conn):		while True:			#Receiving from client			try:				if self.hassend==True:					data, server = self.s.recvfrom(self._BufferSize)					if not data: 						break					else:						self.conn=conn					while self.data!=None:						a=0					self.data=data			except:				break		#came out of loop		print ("Server close")		conn.close()	def _accept(self):		start_new_thread(self.clientthread ,(self.s,))	@property		def Port(self):		return self.port	@Port.setter		def Port(self,value):		self.port=int(value)	@property		def Address(self):		return self.address	@Address.setter		def Address(self,value):		self.address=value		@property		def BufferSize(self):		return self._BufferSize	@BufferSize.setter		def BufferSize(self,value):		self._BufferSize=int(value)	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)		try:			#self.s.connect((self.address, self.port))			start_new_thread(self._accept ,())		except:			print("cannot connect to ",self.address)	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			self.s.close()			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.data!=None:			if self.caller!=None:				if 'CommEvent' in self.wiredevents:						self.wiredevents['CommEvent'](self.conn,self.data)				self.data=None		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'ParentsType': '', 'Name': 'Button1', 'Left': '64', 'Width': '100', 'Font': '', 'Visible': 'True', 'Picture': '', 'Enable': 'True', 'Height': '50', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'Text': 'Button1', 'BackColor': '(1,1,1,1)', 'Top': '113', 'Events': '[[, ]]'}","Button","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def sendall(self,data):		self.s.sendto(data,(self.Address,self.Port))		self.hassend=True	def close(self):		for a in self.clients:			a.close()		self.s.closeif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()