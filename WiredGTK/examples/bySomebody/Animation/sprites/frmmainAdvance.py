import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(object):	def __init__(self,*param):					initUI(self,param,w=1280,h=900,title="WiredGTKV1.0",controlbox=True,startpos=(0,0),timeoutdestroy=-1)		self.GTKForms()		self.sch=Scheduler(500)#500 ms		self.sch.Start()	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 	def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Help': '', 'Tag': 'Activex', 'AutoScale': 'True', 'Stun': 'False', 'Text': 'GIF1', 'Name': 'GIF1', 'Folder': 'birds', 'Top': '70', 'Font': '', 'Enable': 'True', 'AutoRun': 'True', 'Width': '225', 'Height': '145', 'BackColor': '(0, 0.3997104641656759, 0.4543785833569677, 0.5)', 'ParentsType': '', 'Events': '[buttonpress]', 'Left': '300', 'Speed': '100', 'Var': '', 'Acceleration': 'False', 'Picture': 'GIF.png', 'Gravity': 'True', 'ForeColor': '(0,0,0,1)', 'GavityValue': '1', 'Visible': 'True'}","GIF","usercontrol","[['buttonpress', 'self']]")		self.create("{'Left': '110', 'Top': '255', 'Tag': '', 'Font': '', 'Events': '[[, ]]', 'Text': '100,200', 'Alignment': '', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '170', 'ParentsType': '', 'Name': 'Entry1', 'Height': '30', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Entry","usercontrol","[]")		self.create("{'Left': '110', 'Top': '295', 'Tag': '', 'Font': '', 'Events': '[clicked]', 'Text': 'MoveTo', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Button1', 'Height': '50', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Left': '320', 'Top': '345', 'Tag': '', 'Font': '', 'Events': '[clicked]', 'Text': 'Gravity', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Button3', 'Height': '50', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Left': '450', 'Top': '295', 'Tag': '', 'Font': '', 'Events': '[clicked]', 'Text': 'MoveInstant', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Button4', 'Height': '50', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Left': '110', 'Top': '180', 'Tag': '', 'Font': '', 'Events': '[state-set]', 'Text': 'Switch1', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Switch1', 'Height': '30', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Switch","usercontrol","[['state-set', 'self,*args']]")		self.create("{'Left': '320', 'Top': '315', 'Tag': '', 'Font': '', 'Events': '[[, ]]', 'Text': '1', 'Alignment': '', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '75', 'ParentsType': '', 'Name': 'txtGravity', 'Height': '30', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Entry","usercontrol","[]")		self.create("{'Left': '320', 'Top': '425', 'Tag': '', 'Font': '', 'Events': '[clicked]', 'Text': 'Speed', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Button2', 'Height': '50', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Left': '320', 'Top': '395', 'Tag': '', 'Font': '', 'Events': '[[, ]]', 'Text': '100', 'Alignment': '', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '75', 'ParentsType': '', 'Name': 'txtSpeed', 'Height': '30', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Entry","usercontrol","[]")		self.create("{'Left': '110', 'Top': '150', 'Tag': '', 'Font': '', 'Events': '[[, ]]', 'Text': 'Stun', 'Alignment': '', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Label1', 'Height': '30', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Label","usercontrol","[]")		self.create("{'Left': '100', 'Top': '25', 'Tag': '', 'Font': '', 'Events': '[]', 'Text': 'Click the Bird', 'Alignment': '', 'ForeColor': '(0,0,0,1)', 'Var': '', 'Enable': 'True', 'Help': '', 'Width': '100', 'ParentsType': '', 'Name': 'Label2', 'Height': '30', 'Picture': '', 'BackColor': '(1,1,1,1)', 'Visible': 'True'}","Label","usercontrol","[]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_clicked(self,e):		try:			x,y=eval(self.Entry1.Text)			self.GIF1.Move(x,y)				except:			print("Check input")		pass	def Button2_clicked(self,e):		self.GIF1.MoveSpeed(int(self.txtSpeed.Text))		pass	def Button3_clicked(self,e):		self.GIF1.GavityValue=int(self.txtGravity.Text)		pass	def Button4_clicked(self,e): 		self.GIF1.MoveInstant(500,400)		pass	def Switch1_state_set(self,*args):		self.GIF1.Stun=self.Switch1.Active		pass	def GIF1_buttonpress(self):		x,y=self.GIF1.currX+200,self.GIF1.currY		self.GIF1.Move(x,y)		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()