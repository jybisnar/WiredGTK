import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def selectFinish(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		self.Button1.Text=DateToString()	@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	@property		def Text(self):		return self.Button1.Text	@Text.setter		def Text(self,value):		try:			self.f=Constrain(int(getCSV(0,"-",value)),0,9999)			self.s=Constrain(int(getCSV(1,"-",value)),1,12)			self.t=Constrain(int(getCSV(2,"-",value)),1,31)		except:				value=DateToString()			self.f=int(getCSV(2,"/",value))			self.s=int(getCSV(1,"/",value))			self.t=int(getCSV(0,"/",value))		self.Button1.Text="%04d" % self.f + "-" + "%02d" % self.s + "-" +"%02d" % self.t	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.Button1.Text=DateToString()		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'BackColor': '(1,1,1,1)', 'Visible': 'True', 'Left': '1', 'Font': '', 'Events': '[clicked]', 'Height': '26', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'Name': 'Button1', 'Picture': '', 'ParentsType': '', 'Enable': 'True', 'Text': 'Button1', 'Top': '1', 'Width': '132'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'BackColor': '(1,1,1,1)', 'Visible': 'False', 'Left': '1', 'Font': '', 'Events': '[button-release-event, leave-notify-event]', 'Height': '140', 'ForeColor': '(0,0,0,1)', 'Tag': '', 'Name': 'Calendar1', 'Picture': '', 'ParentsType': '', 'Enable': 'True', 'Text': 'Calendar1', 'Top': '28', 'Width': '180'}","Calendar","usercontrol","[['button-release-event', 'self,event,e'], ['leave-notify-event', 'self,*args']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def Button1_clicked(self,e):		parent=self.usercontrol.get_parent()		t=self.usercontrol.Top		l=self.usercontrol.Left		parent.remove(self._usercontrol)		parent.put(self._usercontrol,l,t)		self.usercontrol.Height=175		try:			self.Calendar1.Text=self.Button1.Text		except:			a=0		self.Calendar1.Visible=True		pass	def Calendar1_button_release_event(self,event,e):		self.Button1.Text=self.Calendar1.Text		self.usercontrol.Height=30		self.Calendar1.Visible=False		if self.caller!=None:			if 'selectFinish' in self.wiredevents:				self.wiredevents[ 'selectFinish'](self.Button1.Text)		pass	def Calendar1_leave_notify_event(self,*args):		self.Calendar1.Visible=False		self.usercontrol.Height=30		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()