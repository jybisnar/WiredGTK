import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def usercontrolevent(self,value)	#add more events 	#WiredProperty 'usercontrolproperty': 'sample only'		def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super().__init__(self.usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''			@property		def usercontrolproperty(self):		return self._usercontrolproperty	@usercontrolproperty.setter		def usercontrolproperty(self,value):		self._usercontrolproperty=value	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Enable': 'True', 'Font': '', 'Name': 'VScrollBarWTA1', 'Picture': 'VScrollBarWTA.png', 'ForeColor': '(0,0,0,1)', 'BackColor': '(0, 0.2101966178614063, 0.4239753884952725, 0.5)', 'Width': '30', 'Top': '25', 'Text': 'VScrollBarWTA1', 'Height': '164', 'Left': '60', 'Events': '[change-value]', 'Value': '1', 'Visible': 'True', 'Tag': 'Activex', 'Max': '100', 'ParentsType': ''}","VScrollBarWTA","usercontrol","[['change-value', 'self,value']]")		self.create("{'Enable': 'True', 'Font': '', 'Name': 'Entry1', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Alignment': '', 'BackColor': '(1,1,1,1)', 'Width': '40', 'Top': '160', 'Text': '18', 'Height': '30', 'Left': '135', 'Events': '[[, ]]', 'Visible': 'True', 'Tag': '', 'ParentsType': ''}","Entry","usercontrol","[]")		self.create("{'Enable': 'True', 'Font': '', 'Name': 'Label1', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'Alignment': '', 'BackColor': '(1,1,1,1)', 'Width': '30', 'Top': '165', 'Text': 'pin', 'Height': '30', 'Left': '105', 'Events': '[[, ]]', 'Visible': 'True', 'Tag': '', 'ParentsType': ''}","Label","usercontrol","[]")		self.create("{'Enable': 'True', 'Font': '', 'Name': 'Button1', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Width': '85', 'Top': '200', 'Text': 'Start', 'Height': '50', 'Left': '60', 'Events': '[clicked]', 'Visible': 'True', 'Tag': '', 'ParentsType': ''}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Enable': 'True', 'Font': '', 'Name': 'Button2', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'BackColor': '(1,1,1,1)', 'Width': '85', 'Top': '200', 'Text': 'Stop', 'Height': '50', 'Left': '150', 'Events': '[clicked]', 'Visible': 'True', 'Tag': '', 'ParentsType': ''}","Button","usercontrol","[['clicked', 'self,e']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		if modal and self.caller!=None:			self._window.set_transient_for(self.caller._window)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def VScrollBarWTA1_change_value(self,value):		try:			self.p.ChangeDutyCycle(float(value))		except:			pass	def Button1_clicked(self,e):		pin=int(self.Entry1.Text)		pinMode(pin,OUTPUT)		self.p = GPIO.PWM(pin,100)          #GPIO19 as PWM output, with 100Hz frequency		self.p.start(0) 		pass	def Button2_clicked(self,e):		self.p.stop() 		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()