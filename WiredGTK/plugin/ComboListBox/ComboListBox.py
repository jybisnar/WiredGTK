import giimport timegi.require_version('Gtk', '3.0')from gi.repository import Gtk,GObject,Gdk,Pango,GLibfrom wta_module import *#	Generated By WiredGTK for Python: by Rocky Nuarin, 2018 Phils#	#####################www.WireThemAll.com#####################class Handler(usercontrol):	#WiredEvent def dblClick(self,value)	#add more events 	#WiredProperty 'Text': ''	#WiredEvent def dblClick(self)	def __init__(self,*param):					initUI(self,param,w=400,h=400,title="WiredGTKV1.0",controlbox=True,startpos=(200,200),timeoutdestroy=-1)		self.GTKForms()		super(usercontrol).__init__(usercontrol)		self.sch=Scheduler(500)#500 ms		self.sch.Start()		self._text=''		self._usercontrolproperty=''		col=["Name"]				val=[['Red'],['Red2']]		self.datagridtreeview1.TreeViewFilterWindow(col,val)		self._List=""		self._Text=""	@property	def Text(self):		return self._Text	@Text.setter		def Text(self,value):		self._Text=value	@property	def List(self):		return self._List	@List.setter		def List(self,value):		self._List=list(value)		col=[self.Text]		val=[]		for a in self._List:			val.append([str(a)])		self.datagridtreeview1.TreeViewFilterWindow(col,val)	def connect(self,ev,evusr):		self.wiredevents.update({ev:evusr})	def activeXcreated(self,*args):		self.datagridtreeview1.Top,self.datagridtreeview1.Left=0,0		self.datagridtreeview1.Width,self.datagridtreeview1.Height=self.usercontrol.Width-20,self.usercontrol.Height-20		self.datagridtreeview1.activeXcreated()		pass	def unload(self,*args):		destroy=True		if destroy==True:			GLib.source_remove(self.timeout_id)			self._window.hide()			del self._window			#ExitApplication() #activate this if u want to destroy this window			return False		else:			self.window.Visible=False			return True			def loop(self, user_data):		if self.form_load==False:			self.form_load=True		if self.sch.Event():#timer routine			#code here			if self.timeoutdestroy!=-1:				self.timeoutdestroy-=1				if self.timeoutdestroy==0:					self.unload(None)			self.sch.Start()#restart scheduler		return True	#return true so that main_loop can call it again 		def create(self,prop,control,parent,event=[]):		createWidget(self,prop,control,parent,event)	def GTKForms(self):		self.create("{'Left': '202', 'Width': '115', 'Picture': '', 'ForeColor': '(0,0,0,1)', 'ParentsType': '', 'Tag': '', 'Name': 'Button1', 'Font': '', 'Enable': 'True', 'Top': '306', 'Var': '', 'Text': 'Datagrid Values', 'BackColor': '(1,1,1,1)', 'Help': '', 'Visible': 'True', 'Events': '[clicked]', 'Height': '34'}","Button","usercontrol","[['clicked', 'self,e']]")		self.create("{'Picture': '', 'ForeColor': '(0,0,0,1)', 'ParentsType': '', 'Tag': 'Activex', 'Font': '', 'Name': 'datagridtreeview1', 'dbtype': '', 'FontStyle': 'Times New Roman', 'Var': '', 'Text': 'datagridtreeview1', 'BackColor': '(0, 0.24499645336485343, 0.9999431506275153, 0.5)', 'FontSize': '14', 'Left': '87', 'Width': '192', 'AlternateColor': 'False', 'Enable': 'True', 'Top': '76', 'SELECT': '#FFAAAA', 'Help': '', 'Visible': 'True', 'UNSELECT': '#FFFFFF', 'Events': '[dblclick]', 'Height': '103'}","DatagridTreeView","usercontrol","[['dblclick', 'self,model,row,col']]")	def Widget(self):		if self._usercontrol in self._mainlayout.get_children():			self._mainlayout.remove(self._usercontrol)		return self._usercontrol	def Hide(self):		self._window.hide()	def Show(self,modal=False,x=None,y=None):		if x!=None:			self._window.move(x,y)		self._window.set_modal(modal)		self._window.show()		Gtk.main()		return ""#put ur return value here upon closing this form	def datagridtreeview1_dblclick(self,model,row,col):		if self.datagridtreeview1.selectionState(row)==True:			self.datagridtreeview1.selectthis(row,False)		else:			self.datagridtreeview1.selectthis(row,True)		self.Text= model[row][col]		if self.caller!=None and 'dblClick' in self.wiredevents:self.wiredevents['dblClick'](self.Text)	def Button1_clicked(self,e):		for a in self.datagridtreeview1.get_ListStore():			print(a[:])		passif __name__ == "__main__":	_m = Handler()	_m._window.show()	Gtk.main()